{"ls":[{"s":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n \n \nstruct TreeNode* sufficientSubset(struct TreeNode* \nroot, int limit){\n \n}","lang":"C"},{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public TreeNode SufficientSubset(TreeNode root, \nint limit) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} limit\n * @return {TreeNode}\n */\nvar sufficientSubset = function(root, limit) {\n \n};","lang":"JavaScript"},{"s":"# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n \n# @param {TreeNode} root\n# @param {Integer} limit\n# @return {TreeNode}\ndef sufficient_subset(root, limit)\n \nend","lang":"Ruby"},{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func sufficientSubset(_ root: TreeNode?, _ \nlimit: Int) -> TreeNode? {\n        \n    }\n}","lang":"Swift"},{"s":"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc sufficientSubset(root *TreeNode, limit int) \n*TreeNode {\n \n}","lang":"Go"}],"page":"1080/1581","h":"1080. 根到叶路径上的不足节点","d":"<div class=\"notranslate\"><p>给定一棵二叉树的根 <code>root</code>，请你考虑它所有&nbsp;<strong>从根到叶的路径</strong>：从根到任何叶的路径。（所谓一个叶子节点，就是一个没有子节点的节点）</p>\n\n<p>假如通过节点 <code>node</code> 的每种可能的 “根-叶” 路径上值的总和全都小于给定的 <code>limit</code>，则该节点被称之为「不足节点」，需要被删除。</p>\n\n<p>请你删除所有不足节点，并返回生成的二叉树的根。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong><img style=\"height: 200px; width: 482px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/08/insufficient-1.png\" alt=\"\">\n输入：</strong>root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1\n<strong><img style=\"height: 200px; width: 258px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/08/insufficient-2.png\" alt=\"\">\n输出：</strong>[1,2,3,4,null,null,7,8,9,null,14]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong><img style=\"height: 200px; width: 292px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/08/insufficient-3.png\" alt=\"\">\n输入：</strong>root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22\n<strong><img style=\"height: 200px; width: 264px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/08/insufficient-4.png\" alt=\"\">\n输出：</strong>[5,4,8,11,null,17,4,7,null,null,null,5]</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong><img style=\"height: 100px; width: 140px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/08/insufficient-5.png\" alt=\"\">\n输入：</strong>root = [5,-6,-6], limit = 0<strong>\n输出：</strong>[]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>给定的树有&nbsp;<code>1</code>&nbsp;到&nbsp;<code>5000</code>&nbsp;个节点</li>\n\t<li><code>-10^5&nbsp;&lt;= node.val &lt;= 10^5</code></li>\n\t<li><code>-10^9 &lt;= limit&nbsp;&lt;= 10^9</code></li>\n</ol>\n\n<p>&nbsp;</p>\n</div>","l":"中等","s":"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def sufficientSubset(root: TreeNode, limit: Int)\n: TreeNode = {\n \n    }\n}","lang":"Scala","href":"https://leetcode-cn.com/problems/insufficient-nodes-in-root-to-leaf-paths/","bb":{"x":490,"y":50}}

