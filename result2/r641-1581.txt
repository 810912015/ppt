{"ls":[{"s":"class MyCircularDeque {\n \n    /** Initialize your data structure here. Set the \nsize of the deque to be k. */\n    public MyCircularDeque(int k) {\n \n    }\n    \n    /** Adds an item at the front of Deque. Return \ntrue if the operation is successful. */\n    public boolean insertFront(int value) {\n \n    }\n    \n    /** Adds an item at the rear of Deque. Return \ntrue if the operation is successful. */\n    public boolean insertLast(int value) {\n \n    }\n    \n    /** Deletes an item from the front of Deque. \nReturn true if the operation is successful. */\n    public boolean deleteFront() {\n \n    }\n    ","lang":"Java"},{"s":"class MyCircularDeque(object):\n \n    def __init__(self, k):\n        \"\"\"\n        Initialize your data structure here. Set the \nsize of the deque to be k.\n        :type k: int\n        \"\"\"\n        \n \n    def insertFront(self, value):\n        \"\"\"\n        Adds an item at the front of Deque. Return \ntrue if the operation is successful.\n        :type value: int\n        :rtype: bool\n        \"\"\"\n        \n \n    def insertLast(self, value):\n        \"\"\"\n        Adds an item at the rear of Deque. Return \ntrue if the operation is successful.\n        :type value: int\n        :rtype: bool\n        \"\"\"","lang":"Python"},{"s":"class MyCircularDeque:\n \n    def __init__(self, k: int):\n        \"\"\"\n        Initialize your data structure here. Set the \nsize of the deque to be k.\n        \"\"\"\n        \n \n    def insertFront(self, value: int) -> bool:\n        \"\"\"\n        Adds an item at the front of Deque. Return \ntrue if the operation is successful.\n        \"\"\"\n        \n \n    def insertLast(self, value: int) -> bool:\n        \"\"\"\n        Adds an item at the rear of Deque. Return \ntrue if the operation is successful.\n        \"\"\"\n        \n \n    def deleteFront(self) -> bool:\n        \"\"\"\n        Deletes an item from the front of Deque. ","lang":"Python3"},{"s":"typedef struct {\n    \n} MyCircularDeque;\n \n/** Initialize your data structure here. Set the \nsize of the deque to be k. */\n \nMyCircularDeque* myCircularDequeCreate(int k) {\n    \n}\n \n/** Adds an item at the front of Deque. Return true \nif the operation is successful. */\nbool myCircularDequeInsertFront(MyCircularDeque* obj,\n int value) {\n  \n}\n \n/** Adds an item at the rear of Deque. Return true \nif the operation is successful. */\nbool myCircularDequeInsertLast(MyCircularDeque* obj, \nint value) {\n  \n}\n \n/** Deletes an item from the front of Deque. Return ","lang":"C"},{"s":"public class MyCircularDeque {\n \n    /** Initialize your data structure here. Set the \nsize of the deque to be k. */\n    public MyCircularDeque(int k) {\n \n    }\n    \n    /** Adds an item at the front of Deque. Return \ntrue if the operation is successful. */\n    public bool InsertFront(int value) {\n \n    }\n    \n    /** Adds an item at the rear of Deque. Return \ntrue if the operation is successful. */\n    public bool InsertLast(int value) {\n \n    }\n    \n    /** Deletes an item from the front of Deque. \nReturn true if the operation is successful. */\n    public bool DeleteFront() {\n \n    }\n    ","lang":"C#"},{"s":"/**\n * Initialize your data structure here. Set the size \nof the deque to be k.\n * @param {number} k\n */\nvar MyCircularDeque = function(k) {\n \n};\n \n/**\n * Adds an item at the front of Deque. Return true \nif the operation is successful. \n * @param {number} value\n * @return {boolean}\n */\nMyCircularDeque.prototype.insertFront = function\n(value) {\n \n};\n \n/**\n * Adds an item at the rear of Deque. Return true if \nthe operation is successful. \n * @param {number} value\n * @return {boolean}\n */","lang":"JavaScript"}],"page":"641/1581","h":"641. 设计循环双端队列","d":"<div class=\"notranslate\"><p>设计实现双端队列。<br>\n你的实现需要支持以下操作：</p>\n\n<ul>\n\t<li>MyCircularDeque(k)：构造函数,双端队列的大小为k。</li>\n\t<li>insertFront()：将一个元素添加到双端队列头部。 如果操作成功返回 true。</li>\n\t<li>insertLast()：将一个元素添加到双端队列尾部。如果操作成功返回 true。</li>\n\t<li>deleteFront()：从双端队列头部删除一个元素。 如果操作成功返回 true。</li>\n\t<li>deleteLast()：从双端队列尾部删除一个元素。如果操作成功返回 true。</li>\n\t<li>getFront()：从双端队列头部获得一个元素。如果双端队列为空，返回 -1。</li>\n\t<li>getRear()：获得双端队列的最后一个元素。&nbsp;如果双端队列为空，返回 -1。</li>\n\t<li>isEmpty()：检查双端队列是否为空。</li>\n\t<li>isFull()：检查双端队列是否满了。</li>\n</ul>\n\n<p><strong>示例：</strong></p>\n\n<pre>MyCircularDeque circularDeque = new MycircularDeque(3); // 设置容量大小为3\ncircularDeque.insertLast(1);\t\t\t        // 返回 true\ncircularDeque.insertLast(2);\t\t\t        // 返回 true\ncircularDeque.insertFront(3);\t\t\t        // 返回 true\ncircularDeque.insertFront(4);\t\t\t        // 已经满了，返回 false\ncircularDeque.getRear();  \t\t\t\t// 返回 2\ncircularDeque.isFull();\t\t\t\t        // 返回 true\ncircularDeque.deleteLast();\t\t\t        // 返回 true\ncircularDeque.insertFront(4);\t\t\t        // 返回 true\ncircularDeque.getFront();\t\t\t\t// 返回 4\n&nbsp;</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>所有值的范围为 [1, 1000]</li>\n\t<li>操作次数的范围为 [1, 1000]</li>\n\t<li>请不要使用内置的双端队列库。</li>\n</ul>\n</div>","l":"中等","s":"/**\n * Initialize your data structure here. Set the size \nof the deque to be k.\n * @param {number} k\n */\nvar MyCircularDeque = function(k) {\n \n};\n \n/**\n * Adds an item at the front of Deque. Return true \nif the operation is successful. \n * @param {number} value\n * @return {boolean}\n */\nMyCircularDeque.prototype.insertFront = function\n(value) {\n \n};\n \n/**\n * Adds an item at the rear of Deque. Return true if \nthe operation is successful. \n * @param {number} value\n * @return {boolean}\n */","lang":"JavaScript","href":"https://leetcode-cn.com/problems/design-circular-deque/","bb":{"x":490,"y":50}}

