{"ls":[{"s":"# @param {Integer[][]} matrix\n# @param {Integer} target\n# @return {Integer}\ndef num_submatrix_sum_target(matrix, target)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func numSubmatrixSumTarget(_ matrix: [[Int]], _ \ntarget: Int) -> Int {\n \n    }\n}","lang":"Swift"},{"s":"func numSubmatrixSumTarget(matrix [][]int, target \nint) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def numSubmatrixSumTarget(matrix: Array[Array\n[Int]], target: Int): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun numSubmatrixSumTarget(matrix: \nArray<IntArray>, target: Int): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn num_submatrix_sum_target(matrix: \nVec<Vec<i32>>, target: i32) -> i32 {\n \n    }\n}","lang":"Rust"}],"page":"1074/1581","h":"1074. 元素和为目标值的子矩阵数量","d":"<div class=\"notranslate\"><p>给出矩阵&nbsp;<code>matrix</code>&nbsp;和目标值&nbsp;<code>target</code>，返回元素总和等于目标值的非空子矩阵的数量。</p>\n\n<p>子矩阵&nbsp;<code>x1, y1, x2, y2</code>&nbsp;是满足 <code>x1 &lt;= x &lt;= x2</code>&nbsp;且&nbsp;<code>y1 &lt;= y &lt;= y2</code>&nbsp;的所有单元&nbsp;<code>matrix[x][y]</code>&nbsp;的集合。</p>\n\n<p>如果&nbsp;<code>(x1, y1, x2, y2)</code> 和&nbsp;<code>(x1', y1', x2', y2')</code>&nbsp;两个子矩阵中部分坐标不同（如：<code>x1 != x1'</code>），那么这两个子矩阵也不同。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0\n<strong>输出：</strong>4\n<strong>解释：</strong>四个只含 0 的 1x1 子矩阵。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>matrix = [[1,-1],[-1,1]], target = 0\n<strong>输出：</strong>5\n<strong>解释：</strong>两个 1x2 子矩阵，加上两个 2x1 子矩阵，再加上一个 2x2 子矩阵。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong><strong>提示：</strong></strong></p>\n\n<ol>\n\t<li><code>1 &lt;= matrix.length &lt;= 300</code></li>\n\t<li><code>1 &lt;= matrix[0].length &lt;= 300</code></li>\n\t<li><code>-1000 &lt;= matrix[i] &lt;= 1000</code></li>\n\t<li><code>-10^8 &lt;= target &lt;= 10^8</code></li>\n</ol>\n</div>","l":"困难","s":"class Solution {\n \n    /**\n     * @param Integer[][] $matrix\n     * @param Integer $target\n     * @return Integer\n     */\n    function numSubmatrixSumTarget($matrix, $target) \n{\n \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/number-of-submatrices-that-sum-to-target/","bb":{"x":490,"y":50}}

