{"ls":[{"s":"class Solution {\n    public int arrayNesting(int[] nums) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def arrayNesting(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def arrayNesting(self, nums: List[int]) -> int:","lang":"Python3"},{"s":"int arrayNesting(int* nums, int numsSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int ArrayNesting(int[] nums) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar arrayNesting = function(nums) {\n \n};","lang":"JavaScript"}],"page":"565/1581","h":"565. 数组嵌套","d":"<div class=\"notranslate\"><p>索引从<code>0</code>开始长度为<code>N</code>的数组<code>A</code>，包含<code>0</code>到<code>N - 1</code>的所有整数。找到并返回最大的集合<code>S</code>，<code>S[i] = {A[i], A[A[i]], A[A[A[i]]], ... }</code>且遵守以下的规则。</p>\n\n<p>假设选择索引为<code>i</code>的元素<code>A[i]</code>为<code>S</code>的第一个元素，<code>S</code>的下一个元素应该是<code>A[A[i]]</code>，之后是<code>A[A[A[i]]]...</code> 以此类推，不断添加直到<code>S</code>出现重复的元素。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> A = [5,4,0,3,1,6,2]\n<strong>输出:</strong> 4\n<strong>解释:</strong> \nA[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.\n\n其中一种最长的 S[K]:\nS[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li><code>N</code>是<code>[1, 20,000]</code>之间的整数。</li>\n\t<li><code>A</code>中不含有重复的元素。</li>\n\t<li><code>A</code>中的元素大小在<code>[0, N-1]</code>之间。</li>\n</ol>\n</div>","l":"中等","s":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar arrayNesting = function(nums) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/array-nesting/","bb":{"x":490,"y":50}}

