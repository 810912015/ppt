{"ls":[{"s":"class Solution {\n    public int[][] intervalIntersection(int[][] A, \nint[][] B) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def intervalIntersection(self, A, B):\n        \"\"\"\n        :type A: List[List[int]]\n        :type B: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def intervalIntersection(self, A: List[List[int]]\n, B: List[List[int]]) -> List[List[int]]:","lang":"Python3"},{"s":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as \n*returnColumnSizes array.\n * Note: Both returned array and *columnSizes array \nmust be malloced, assume caller calls free().\n */\nint** intervalIntersection(int** A, int ASize, int* \nAColSize, int** B, int BSize, int* BColSize, int* \nreturnSize, int** returnColumnSizes){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int[][] IntervalIntersection(int[][] A, \nint[][] B) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} A\n * @param {number[][]} B\n * @return {number[][]}\n */\nvar intervalIntersection = function(A, B) {\n \n};","lang":"JavaScript"}],"page":"986/1581","h":"986. 区间列表的交集","d":"<div class=\"notranslate\"><p>给定两个由一些<strong>闭区间</strong>组成的列表，每个区间列表都是成对不相交的，并且已经排序。</p>\n\n<p>返回这两个区间列表的交集。</p>\n\n<p><em>（形式上，闭区间&nbsp;<code>[a, b]</code>（其中&nbsp;<code>a &lt;= b</code>）表示实数&nbsp;<code>x</code>&nbsp;的集合，而&nbsp;<code>a &lt;= x &lt;= b</code>。两个闭区间的交集是一组实数，要么为空集，要么为闭区间。例如，[1, 3] 和 [2, 4] 的交集为 [2, 3]。）</em></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<p><strong><img style=\"height: 140px; width: 506px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/02/interval1.png\" alt=\"\"></strong></p>\n\n<pre><strong>输入：</strong>A = [[0,2],[5,10],[13,23],[24,25]], B = [[1,5],[8,12],[15,24],[25,26]]\n<strong>输出：</strong>[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]\n<strong>注意：</strong>输入和所需的输出都是区间对象组成的列表，而不是数组或列表。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt; 1000</code></li>\n\t<li><code>0 &lt;= B.length &lt; 1000</code></li>\n\t<li><code>0 &lt;= A[i].start, A[i].end, B[i].start, B[i].end &lt; 10^9</code></li>\n</ol>\n</div>","l":"中等","s":"/**\n * @param {number[][]} A\n * @param {number[][]} B\n * @return {number[][]}\n */\nvar intervalIntersection = function(A, B) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/interval-list-intersections/","bb":{"x":490,"y":50}}

