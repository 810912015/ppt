{"ls":[{"s":"/*\n// Definition for a QuadTree node.\nclass Node {\n    public boolean val;\n    public boolean isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n \n    \n    public Node() {\n        this.val = false;\n        this.isLeaf = false;\n        this.topLeft = null;\n        this.topRight = null;\n        this.bottomLeft = null;\n        this.bottomRight = null;\n    }\n    \n    public Node(boolean val, boolean isLeaf) {\n        this.val = val;\n        this.isLeaf = isLeaf;\n        this.topLeft = null;\n        this.topRight = null;\n        this.bottomLeft = null;","lang":"Java"},{"s":"\"\"\"\n# Definition for a QuadTree node.\nclass Node(object):\n    def __init__(self, val, isLeaf, topLeft, \ntopRight, bottomLeft, bottomRight):\n        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n\"\"\"\nclass Solution(object):\n    def construct(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: Node\n        \"\"\"","lang":"Python"},{"s":"\"\"\"\n# Definition for a QuadTree node.\nclass Node:\n    def __init__(self, val, isLeaf, topLeft, \ntopRight, bottomLeft, bottomRight):\n        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n\"\"\"\nclass Solution:\n    def construct(self, grid: List[List[int]]) -> \n'Node':","lang":"Python3"},{"s":"/*\n// Definition for a QuadTree node.\npublic class Node {\n    public bool val;\n    public bool isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n \n    public Node() {\n        val = false;\n        isLeaf = false;\n        topLeft = null;\n        topRight = null;\n        bottomLeft = null;\n        bottomRight = null;\n    }\n    \n    public Node(bool _val, bool _isLeaf) {\n        val = _val;\n        isLeaf = _isLeaf;\n        topLeft = null;\n        topRight = null;\n        bottomLeft = null;\n        bottomRight = null;","lang":"C#"},{"s":"/**\n * // Definition for a QuadTree node.\n * function Node(val,isLeaf,topLeft,topRight,\nbottomLeft,bottomRight) {\n *    this.val = val;\n *    this.isLeaf = isLeaf;\n *    this.topLeft = topLeft;\n *    this.topRight = topRight;\n *    this.bottomLeft = bottomLeft;\n *    this.bottomRight = bottomRight;\n * };\n */\n/**\n * @param {number[][]} grid\n * @return {Node}\n */\nvar construct = function(grid) {\n    \n};","lang":"JavaScript"},{"s":"/**\n * // Definition for a QuadTree node.\n * function Node(val,isLeaf,topLeft,topRight,\nbottomLeft,bottomRight) {\n *    this.val = val;\n *    this.isLeaf = isLeaf;\n *    this.topLeft = topLeft;\n *    this.topRight = topRight;\n *    this.bottomLeft = bottomLeft;\n *    this.bottomRight = bottomRight;\n * };\n */\n/**\n * @param {number[][]} grid\n * @return {Node}\n */\nvar construct = function(grid) {\n    \n};","lang":"JavaScript"}],"page":"427/1581","h":"427. 建立四叉树","d":"<div class=\"notranslate\"><p>我们想要使用一棵四叉树来储存一个&nbsp;<code>N x N</code> 的布尔值网络。网络中每一格的值只会是真或假。树的根结点代表整个网络。对于每个结点, 它将被分等成四个孩子结点<strong>直到这个区域内的值都是相同的.</strong></p>\n\n<p>每个结点还有另外两个布尔变量:&nbsp;<code>isLeaf</code> 和&nbsp;<code>val</code>。<code>isLeaf</code> 当这个节点是一个叶子结点时为真。<code>val</code>&nbsp;变量储存叶子结点所代表的区域的值。</p>\n\n<p>你的任务是使用一个四叉树表示给定的网络。下面的例子将有助于你理解这个问题：</p>\n\n<p>给定下面这个<code>8 x 8</code>&nbsp;网络，我们将这样建立一个对应的四叉树：</p>\n\n<p><img style=\"height:27%; width:27%\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/01/962_grid.png\" alt=\"\"></p>\n\n<p>由上文的定义，它能被这样分割：</p>\n\n<p><img style=\"height:100%; width:100%\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/01/962_grid_divided.png\" alt=\"\"></p>\n\n<p>&nbsp;</p>\n\n<p>对应的四叉树应该像下面这样，每个结点由一对&nbsp;<code>(isLeaf, val)</code>&nbsp;所代表.</p>\n\n<p>对于非叶子结点，<code>val</code>&nbsp;可以是任意的，所以使用&nbsp;<code>*</code>&nbsp;代替。</p>\n\n<p><img style=\"height:100%; width:100%\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/01/962_quad_tree.png\" alt=\"\"></p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>N</code>&nbsp;将小于&nbsp;<code>1000</code>&nbsp;且确保是 2 的整次幂。</li>\n\t<li>如果你想了解更多关于四叉树的知识，你可以参考这个&nbsp;<a href=\"https://en.wikipedia.org/wiki/Quadtree\">wiki</a>&nbsp;页面。</li>\n</ol>\n</div>","l":"中等","s":"/**\n * // Definition for a QuadTree node.\n * function Node(val,isLeaf,topLeft,topRight,\nbottomLeft,bottomRight) {\n *    this.val = val;\n *    this.isLeaf = isLeaf;\n *    this.topLeft = topLeft;\n *    this.topRight = topRight;\n *    this.bottomLeft = bottomLeft;\n *    this.bottomRight = bottomRight;\n * };\n */\n/**\n * @param {number[][]} grid\n * @return {Node}\n */\nvar construct = function(grid) {\n    \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/construct-quad-tree/","bb":{"x":490,"y":50}}

