{"ls":[{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<Integer> flipMatchVoyage(TreeNode \nroot, int[] voyage) {\n \n    }\n}","lang":"Java"},{"s":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n \nclass Solution(object):\n    def flipMatchVoyage(self, root, voyage):\n        \"\"\"\n        :type root: TreeNode\n        :type voyage: List[int]\n        :rtype: List[int]\n        \"\"\"","lang":"Python"},{"s":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n \nclass Solution:\n    def flipMatchVoyage(self, root: TreeNode, \nvoyage: List[int]) -> List[int]:","lang":"Python3"},{"s":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n \n \n/**\n * Note: The returned array must be malloced, assume \ncaller calls free().\n */\nint* flipMatchVoyage(struct TreeNode* root, int* \nvoyage, int voyageSize, int* returnSize){\n \n}","lang":"C"},{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public IList<int> FlipMatchVoyage(TreeNode root, \nint[] voyage) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number[]} voyage\n * @return {number[]}\n */\nvar flipMatchVoyage = function(root, voyage) {\n \n};","lang":"JavaScript"}],"page":"971/1581","h":"971. 翻转二叉树以匹配先序遍历","d":"<div class=\"notranslate\"><p>给定一个有 <code>N</code> 个节点的二叉树，每个节点都有一个不同于其他节点且处于 <code>{1, ..., N}</code> 中的值。</p>\n\n<p>通过交换节点的左子节点和右子节点，可以翻转该二叉树中的节点。</p>\n\n<p>考虑从根节点开始的先序遍历报告的 <code>N</code> 值序列。将这一 <code>N</code> 值序列称为树的行程。</p>\n\n<p>（回想一下，节点的先序遍历意味着我们报告当前节点的值，然后先序遍历左子节点，再先序遍历右子节点。）</p>\n\n<p>我们的目标是翻转<strong>最少的</strong>树中节点，以便树的行程与给定的行程&nbsp;<code>voyage</code>&nbsp;相匹配。&nbsp;</p>\n\n<p>如果可以，则返回翻转的所有节点的值的列表。你可以按任何顺序返回答案。</p>\n\n<p>如果不能，则返回列表 <code>[-1]</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><strong><img style=\"height: 120px; width: 88px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/05/1219-01.png\" alt=\"\"></strong></p>\n\n<pre><strong>输入：</strong>root = [1,2], voyage = [2,1]\n<strong>输出：</strong>[-1]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><strong><img style=\"height: 120px; width: 127px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/05/1219-02.png\" alt=\"\"></strong></p>\n\n<pre><strong>输入：</strong>root = [1,2,3], voyage = [1,3,2]\n<strong>输出：</strong>[1]\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<p><strong><img style=\"height: 120px; width: 127px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/05/1219-02.png\" alt=\"\"></strong></p>\n\n<pre><strong>输入：</strong>root = [1,2,3], voyage = [1,2,3]\n<strong>输出：</strong>[]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 100</code></li>\n</ol>\n</div>","l":"中等","s":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number[]} voyage\n * @return {number[]}\n */\nvar flipMatchVoyage = function(root, voyage) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/flip-binary-tree-to-match-preorder-traversal/","bb":{"x":490,"y":50}}

