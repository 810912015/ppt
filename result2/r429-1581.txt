{"ls":[{"s":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> children;\n \n    public Node() {}\n \n    public Node(int _val) {\n        val = _val;\n    }\n \n    public Node(int _val, List<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\nclass Solution {\n    public List<List<Integer>> levelOrder(Node root) \n{\n        \n    }\n}","lang":"Java"},{"s":"\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: List[List[int]]\n        \"\"\"","lang":"Python"},{"s":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\nclass Solution:\n    def levelOrder(self, root: 'Node') -> List[List\n[int]]:","lang":"Python3"},{"s":"/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public IList<Node> children;\n \n    public Node() {}\n \n    public Node(int _val) {\n        val = _val;\n    }\n \n    public Node(int _val, IList<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n}\n*/\npublic class Solution {\n    public IList<IList<int>> LevelOrder(Node root) {\n        \n    }\n}","lang":"C#"},{"s":"/**\n * // Definition for a Node.\n * function Node(val,children) {\n *    this.val = val;\n *    this.children = children;\n * };\n */\n/**\n * @param {Node} root\n * @return {number[][]}\n */\nvar levelOrder = function(root) {\n    \n};","lang":"JavaScript"},{"s":"/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Children []*Node\n * }\n */\n \nfunc levelOrder(root *Node) [][]int {\n    \n}","lang":"Go"}],"page":"429/1581","h":"429. N叉树的层序遍历","d":"<div class=\"notranslate\"><p>给定一个 N 叉树，返回其节点值的<em>层序遍历</em>。 (即从左到右，逐层遍历)。</p>\n\n<p>例如，给定一个&nbsp;<code>3叉树</code>&nbsp;:</p>\n\n<p>&nbsp;</p>\n\n<p><img style=\"width: 100%; max-width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/narytreeexample.png\"></p>\n\n<p>&nbsp;</p>\n\n<p>返回其层序遍历:</p>\n\n<pre>[\n     [1],\n     [3,2,4],\n     [5,6]\n]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>树的深度不会超过&nbsp;<code>1000</code>。</li>\n\t<li>树的节点总数不会超过&nbsp;<code>5000</code>。</li>\n</ol></div>","l":"中等","s":"/**\n * // Definition for a Node.\n * function Node(val,children) {\n *    this.val = val;\n *    this.children = children;\n * };\n */\n/**\n * @param {Node} root\n * @return {number[][]}\n */\nvar levelOrder = function(root) {\n    \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/","bb":{"x":490,"y":50}}

