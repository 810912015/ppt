{"ls":[{"s":"class Solution {\n    public boolean checkInclusion(String s1, String \ns2) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def checkInclusion(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def checkInclusion(self, s1: str, s2: str) -> \nbool:","lang":"Python3"},{"s":"bool checkInclusion(char * s1, char * s2){\n \n}","lang":"C"},{"s":"public class Solution {\n    public bool CheckInclusion(string s1, string s2) \n{\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} s1\n * @param {string} s2\n * @return {boolean}\n */\nvar checkInclusion = function(s1, s2) {\n \n};","lang":"JavaScript"}],"page":"567/1581","h":"567. 字符串的排列","d":"<div class=\"notranslate\"><p>给定两个字符串&nbsp;<strong>s1</strong>&nbsp;和&nbsp;<strong>s2</strong>，写一个函数来判断 <strong>s2</strong> 是否包含 <strong>s1&nbsp;</strong>的排列。</p>\n\n<p>换句话说，第一个字符串的排列之一是第二个字符串的子串。</p>\n\n<p><strong>示例1:</strong></p>\n\n<pre><strong>输入: </strong>s1 = \"ab\" s2 = \"eidbaooo\"\n<strong>输出: </strong>True\n<strong>解释:</strong> s2 包含 s1 的排列之一 (\"ba\").\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例2:</strong></p>\n\n<pre><strong>输入: </strong>s1= \"ab\" s2 = \"eidboaoo\"\n<strong>输出:</strong> False\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li>输入的字符串只包含小写字母</li>\n\t<li>两个字符串的长度都在 [1, 10,000] 之间</li>\n</ol>\n</div>","l":"中等","s":"/**\n * @param {string} s1\n * @param {string} s2\n * @return {boolean}\n */\nvar checkInclusion = function(s1, s2) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/permutation-in-string/","bb":{"x":490,"y":50}}

