{"ls":[{"s":"/*\n// Employee info\nclass Employee {\n    // It's the unique id of each node;\n    // unique id of this employee\n    public int id;\n    // the importance value of this employee\n    public int importance;\n    // the id of direct subordinates\n    public List<Integer> subordinates;\n};\n*/\nclass Solution {\n    public int getImportance(List<Employee> \nemployees, int id) {\n        \n    }\n}","lang":"Java"},{"s":"\"\"\"\n# Employee info\nclass Employee(object):\n    def __init__(self, id, importance, subordinates):\n        #################\n        :type id: int\n        :type importance: int\n        :type subordinates: List[int]\n        #################\n        # It's the unique id of each node.\n        # unique id of this employee\n        self.id = id\n        # the importance value of this employee\n        self.importance = importance\n        # the id of direct subordinates\n        self.subordinates = subordinates\n\"\"\"\nclass Solution(object):\n    def getImportance(self, employees, id):\n        \"\"\"\n        :type employees: List[Employee]\n        :type id: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"\"\"\"\n# Employee info\nclass Employee:\n    def __init__(self, id: int, importance: int, \nsubordinates: List[int]):\n        # It's the unique id of each node.\n        # unique id of this employee\n        self.id = id\n        # the importance value of this employee\n        self.importance = importance\n        # the id of direct subordinates\n        self.subordinates = subordinates\n\"\"\"\nclass Solution:\n    def getImportance(self, employees: List\n['Employee'], id: int) -> int:","lang":"Python3"},{"s":"=begin\n# Employee info\nclass Employee\n    attr_accessor :id, :importance, :subordinates\n    def initialize( id, importance, subordinates)\n        # It's the unique id of each node.\n        # unique id of this employee\n        @id = id\n        # the importance value of this employee\n        @importance = importance\n        # the id of direct subordinates\n        @subordinates = subordinates\n    end\nend\n=end\n# @param {Employee} employees\n# @param {Integer} id\n# @return {Integer}\ndef get_importance(employees, id)\n    \nend","lang":"Ruby"},{"s":"=begin\n# Employee info\nclass Employee\n    attr_accessor :id, :importance, :subordinates\n    def initialize( id, importance, subordinates)\n        # It's the unique id of each node.\n        # unique id of this employee\n        @id = id\n        # the importance value of this employee\n        @importance = importance\n        # the id of direct subordinates\n        @subordinates = subordinates\n    end\nend\n=end\n# @param {Employee} employees\n# @param {Integer} id\n# @return {Integer}\ndef get_importance(employees, id)\n    \nend","lang":"Ruby"},{"s":"=begin\n# Employee info\nclass Employee\n    attr_accessor :id, :importance, :subordinates\n    def initialize( id, importance, subordinates)\n        # It's the unique id of each node.\n        # unique id of this employee\n        @id = id\n        # the importance value of this employee\n        @importance = importance\n        # the id of direct subordinates\n        @subordinates = subordinates\n    end\nend\n=end\n# @param {Employee} employees\n# @param {Integer} id\n# @return {Integer}\ndef get_importance(employees, id)\n    \nend","lang":"Ruby"}],"page":"690/1581","h":"690. 员工的重要性","d":"<div class=\"notranslate\"><p>给定一个保存员工信息的数据结构，它包含了员工<strong>唯一的id</strong>，<strong>重要度&nbsp;</strong>和 <strong>直系下属的id</strong>。</p>\n\n<p>比如，员工1是员工2的领导，员工2是员工3的领导。他们相应的重要度为15, 10, 5。那么员工1的数据结构是[1, 15, [2]]，员工2的数据结构是[2, 10, [3]]，员工3的数据结构是[3, 5, []]。注意虽然员工3也是员工1的一个下属，但是由于<strong>并不是直系</strong>下属，因此没有体现在员工1的数据结构中。</p>\n\n<p>现在输入一个公司的所有员工信息，以及单个员工id，返回这个员工和他所有下属的重要度之和。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1\n<strong>输出:</strong> 11\n<strong>解释:</strong>\n员工1自身的重要度是5，他有两个直系下属2和3，而且2和3的重要度均为3。因此员工1的总重要度是 5 + 3 + 3 = 11。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>一个员工最多有一个<strong>直系</strong>领导，但是可以有多个<strong>直系</strong>下属</li>\n\t<li>员工数量不超过2000。</li>\n</ol>\n</div>","l":"简单","s":"/*\n// Employee info\nclass Employee {\npublic:\n    // It's the unique ID of each node.\n    // unique id of this employee\n    int id;\n    // the importance value of this employee\n    int importance;\n    // the id of direct subordinates\n    vector<int> subordinates;\n};\n*/\nclass Solution {\npublic:\n    int getImportance(vector<Employee*> employees, \nint id) {\n        \n    }\n};","lang":"C++","href":"https://leetcode-cn.com/problems/employee-importance/","bb":{"x":490,"y":50}}

