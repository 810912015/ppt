{"ls":[{"s":"/**\n * // This is MountainArray's API interface.\n * // You should not implement it, or speculate \nabout its implementation\n * interface MountainArray {\n *     public int get(int index) {}\n *     public int length() {}\n * }\n */\n \nclass Solution {\n    public int findInMountainArray(int target, \nMountainArray mountainArr) {\n        \n    }\n}","lang":"Java"},{"s":"# \"\"\"\n# This is MountainArray's API interface.\n# You should not implement it, or speculate about \nits implementation\n# \"\"\"\n#class MountainArray(object):\n#    def get(self, index):\n#        \"\"\"\n#        :type index: int\n#        :rtype int\n#        \"\"\"\n#\n#    def length(self):\n#        \"\"\"\n#        :rtype int\n#        \"\"\"\n \nclass Solution(object):\n    def findInMountainArray(self, target, \nmountain_arr):\n        \"\"\"\n        :type target: integer\n        :type mountain_arr: MountainArray\n        :rtype: integer\n        \"\"\"","lang":"Python"},{"s":"# \"\"\"\n# This is MountainArray's API interface.\n# You should not implement it, or speculate about \nits implementation\n# \"\"\"\n#class MountainArray:\n#    def get(self, index: int) -> int:\n#    def length(self) -> int:\n \nclass Solution:\n    def findInMountainArray(self, target: int, \nmountain_arr: 'MountainArray') -> int:","lang":"Python3"},{"s":"/**\n * \n*****************************************************\n****************\n * // This is the MountainArray's API interface.\n * // You should not implement it, or speculate \nabout its implementation\n * \n*****************************************************\n****************\n *\n * int get(MountainArray *, int index);\n * int length(MountainArray *);\n */\nint findInMountainArray(int target, MountainArray* \nmountainArr){\n    \n}","lang":"C"},{"s":"/**\n * // This is MountainArray's API interface.\n * // You should not implement it, or speculate \nabout its implementation\n * class MountainArray {\n *     public int Get(int index) {}\n *     public int Length() {}\n * }\n */\n \nclass Solution {\n    public int FindInMountainArray(int target, \nMountainArray mountainArr) {\n        \n    }\n}","lang":"C#"},{"s":"/**\n * // This is the MountainArray's API interface.\n * // You should not implement it, or speculate \nabout its implementation\n * function MountainArray() {\n *\n *     @param {number} index\n *     @return {number}\n *     this.get = function(index) {\n *         ...\n *     };\n *\n *     @return {number}\n *     this.length = function() {\n *         ...\n *     };\n * };\n */\n/**\n * @param {number} target\n * @param {MountainArray} mountainArr\n * @return {number}\n */\nvar findInMountainArray = function(target, \nmountainArr) {\n    ","lang":"JavaScript"}],"page":"1095/1581","h":"1095. 山脉数组中查找目标值","d":"<div class=\"notranslate\"><p>（这是一个 <strong>交互式问题&nbsp;</strong>）</p>\n\n<p>给你一个 <strong>山脉数组</strong>&nbsp;<code>mountainArr</code>，请你返回能够使得&nbsp;<code>mountainArr.get(index)</code>&nbsp;<strong>等于</strong>&nbsp;<code>target</code>&nbsp;<strong>最小</strong>&nbsp;的下标 <code>index</code>&nbsp;值。</p>\n\n<p>如果不存在这样的下标 <code>index</code>，就请返回&nbsp;<code>-1</code>。</p>\n\n<p>&nbsp;</p>\n\n<p>所谓山脉数组，即数组&nbsp;<code>A</code>&nbsp;假如是一个山脉数组的话，需要满足如下条件：</p>\n\n<p><strong>首先</strong>，<code>A.length &gt;= 3</code></p>\n\n<p><strong>其次</strong>，在&nbsp;<code>0 &lt; i&nbsp;&lt; A.length - 1</code>&nbsp;条件下，存在 <code>i</code> 使得：</p>\n\n<ul>\n\t<li><code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i]</code></li>\n\t<li><code>A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p>你将&nbsp;<strong>不能直接访问该山脉数组</strong>，必须通过&nbsp;<code>MountainArray</code>&nbsp;接口来获取数据：</p>\n\n<ul>\n\t<li><code>MountainArray.get(k)</code>&nbsp;- 会返回数组中索引为<code>k</code>&nbsp;的元素（下标从 0 开始）</li>\n\t<li><code>MountainArray.length()</code>&nbsp;- 会返回该数组的长度</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>注意：</strong></p>\n\n<p>对&nbsp;<code>MountainArray.get</code>&nbsp;发起超过 <code>100</code> 次调用的提交将被视为错误答案。此外，任何试图规避判题系统的解决方案都将会导致比赛资格被取消。</p>\n\n<p>为了帮助大家更好地理解交互式问题，我们准备了一个样例 “<strong>答案</strong>”：<a href=\"https://leetcode-cn.com/playground/RKhe3ave\">https://leetcode-cn.com/playground/RKhe3ave</a>，请注意这 <strong>不是一个正确答案</strong>。</p>\n\n<ol>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>array = [1,2,3,4,5,3,1], target = 3\n<strong>输出：</strong>2\n<strong>解释：</strong>3 在数组中出现了两次，下标分别为 2 和 5，我们返回最小的下标 2。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>array = [0,1,2,4,2,1], target = 3\n<strong>输出：</strong>-1\n<strong>解释：</strong>3 在数组中没有出现，返回 -1。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>3 &lt;= mountain_arr.length() &lt;= 10000</code></li>\n\t<li><code>0 &lt;= target &lt;= 10^9</code></li>\n\t<li><code>0 &lt;= mountain_arr.get(index) &lt;=&nbsp;10^9</code></li>\n</ol>\n</div>","l":"困难","s":"/**\n * // This is the MountainArray's API interface.\n * // You should not implement it, or speculate \nabout its implementation\n * function MountainArray() {\n *\n *     @param {number} index\n *     @return {number}\n *     this.get = function(index) {\n *         ...\n *     };\n *\n *     @return {number}\n *     this.length = function() {\n *         ...\n *     };\n * };\n */\n/**\n * @param {number} target\n * @param {MountainArray} mountainArr\n * @return {number}\n */\nvar findInMountainArray = function(target, \nmountainArr) {\n    ","lang":"JavaScript","href":"https://leetcode-cn.com/problems/find-in-mountain-array/","bb":{"x":490,"y":50}}

