{"ls":[{"s":"class Solution {\n    public List<List<Integer>> palindromePairs(String\n[] words) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def palindromePairs(self, words: List[str]) -> \nList[List[int]]:","lang":"Python3"},{"s":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as \n*returnColumnSizes array.\n * Note: Both returned array and *columnSizes array \nmust be malloced, assume caller calls free().\n */\nint** palindromePairs(char ** words, int wordsSize, \nint* returnSize, int** returnColumnSizes){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<IList<int>> PalindromePairs(string[]\n words) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string[]} words\n * @return {number[][]}\n */\nvar palindromePairs = function(words) {\n \n};","lang":"JavaScript"}],"page":"336/1581","h":"336. 回文对","d":"<div class=\"notranslate\"><p>给定一组<strong>唯一</strong>的单词， 找出所有<strong><em>不同&nbsp;</em></strong>的索引对<code>(i, j)</code>，使得列表中的两个单词，&nbsp;<code>words[i] + words[j]</code>&nbsp;，可拼接成回文串。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>[\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]\n<strong>输出: </strong>[[0,1],[1,0],[3,2],[2,4]] \n<strong>解释: </strong>可拼接成的回文串为 <code>[\"dcbaabcd\",\"abcddcba\",\"slls\",\"llssssll\"]</code>\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>[\"bat\",\"tab\",\"cat\"]\n<strong>输出: </strong>[[0,1],[1,0]] \n<strong>解释: </strong>可拼接成的回文串为 <code>[\"battab\",\"tabbat\"]</code></pre>\n</div>","l":"困难","s":"/**\n * @param {string[]} words\n * @return {number[][]}\n */\nvar palindromePairs = function(words) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/palindrome-pairs/","bb":{"x":490,"y":50}}

