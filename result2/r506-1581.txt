{"ls":[{"s":"class Solution {\n    public String[] findRelativeRanks(int[] nums) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def findRelativeRanks(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def findRelativeRanks(self, nums: List[int]) -> \nList[str]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, assume \ncaller calls free().\n */\nchar ** findRelativeRanks(int* nums, int numsSize, \nint* returnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public string[] FindRelativeRanks(int[] nums) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @return {string[]}\n */\nvar findRelativeRanks = function(nums) {\n \n};","lang":"JavaScript"}],"page":"506/1581","h":"506. 相对名次","d":"<div class=\"notranslate\"><p>给出&nbsp;<strong>N</strong> 名运动员的成绩，找出他们的相对名次并授予前三名对应的奖牌。前三名运动员将会被分别授予 “金牌”，“银牌” 和“ 铜牌”（\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\"）。</p>\n\n<p>(注：分数越高的选手，排名越靠前。)</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [5, 4, 3, 2, 1]\n<strong>输出:</strong> [\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\", \"4\", \"5\"]\n<strong>解释:</strong> 前三名运动员的成绩为前三高的，因此将会分别被授予 “金牌”，“银牌”和“铜牌” (\"Gold Medal\", \"Silver Medal\" and \"Bronze Medal\").\n余下的两名运动员，我们只需要通过他们的成绩计算将其相对名次即可。</pre>\n\n<p><strong>提示:</strong></p>\n\n<ol>\n\t<li>N 是一个正整数并且不会超过&nbsp;10000。</li>\n\t<li>所有运动员的成绩都不相同。</li>\n</ol>\n</div>","l":"简单","s":"/**\n * @param {number[]} nums\n * @return {string[]}\n */\nvar findRelativeRanks = function(nums) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/relative-ranks/","bb":{"x":490,"y":50}}

