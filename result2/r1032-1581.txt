{"ls":[{"s":"class StreamChecker {\n \n    public StreamChecker(String[] words) {\n \n    }\n    \n    public boolean query(char letter) {\n \n    }\n}\n \n/**\n * Your StreamChecker object will be instantiated \nand called as such:\n * StreamChecker obj = new StreamChecker(words);\n * boolean param_1 = obj.query(letter);\n */","lang":"Java"},{"s":"class StreamChecker(object):\n \n    def __init__(self, words):\n        \"\"\"\n        :type words: List[str]\n        \"\"\"\n        \n \n    def query(self, letter):\n        \"\"\"\n        :type letter: str\n        :rtype: bool\n        \"\"\"\n        \n \n \n# Your StreamChecker object will be instantiated and \ncalled as such:\n# obj = StreamChecker(words)\n# param_1 = obj.query(letter)","lang":"Python"},{"s":"class StreamChecker:\n \n    def __init__(self, words: List[str]):\n        \n \n    def query(self, letter: str) -> bool:\n        \n \n \n# Your StreamChecker object will be instantiated and \ncalled as such:\n# obj = StreamChecker(words)\n# param_1 = obj.query(letter)","lang":"Python3"},{"s":"typedef struct {\n    \n} StreamChecker;\n \n \nStreamChecker* streamCheckerCreate(char ** words, \nint wordsSize) {\n    \n}\n \nbool streamCheckerQuery(StreamChecker* obj, char \nletter) {\n  \n}\n \nvoid streamCheckerFree(StreamChecker* obj) {\n    \n}\n \n/**\n * Your StreamChecker struct will be instantiated \nand called as such:\n * StreamChecker* obj = streamCheckerCreate(words, \nwordsSize);\n * bool param_1 = streamCheckerQuery(obj, letter);\n ","lang":"C"},{"s":"public class StreamChecker {\n \n    public StreamChecker(string[] words) {\n \n    }\n    \n    public bool Query(char letter) {\n \n    }\n}\n \n/**\n * Your StreamChecker object will be instantiated \nand called as such:\n * StreamChecker obj = new StreamChecker(words);\n * bool param_1 = obj.Query(letter);\n */","lang":"C#"},{"s":"/**\n * @param {string[]} words\n */\nvar StreamChecker = function(words) {\n \n};\n \n/** \n * @param {character} letter\n * @return {boolean}\n */\nStreamChecker.prototype.query = function(letter) {\n \n};\n \n/**\n * Your StreamChecker object will be instantiated \nand called as such:\n * var obj = new StreamChecker(words)\n * var param_1 = obj.query(letter)\n */","lang":"JavaScript"}],"page":"1032/1581","h":"1032. 字符流","d":"<div class=\"notranslate\"><p>按下述要求实现 <code>StreamChecker</code> 类：</p>\n\n<ul>\n\t<li><code>StreamChecker(words)</code>：构造函数，用给定的字词初始化数据结构。</li>\n\t<li><code>query(letter)</code>：如果存在某些 <code>k &gt;= 1</code>，可以用查询的最后 <code>k</code>个字符（按从旧到新顺序，包括刚刚查询的字母）拼写出给定字词表中的某一字词时，返回 <code>true</code>。否则，返回 <code>false</code>。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>StreamChecker streamChecker = new StreamChecker([\"cd\",\"f\",\"kl\"]); // 初始化字典\nstreamChecker.query('a');          // 返回 false\nstreamChecker.query('b');          // 返回 false\nstreamChecker.query('c');          // 返回 false\nstreamChecker.query('d');          // 返回 true，因为 'cd' 在字词表中\nstreamChecker.query('e');          // 返回 false\nstreamChecker.query('f');          // 返回 true，因为 'f' 在字词表中\nstreamChecker.query('g');          // 返回 false\nstreamChecker.query('h');          // 返回 false\nstreamChecker.query('i');          // 返回 false\nstreamChecker.query('j');          // 返回 false\nstreamChecker.query('k');          // 返回 false\nstreamChecker.query('l');          // 返回 true，因为 'kl' 在字词表中。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 2000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 2000</code></li>\n\t<li>字词只包含小写英文字母。</li>\n\t<li>待查项只包含小写英文字母。</li>\n\t<li>待查项最多 40000 个。</li>\n</ul>\n</div>","l":"困难","s":"/**\n * @param {string[]} words\n */\nvar StreamChecker = function(words) {\n \n};\n \n/** \n * @param {character} letter\n * @return {boolean}\n */\nStreamChecker.prototype.query = function(letter) {\n \n};\n \n/**\n * Your StreamChecker object will be instantiated \nand called as such:\n * var obj = new StreamChecker(words)\n * var param_1 = obj.query(letter)\n */","lang":"JavaScript","href":"https://leetcode-cn.com/problems/stream-of-characters/","bb":{"x":490,"y":50}}

