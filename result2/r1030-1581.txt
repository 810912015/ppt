{"ls":[{"s":"class Solution {\n    public int[][] allCellsDistOrder(int R, int C, \nint r0, int c0) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def allCellsDistOrder(self, R, C, r0, c0):\n        \"\"\"\n        :type R: int\n        :type C: int\n        :type r0: int\n        :type c0: int\n        :rtype: List[List[int]]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def allCellsDistOrder(self, R: int, C: int, r0: \nint, c0: int) -> List[List[int]]:","lang":"Python3"},{"s":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as \n*returnColumnSizes array.\n * Note: Both returned array and *columnSizes array \nmust be malloced, assume caller calls free().\n */\nint** allCellsDistOrder(int R, int C, int r0, int c0,\n int* returnSize, int** returnColumnSizes){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int[][] AllCellsDistOrder(int R, int C, \nint r0, int c0) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} R\n * @param {number} C\n * @param {number} r0\n * @param {number} c0\n * @return {number[][]}\n */\nvar allCellsDistOrder = function(R, C, r0, c0) {\n \n};","lang":"JavaScript"}],"page":"1030/1581","h":"1030. 距离顺序排列矩阵单元格","d":"<div class=\"notranslate\"><p>给出 <code>R</code> 行 <code>C</code> 列的矩阵，其中的单元格的整数坐标为 <code>(r, c)</code>，满足 <code>0 &lt;= r &lt; R</code> 且 <code>0 &lt;= c &lt; C</code>。</p>\n\n<p>另外，我们在该矩阵中给出了一个坐标为&nbsp;<code>(r0, c0)</code> 的单元格。</p>\n\n<p>返回矩阵中的所有单元格的坐标，并按到 <code>(r0, c0)</code> 的距离从最小到最大的顺序排，其中，两单元格<code>(r1, c1)</code> 和 <code>(r2, c2)</code> 之间的距离是曼哈顿距离，<code>|r1 - r2| + |c1 - c2|</code>。（你可以按任何满足此条件的顺序返回答案。）</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>R = 1, C = 2, r0 = 0, c0 = 0\n<strong>输出：</strong>[[0,0],[0,1]]\n<strong>解释</strong>：从 (r0, c0) 到其他单元格的距离为：[0,1]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>R = 2, C = 2, r0 = 0, c0 = 1\n<strong>输出：</strong>[[0,1],[0,0],[1,1],[1,0]]\n<strong>解释</strong>：从 (r0, c0) 到其他单元格的距离为：[0,1,1,2]\n[[0,1],[1,1],[0,0],[1,0]] 也会被视作正确答案。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>R = 2, C = 3, r0 = 1, c0 = 2\n<strong>输出：</strong>[[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]\n<strong>解释</strong>：从 (r0, c0) 到其他单元格的距离为：[0,1,1,2,2,3]\n其他满足题目要求的答案也会被视为正确，例如 [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]]。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= R &lt;= 100</code></li>\n\t<li><code>1 &lt;= C &lt;= 100</code></li>\n\t<li><code>0 &lt;= r0 &lt; R</code></li>\n\t<li><code>0 &lt;= c0 &lt; C</code></li>\n</ol>\n</div>","l":"简单","s":"/**\n * @param {number} R\n * @param {number} C\n * @param {number} r0\n * @param {number} c0\n * @return {number[][]}\n */\nvar allCellsDistOrder = function(R, C, r0, c0) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/matrix-cells-in-distance-order/","bb":{"x":490,"y":50}}

