{"ls":[{"s":"class ZeroEvenOdd {\n    private int n;\n    \n    public ZeroEvenOdd(int n) {\n        this.n = n;\n    }\n \n    // printNumber.accept(x) outputs \"x\", where x is \nan integer.\n    public void zero(IntConsumer printNumber) throws \nInterruptedException {\n        \n    }\n \n    public void even(IntConsumer printNumber) throws \nInterruptedException {\n        \n    }\n \n    public void odd(IntConsumer printNumber) throws \nInterruptedException {\n        \n    }\n}","lang":"Java"},{"s":"class ZeroEvenOdd(object):\n    def __init__(self, n):\n        self.n = n\n        \n        \n    # printNumber(x) outputs \"x\", where x is an \ninteger.\n    def zero(self, printNumber):\n        \"\"\"\n        :type printNumber: method\n        :rtype: void\n        \"\"\"\n        \n        \n        \n    def even(self, printNumber):\n        \"\"\"\n        :type printNumber: method\n        :rtype: void\n        \"\"\"\n        \n        \n        \n    def odd(self, printNumber):\n        \"\"\"\n        :type printNumber: method","lang":"Python"},{"s":"class ZeroEvenOdd:\n    def __init__(self, n):\n        self.n = n\n        \n        \n    # printNumber(x) outputs \"x\", where x is an \ninteger.\n    def zero(self, printNumber: 'Callable[[int], \nNone]') -> None:\n        \n        \n        \n    def even(self, printNumber: 'Callable[[int], \nNone]') -> None:\n        \n        \n        \n    def odd(self, printNumber: 'Callable[[int], None]\n') -> None:","lang":"Python3"},{"s":"typedef struct {\n    int n;\n} ZeroEvenOdd;\n \nZeroEvenOdd* zeroEvenOddCreate(int n) {\n    ZeroEvenOdd* obj = (ZeroEvenOdd*) malloc(sizeof\n(ZeroEvenOdd));\n    obj->n = n;\n    return obj;\n}\n \n// You may call global function `void printNumber\n(int x)`\n// to output \"x\", where x is an integer.\n \nvoid zero(ZeroEvenOdd* obj) {\n    \n}\n \nvoid even(ZeroEvenOdd* obj) {\n    \n}\n \nvoid odd(ZeroEvenOdd* obj) {\n    \n}","lang":"C"},{"s":"public class ZeroEvenOdd {\n    private int n;\n    \n    public ZeroEvenOdd(int n) {\n        this.n = n;\n    }\n \n    // printNumber(x) outputs \"x\", where x is an \ninteger.\n    public void Zero(Action<int> printNumber) {\n        \n    }\n \n    public void Even(Action<int> printNumber) {\n        \n    }\n \n    public void Odd(Action<int> printNumber) {\n        \n    }\n}","lang":"C#"},{"s":"public class ZeroEvenOdd {\n    private int n;\n    \n    public ZeroEvenOdd(int n) {\n        this.n = n;\n    }\n \n    // printNumber(x) outputs \"x\", where x is an \ninteger.\n    public void Zero(Action<int> printNumber) {\n        \n    }\n \n    public void Even(Action<int> printNumber) {\n        \n    }\n \n    public void Odd(Action<int> printNumber) {\n        \n    }\n}","lang":"C#"}],"page":"1116/1581","h":"1116. 打印零与奇偶数","d":"<div class=\"notranslate\"><p>假设有这么一个类：</p>\n\n<pre>class ZeroEvenOdd {\n&nbsp; public ZeroEvenOdd(int n) { ... }&nbsp;     // 构造函数\n  public void zero(printNumber) { ... }  // 仅打印出 0\n  public void even(printNumber) { ... }  // 仅打印出 偶数\n  public void odd(printNumber) { ... }   // 仅打印出 奇数\n}\n</pre>\n\n<p>相同的一个&nbsp;<code>ZeroEvenOdd</code>&nbsp;类实例将会传递给三个不同的线程：</p>\n\n<ol>\n\t<li>线程 A 将调用&nbsp;<code>zero()</code>，它只输出 0 。</li>\n\t<li>线程 B 将调用&nbsp;<code>even()</code>，它只输出偶数。</li>\n\t<li>线程 C 将调用&nbsp;<code>odd()</code>，它只输出奇数。</li>\n</ol>\n\n<p>每个线程都有一个&nbsp;<code>printNumber</code> 方法来输出一个整数。请修改给出的代码以输出整数序列&nbsp;<code>010203040506</code>... ，其中序列的长度必须为 2<em>n</em>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>n = 2\n<strong>输出：</strong>\"0102\"\n<strong>说明：</strong>三条线程异步执行，其中一个调用 zero()，另一个线程调用 even()，最后一个线程调用odd()。正确的输出为 \"0102\"。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>n = 5\n<strong>输出：</strong>\"0102030405\"\n</pre>\n</div>","l":"中等","s":"public class ZeroEvenOdd {\n    private int n;\n    \n    public ZeroEvenOdd(int n) {\n        this.n = n;\n    }\n \n    // printNumber(x) outputs \"x\", where x is an \ninteger.\n    public void Zero(Action<int> printNumber) {\n        \n    }\n \n    public void Even(Action<int> printNumber) {\n        \n    }\n \n    public void Odd(Action<int> printNumber) {\n        \n    }\n}","lang":"C#","href":"https://leetcode-cn.com/problems/print-zero-even-odd/","bb":{"x":490,"y":50}}

