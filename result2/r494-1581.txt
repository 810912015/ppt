{"ls":[{"s":"class Solution {\n    public int findTargetSumWays(int[] nums, int S) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def findTargetSumWays(self, nums, S):\n        \"\"\"\n        :type nums: List[int]\n        :type S: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def findTargetSumWays(self, nums: List[int], S: \nint) -> int:","lang":"Python3"},{"s":"int findTargetSumWays(int* nums, int numsSize, int S)\n{\n \n}","lang":"C"},{"s":"public class Solution {\n    public int FindTargetSumWays(int[] nums, int S) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @param {number} S\n * @return {number}\n */\nvar findTargetSumWays = function(nums, S) {\n \n};","lang":"JavaScript"}],"page":"494/1581","h":"494. 目标和","d":"<div class=\"notranslate\"><p>给定一个非负整数数组，a1, a2, ..., an, 和一个目标数，S。现在你有两个符号&nbsp;<code>+</code>&nbsp;和&nbsp;<code>-</code>。对于数组中的任意一个整数，你都可以从&nbsp;<code>+</code>&nbsp;或&nbsp;<code>-</code>中选择一个符号添加在前面。</p>\n\n<p>返回可以使最终数组和为目标数 S 的所有添加符号的方法数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> nums: [1, 1, 1, 1, 1], S: 3\n<strong>输出:</strong> 5\n<strong>解释:</strong> \n\n-1+1+1+1+1 = 3\n+1-1+1+1+1 = 3\n+1+1-1+1+1 = 3\n+1+1+1-1+1 = 3\n+1+1+1+1-1 = 3\n\n一共有5种方法让最终目标和为3。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>数组非空，且长度不会超过20。</li>\n\t<li>初始的数组的和不会超过1000。</li>\n\t<li>保证返回的最终结果能被32位整数存下。</li>\n</ol>\n</div>","l":"中等","s":"/**\n * @param {number[]} nums\n * @param {number} S\n * @return {number}\n */\nvar findTargetSumWays = function(nums, S) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/target-sum/","bb":{"x":490,"y":50}}

