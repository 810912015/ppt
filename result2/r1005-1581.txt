{"ls":[{"s":"class Solution {\n    public int largestSumAfterKNegations(int[] A, \nint K) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def largestSumAfterKNegations(self, A, K):\n        \"\"\"\n        :type A: List[int]\n        :type K: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def largestSumAfterKNegations(self, A: List[int],\n K: int) -> int:","lang":"Python3"},{"s":"int largestSumAfterKNegations(int* A, int ASize, int \nK){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int LargestSumAfterKNegations(int[] A, \nint K) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} A\n * @param {number} K\n * @return {number}\n */\nvar largestSumAfterKNegations = function(A, K) {\n \n};","lang":"JavaScript"}],"page":"1005/1581","h":"1005. K 次取反后最大化的数组和","d":"<div class=\"notranslate\"><p>给定一个整数数组 A，我们<strong>只能</strong>用以下方法修改该数组：我们选择某个个索引 <code>i</code>&nbsp;并将 <code>A[i]</code> 替换为 <code>-A[i]</code>，然后总共重复这个过程 <code>K</code> 次。（我们可以多次选择同一个索引 <code>i</code>。）</p>\n\n<p>以这种方式修改数组后，返回数组可能的最大和。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>A = [4,2,3], K = 1\n<strong>输出：</strong>5\n<strong>解释：</strong>选择索引 (1,) ，然后 A 变为 [4,-2,3]。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>A = [3,-1,0,2], K = 3\n<strong>输出：</strong>6\n<strong>解释：</strong>选择索引 (1, 2, 2) ，然后 A 变为 [3,1,0,2]。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>A = [2,-3,-1,5,-4], K = 2\n<strong>输出：</strong>13\n<strong>解释：</strong>选择索引 (1, 4) ，然后 A 变为 [2,3,-1,5,4]。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= K &lt;= 10000</code></li>\n\t<li><code>-100 &lt;= A[i] &lt;= 100</code></li>\n</ol>\n</div>","l":"简单","s":"/**\n * @param {number[]} A\n * @param {number} K\n * @return {number}\n */\nvar largestSumAfterKNegations = function(A, K) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/maximize-sum-of-array-after-k-negations/","bb":{"x":490,"y":50}}

