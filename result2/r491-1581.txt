{"ls":[{"s":"class Solution {\n    public List<List<Integer>> findSubsequences(int[]\n nums) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def findSubsequences(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def findSubsequences(self, nums: List[int]) -> \nList[List[int]]:","lang":"Python3"},{"s":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as \n*returnColumnSizes array.\n * Note: Both returned array and *columnSizes array \nmust be malloced, assume caller calls free().\n */\nint** findSubsequences(int* nums, int numsSize, int* \nreturnSize, int** returnColumnSizes){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<IList<int>> FindSubsequences(int[] \nnums) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar findSubsequences = function(nums) {\n \n};","lang":"JavaScript"}],"page":"491/1581","h":"491. 递增子序列","d":"<div class=\"notranslate\"><p>给定一个整型数组, 你的任务是找到所有该数组的递增子序列，递增子序列的长度至少是2。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [4, 6, 7, 7]\n<strong>输出:</strong> [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>给定数组的长度不会超过15。</li>\n\t<li>数组中的整数范围是&nbsp;[-100,100]。</li>\n\t<li>给定数组中可能包含重复数字，相等的数字应该被视为递增的一种情况。</li>\n</ol>\n</div>","l":"中等","s":"/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar findSubsequences = function(nums) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/increasing-subsequences/","bb":{"x":490,"y":50}}

