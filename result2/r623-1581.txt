{"ls":[{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode addOneRow(TreeNode root, int v, \nint d) {\n \n    }\n}","lang":"Java"},{"s":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n \nclass Solution(object):\n    def addOneRow(self, root, v, d):\n        \"\"\"\n        :type root: TreeNode\n        :type v: int\n        :type d: int\n        :rtype: TreeNode\n        \"\"\"","lang":"Python"},{"s":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n \nclass Solution:\n    def addOneRow(self, root: TreeNode, v: int, d: \nint) -> TreeNode:","lang":"Python3"},{"s":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n \n \nstruct TreeNode* addOneRow(struct TreeNode* root, \nint v, int d){\n \n}","lang":"C"},{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public TreeNode AddOneRow(TreeNode root, int v, \nint d) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} v\n * @param {number} d\n * @return {TreeNode}\n */\nvar addOneRow = function(root, v, d) {\n \n};","lang":"JavaScript"}],"page":"623/1581","h":"623. 在二叉树中增加一行","d":"<div class=\"notranslate\"><p>给定一个二叉树，根节点为第1层，深度为 1。在其第&nbsp;<code>d</code>&nbsp;层追加一行值为&nbsp;<code>v</code>&nbsp;的节点。</p>\n\n<p>添加规则：给定一个深度值 <code>d</code> （正整数），针对深度为 <code>d-1</code> 层的每一<strong>非空</strong>节点 <code>N</code>，为 <code>N</code> 创建两个值为&nbsp;<code>v</code>&nbsp;的左子树和右子树。</p>\n\n<p>将&nbsp;<code>N</code> 原先的左子树，连接为新节点&nbsp;<code>v</code> 的左子树；将&nbsp;<code>N</code> 原先的右子树，连接为新节点&nbsp;<code>v</code> 的右子树。</p>\n\n<p>如果 <code>d</code> 的值为 1，深度 d - 1 不存在，则创建一个新的根节点 <code>v</code>，原先的整棵树将作为 <code>v</code> 的左子树。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> \n二叉树如下所示:\n       4\n     /   \\\n    2     6\n   / \\   / \n  3   1 5   \n\n<strong>v = 1</strong>\n\n<strong>d = 2</strong>\n\n<strong>输出:</strong> \n       4\n      / \\\n     1   1\n    /     \\\n   2       6\n  / \\     / \n 3   1   5   \n\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> \n二叉树如下所示:\n      4\n     /   \n    2    \n   / \\   \n  3   1    \n\n<strong>v = 1</strong>\n\n<strong>d = 3</strong>\n\n<strong>输出:</strong> \n      4\n     /   \n    2\n   / \\    \n  1   1\n /     \\  \n3       1\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>输入的深度值 d 的范围是：[1，二叉树最大深度 + 1]。</li>\n\t<li>输入的二叉树至少有一个节点。</li>\n</ol>\n</div>","l":"中等","s":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} v\n * @param {number} d\n * @return {TreeNode}\n */\nvar addOneRow = function(root, v, d) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/add-one-row-to-tree/","bb":{"x":490,"y":50}}

