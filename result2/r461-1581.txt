{"ls":[{"s":"class Solution {\n    public int hammingDistance(int x, int y) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def hammingDistance(self, x: int, y: int) -> int:","lang":"Python3"},{"s":"int hammingDistance(int x, int y){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int HammingDistance(int x, int y) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nvar hammingDistance = function(x, y) {\n \n};","lang":"JavaScript"}],"page":"461/1581","h":"461. 汉明距离","d":"<div class=\"notranslate\"><p>两个整数之间的<a href=\"https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB\">汉明距离</a>指的是这两个数字对应二进制位不同的位置的数目。</p>\n\n<p>给出两个整数 <code>x</code> 和 <code>y</code>，计算它们之间的汉明距离。</p>\n\n<p><strong>注意：</strong><br>\n0 ≤ <code>x</code>, <code>y</code> &lt; 2<sup>31</sup>.</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> x = 1, y = 4\n\n<strong>输出:</strong> 2\n\n<strong>解释:</strong>\n1   (0 0 0 1)\n4   (0 1 0 0)\n       ↑   ↑\n\n上面的箭头指出了对应二进制位不同的位置。\n</pre>\n</div>","l":"简单","s":"/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nvar hammingDistance = function(x, y) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/hamming-distance/","bb":{"x":490,"y":50}}

