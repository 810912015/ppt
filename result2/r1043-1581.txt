{"ls":[{"s":"class Solution {\n    public int maxSumAfterPartitioning(int[] A, int \nK) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def maxSumAfterPartitioning(self, A, K):\n        \"\"\"\n        :type A: List[int]\n        :type K: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def maxSumAfterPartitioning(self, A: List[int], \nK: int) -> int:","lang":"Python3"},{"s":"int maxSumAfterPartitioning(int* A, int ASize, int K)\n{\n \n}","lang":"C"},{"s":"public class Solution {\n    public int MaxSumAfterPartitioning(int[] A, int \nK) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} A\n * @param {number} K\n * @return {number}\n */\nvar maxSumAfterPartitioning = function(A, K) {\n \n};","lang":"JavaScript"}],"page":"1043/1581","h":"1043. 分隔数组以得到最大和","d":"<div class=\"notranslate\"><p>给出整数数组&nbsp;<code>A</code>，将该数组分隔为长度最多为 K 的几个（连续）子数组。分隔完成后，每个子数组的中的值都会变为该子数组中的最大值。</p>\n\n<p>返回给定数组完成分隔后的最大和。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>A = [1,15,7,9,2,5,10], K = 3\n<strong>输出：</strong>84\n<strong>解释：</strong>A 变为 [15,15,15,9,10,10,10]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= K &lt;= A.length&nbsp;&lt;= 500</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10^6</code></li>\n</ol>\n</div>","l":"中等","s":"/**\n * @param {number[]} A\n * @param {number} K\n * @return {number}\n */\nvar maxSumAfterPartitioning = function(A, K) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/partition-array-for-maximum-sum/","bb":{"x":490,"y":50}}

