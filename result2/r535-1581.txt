{"ls":[{"s":"public class Codec {\n \n    // Encodes a URL to a shortened URL.\n    public String encode(String longUrl) {\n        \n    }\n \n    // Decodes a shortened URL to its original URL.\n    public String decode(String shortUrl) {\n        \n    }\n}\n \n// Your Codec object will be instantiated and called \nas such:\n// Codec codec = new Codec();\n// codec.decode(codec.encode(url));","lang":"Java"},{"s":"class Codec:\n \n    def encode(self, longUrl):\n        \"\"\"Encodes a URL to a shortened URL.\n        \n        :type longUrl: str\n        :rtype: str\n        \"\"\"\n        \n \n    def decode(self, shortUrl):\n        \"\"\"Decodes a shortened URL to its original \nURL.\n        \n        :type shortUrl: str\n        :rtype: str\n        \"\"\"\n        \n \n# Your Codec object will be instantiated and called \nas such:\n# codec = Codec()\n# codec.decode(codec.encode(url))","lang":"Python"},{"s":"class Codec:\n \n    def encode(self, longUrl: str) -> str:\n        \"\"\"Encodes a URL to a shortened URL.\n        \"\"\"\n        \n \n    def decode(self, shortUrl: str) -> str:\n        \"\"\"Decodes a shortened URL to its original \nURL.\n        \"\"\"\n        \n \n# Your Codec object will be instantiated and called \nas such:\n# codec = Codec()\n# codec.decode(codec.encode(url))","lang":"Python3"},{"s":"/** Encodes a URL to a shortened URL. */\nchar* encode(char* longUrl) {\n    \n}\n \n/** Decodes a shortened URL to its original URL. */\nchar* decode(char* shortUrl) {\n    \n}\n \n// Your functions will be called as such:\n// char* s = encode(s);\n// decode(s);","lang":"C"},{"s":"public class Codec {\n \n    // Encodes a URL to a shortened URL\n    public string encode(string longUrl) {\n        \n    }\n \n    // Decodes a shortened URL to its original URL.\n    public string decode(string shortUrl) {\n        \n    }\n}\n \n// Your Codec object will be instantiated and called \nas such:\n// Codec codec = new Codec();\n// codec.decode(codec.encode(url));","lang":"C#"},{"s":"/**\n * Encodes a URL to a shortened URL.\n *\n * @param {string} longUrl\n * @return {string}\n */\nvar encode = function(longUrl) {\n    \n};\n \n/**\n * Decodes a shortened URL to its original URL.\n *\n * @param {string} shortUrl\n * @return {string}\n */\nvar decode = function(shortUrl) {\n    \n};\n \n/**\n * Your functions will be called as such:\n * decode(encode(url));\n */","lang":"JavaScript"}],"page":"535/1581","h":"535. TinyURL 的加密与解密","d":"<div class=\"notranslate\"><p>TinyURL是一种URL简化服务， 比如：当你输入一个URL&nbsp;<code>https://leetcode.com/problems/design-tinyurl</code>&nbsp;时，它将返回一个简化的URL&nbsp;<code>http://tinyurl.com/4e9iAk</code>.</p>\n\n<p>要求：设计一个 TinyURL 的加密&nbsp;<code>encode</code>&nbsp;和解密&nbsp;<code>decode</code>&nbsp;的方法。你的加密和解密算法如何设计和运作是没有限制的，你只需要保证一个URL可以被加密成一个TinyURL，并且这个TinyURL可以用解密方法恢复成原本的URL。</p>\n</div>","l":"中等","s":"/**\n * Encodes a URL to a shortened URL.\n *\n * @param {string} longUrl\n * @return {string}\n */\nvar encode = function(longUrl) {\n    \n};\n \n/**\n * Decodes a shortened URL to its original URL.\n *\n * @param {string} shortUrl\n * @return {string}\n */\nvar decode = function(shortUrl) {\n    \n};\n \n/**\n * Your functions will be called as such:\n * decode(encode(url));\n */","lang":"JavaScript","href":"https://leetcode-cn.com/problems/encode-and-decode-tinyurl/","bb":{"x":490,"y":50}}

