{"ls":[{"s":"class AllOne {\n \n    /** Initialize your data structure here. */\n    public AllOne() {\n \n    }\n    \n    /** Inserts a new key <Key> with value 1. Or \nincrements an existing key by 1. */\n    public void inc(String key) {\n \n    }\n    \n    /** Decrements an existing key by 1. If Key's \nvalue is 1, remove it from the data structure. */\n    public void dec(String key) {\n \n    }\n    \n    /** Returns one of the keys with maximal value. \n*/\n    public String getMaxKey() {\n \n    }\n    \n    /** Returns one of the keys with Minimal value. ","lang":"Java"},{"s":"class AllOne(object):\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n \n    def inc(self, key):\n        \"\"\"\n        Inserts a new key <Key> with value 1. Or \nincrements an existing key by 1.\n        :type key: str\n        :rtype: None\n        \"\"\"\n        \n \n    def dec(self, key):\n        \"\"\"\n        Decrements an existing key by 1. If Key's \nvalue is 1, remove it from the data structure.\n        :type key: str\n        :rtype: None\n        \"\"\"\n        \n ","lang":"Python"},{"s":"class AllOne:\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n \n    def inc(self, key: str) -> None:\n        \"\"\"\n        Inserts a new key <Key> with value 1. Or \nincrements an existing key by 1.\n        \"\"\"\n        \n \n    def dec(self, key: str) -> None:\n        \"\"\"\n        Decrements an existing key by 1. If Key's \nvalue is 1, remove it from the data structure.\n        \"\"\"\n        \n \n    def getMaxKey(self) -> str:\n        \"\"\"\n        Returns one of the keys with maximal value.\n        \"\"\"","lang":"Python3"},{"s":"typedef struct {\n    \n} AllOne;\n \n/** Initialize your data structure here. */\n \nAllOne* allOneCreate() {\n    \n}\n \n/** Inserts a new key <Key> with value 1. Or \nincrements an existing key by 1. */\nvoid allOneInc(AllOne* obj, char * key) {\n  \n}\n \n/** Decrements an existing key by 1. If Key's value \nis 1, remove it from the data structure. */\nvoid allOneDec(AllOne* obj, char * key) {\n  \n}\n \n/** Returns one of the keys with maximal value. */\nchar * allOneGetMaxKey(AllOne* obj) {\n  \n}","lang":"C"},{"s":"public class AllOne {\n \n    /** Initialize your data structure here. */\n    public AllOne() {\n \n    }\n    \n    /** Inserts a new key <Key> with value 1. Or \nincrements an existing key by 1. */\n    public void Inc(string key) {\n \n    }\n    \n    /** Decrements an existing key by 1. If Key's \nvalue is 1, remove it from the data structure. */\n    public void Dec(string key) {\n \n    }\n    \n    /** Returns one of the keys with maximal value. \n*/\n    public string GetMaxKey() {\n \n    }\n    \n    /** Returns one of the keys with Minimal value. ","lang":"C#"},{"s":"/**\n * Initialize your data structure here.\n */\nvar AllOne = function() {\n \n};\n \n/**\n * Inserts a new key <Key> with value 1. Or \nincrements an existing key by 1. \n * @param {string} key\n * @return {void}\n */\nAllOne.prototype.inc = function(key) {\n \n};\n \n/**\n * Decrements an existing key by 1. If Key's value \nis 1, remove it from the data structure. \n * @param {string} key\n * @return {void}\n */\nAllOne.prototype.dec = function(key) {\n \n};","lang":"JavaScript"}],"page":"432/1581","h":"432. 全 O(1) 的数据结构","d":"<div class=\"notranslate\"><p>实现一个数据结构支持以下操作：</p>\n\n<ol>\n\t<li>Inc(key) - 插入一个新的值为 1 的 key。或者使一个存在的 key 增加一，保证 key 不为空字符串。</li>\n\t<li>Dec(key) - 如果这个 key 的值是 1，那么把他从数据结构中移除掉。否者使一个存在的 key 值减一。如果这个 key 不存在，这个函数不做任何事情。key 保证不为空字符串。</li>\n\t<li>GetMaxKey() - 返回 key 中值最大的任意一个。如果没有元素存在，返回一个空字符串<code>\"\"</code>。</li>\n\t<li>GetMinKey() - 返回 key 中值最小的任意一个。如果没有元素存在，返回一个空字符串<code>\"\"</code>。</li>\n</ol>\n\n<p>挑战：以 O(1) 的时间复杂度实现所有操作。</p>\n</div>","l":"困难","s":"/**\n * Initialize your data structure here.\n */\nvar AllOne = function() {\n \n};\n \n/**\n * Inserts a new key <Key> with value 1. Or \nincrements an existing key by 1. \n * @param {string} key\n * @return {void}\n */\nAllOne.prototype.inc = function(key) {\n \n};\n \n/**\n * Decrements an existing key by 1. If Key's value \nis 1, remove it from the data structure. \n * @param {string} key\n * @return {void}\n */\nAllOne.prototype.dec = function(key) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/all-oone-data-structure/","bb":{"x":490,"y":50}}

