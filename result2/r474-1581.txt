{"ls":[{"s":"class Solution {\n    public int findMaxForm(String[] strs, int m, int \nn) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def findMaxForm(self, strs, m, n):\n        \"\"\"\n        :type strs: List[str]\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def findMaxForm(self, strs: List[str], m: int, \nn: int) -> int:","lang":"Python3"},{"s":"int findMaxForm(char ** strs, int strsSize, int m, \nint n){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int FindMaxForm(string[] strs, int m, int \nn) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string[]} strs\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar findMaxForm = function(strs, m, n) {\n \n};","lang":"JavaScript"}],"page":"474/1581","h":"474. 一和零","d":"<div class=\"notranslate\"><p>在计算机界中，我们总是追求用有限的资源获取最大的收益。</p>\n\n<p>现在，假设你分别支配着 <strong>m</strong> 个&nbsp;<code>0</code>&nbsp;和 <strong>n</strong> 个&nbsp;<code>1</code>。另外，还有一个仅包含&nbsp;<code>0</code>&nbsp;和&nbsp;<code>1</code>&nbsp;字符串的数组。</p>\n\n<p>你的任务是使用给定的&nbsp;<strong>m</strong> 个&nbsp;<code>0</code>&nbsp;和 <strong>n</strong> 个&nbsp;<code>1</code>&nbsp;，找到能拼出存在于数组中的字符串的最大数量。每个&nbsp;<code>0</code>&nbsp;和&nbsp;<code>1</code>&nbsp;至多被使用<strong>一次</strong>。</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>给定&nbsp;<code>0</code>&nbsp;和&nbsp;<code>1</code>&nbsp;的数量都不会超过&nbsp;<code>100</code>。</li>\n\t<li>给定字符串数组的长度不会超过&nbsp;<code>600</code>。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> Array = {\"10\", \"0001\", \"111001\", \"1\", \"0\"}, m = 5, n = 3\n<strong>输出:</strong> 4\n\n<strong>解释:</strong> 总共 4 个字符串可以通过 5 个 0 和 3 个 1 拼出，即 \"10\",\"0001\",\"1\",\"0\" 。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> Array = {\"10\", \"0\", \"1\"}, m = 1, n = 1\n<strong>输出:</strong> 2\n\n<strong>解释:</strong> 你可以拼出 \"10\"，但之后就没有剩余数字了。更好的选择是拼出 \"0\" 和 \"1\" 。\n</pre>\n</div>","l":"中等","s":"/**\n * @param {string[]} strs\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar findMaxForm = function(strs, m, n) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/ones-and-zeroes/","bb":{"x":490,"y":50}}

