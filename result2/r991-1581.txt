{"ls":[{"s":"class Solution {\n    public int brokenCalc(int X, int Y) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def brokenCalc(self, X, Y):\n        \"\"\"\n        :type X: int\n        :type Y: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def brokenCalc(self, X: int, Y: int) -> int:","lang":"Python3"},{"s":"int brokenCalc(int X, int Y){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int BrokenCalc(int X, int Y) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} X\n * @param {number} Y\n * @return {number}\n */\nvar brokenCalc = function(X, Y) {\n \n};","lang":"JavaScript"}],"page":"991/1581","h":"991. 坏了的计算器","d":"<div class=\"notranslate\"><p>在显示着数字的坏计算器上，我们可以执行以下两种操作：</p>\n\n<ul>\n\t<li><strong>双倍（Double）：</strong>将显示屏上的数字乘 2；</li>\n\t<li><strong>递减（Decrement）：</strong>将显示屏上的数字减 1 。</li>\n</ul>\n\n<p>最初，计算器显示数字&nbsp;<code>X</code>。</p>\n\n<p>返回显示数字&nbsp;<code>Y</code>&nbsp;所需的最小操作数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>X = 2, Y = 3\n<strong>输出：</strong>2\n<strong>解释：</strong>先进行双倍运算，然后再进行递减运算 {2 -&gt; 4 -&gt; 3}.\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>X = 5, Y = 8\n<strong>输出：</strong>2\n<strong>解释：</strong>先递减，再双倍 {5 -&gt; 4 -&gt; 8}.\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>X = 3, Y = 10\n<strong>输出：</strong>3\n<strong>解释：</strong>先双倍，然后递减，再双倍 {3 -&gt; 6 -&gt; 5 -&gt; 10}.\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>X = 1024, Y = 1\n<strong>输出：</strong>1023\n<strong>解释：</strong>执行递减运算 1023 次\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= X &lt;= 10^9</code></li>\n\t<li><code>1 &lt;= Y &lt;= 10^9</code></li>\n</ol>\n</div>","l":"中等","s":"/**\n * @param {number} X\n * @param {number} Y\n * @return {number}\n */\nvar brokenCalc = function(X, Y) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/broken-calculator/","bb":{"x":490,"y":50}}

