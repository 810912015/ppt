{"ls":[{"s":"class Solution {\n    public boolean parseBoolExpr(String expression) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def parseBoolExpr(self, expression):\n        \"\"\"\n        :type expression: str\n        :rtype: bool\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def parseBoolExpr(self, expression: str) -> bool:","lang":"Python3"},{"s":"bool parseBoolExpr(char * expression){\n \n}","lang":"C"},{"s":"public class Solution {\n    public bool ParseBoolExpr(string expression) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} expression\n * @return {boolean}\n */\nvar parseBoolExpr = function(expression) {\n \n};","lang":"JavaScript"}],"page":"1106/1581","h":"1106. 解析布尔表达式","d":"<div class=\"notranslate\"><p>给你一个以字符串形式表述的&nbsp;<a href=\"https://baike.baidu.com/item/%E5%B8%83%E5%B0%94%E8%A1%A8%E8%BE%BE%E5%BC%8F/1574380?fr=aladdin\">布尔表达式</a>（boolean） <code>expression</code>，返回该式的运算结果。</p>\n\n<p>有效的表达式需遵循以下约定：</p>\n\n<ul>\n\t<li><code>\"t\"</code>，运算结果为 <code>True</code></li>\n\t<li><code>\"f\"</code>，运算结果为 <code>False</code></li>\n\t<li><code>\"!(expr)\"</code>，运算过程为对内部表达式 <code>expr</code> 进行逻辑 <strong>非的运算</strong>（NOT）</li>\n\t<li><code>\"&amp;(expr1,expr2,...)\"</code>，运算过程为对 2 个或以上内部表达式 <code>expr1, expr2, ...</code> 进行逻辑 <strong>与的运算</strong>（AND）</li>\n\t<li><code>\"|(expr1,expr2,...)\"</code>，运算过程为对 2 个或以上内部表达式 <code>expr1, expr2, ...</code> 进行逻辑 <strong>或的运算</strong>（OR）</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>expression = \"!(f)\"\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>expression = \"|(f,t)\"\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>expression = \"&amp;(t,f)\"\n<strong>输出：</strong>false\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>expression = \"|(&amp;(t,f,t),!(t))\"\n<strong>输出：</strong>false\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= expression.length &lt;= 20000</code></li>\n\t<li><code>expression[i]</code> 由 <code>{'(', ')', '&amp;', '|', '!', 't', 'f', ','}</code> 中的字符组成。</li>\n\t<li><code>expression</code> 是以上述形式给出的有效表达式，表示一个布尔值。</li>\n</ul>\n</div>","l":"困难","s":"/**\n * @param {string} expression\n * @return {boolean}\n */\nvar parseBoolExpr = function(expression) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/parsing-a-boolean-expression/","bb":{"x":490,"y":50}}

