{"ls":[{"s":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> children;\n \n    public Node() {}\n \n    public Node(int _val) {\n        val = _val;\n    }\n \n    public Node(int _val, List<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\nclass Solution {\n    public List<Integer> preorder(Node root) {\n        \n    }\n}","lang":"Java"},{"s":"\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\nclass Solution(object):\n    def preorder(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: List[int]\n        \"\"\"","lang":"Python"},{"s":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\nclass Solution:\n    def preorder(self, root: 'Node') -> List[int]:","lang":"Python3"},{"s":"/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public IList<Node> children;\n \n    public Node() {}\n \n    public Node(int _val) {\n        val = _val;\n    }\n \n    public Node(int _val,IList<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n}\n*/\npublic class Solution {\n    public IList<int> Preorder(Node root) {\n        \n    }\n}","lang":"C#"},{"s":"/**\n * // Definition for a Node.\n * function Node(val, children) {\n *    this.val = val;\n *    this.children = children;\n * };\n */\n/**\n * @param {Node} root\n * @return {number[]}\n */\nvar preorder = function(root) {\n    \n};","lang":"JavaScript"},{"s":"/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Children []*Node\n * }\n */\n \nfunc preorder(root *Node) []int {\n    \n}","lang":"Go"}],"page":"589/1581","h":"589. N叉树的前序遍历","d":"<div class=\"notranslate\"><p>给定一个 N 叉树，返回其节点值的<em>前序遍历</em>。</p>\n\n<p>例如，给定一个&nbsp;<code>3叉树</code>&nbsp;:</p>\n\n<p>&nbsp;</p>\n\n<p><img style=\"width: 100%; max-width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/narytreeexample.png\"></p>\n\n<p>&nbsp;</p>\n\n<p>返回其前序遍历: <code>[1,3,5,6,2,4]</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>说明:&nbsp;</strong>递归法很简单，你可以使用迭代法完成此题吗?</p></div>","l":"简单","s":"/**\n * // Definition for a Node.\n * function Node(val, children) {\n *    this.val = val;\n *    this.children = children;\n * };\n */\n/**\n * @param {Node} root\n * @return {number[]}\n */\nvar preorder = function(root) {\n    \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/","bb":{"x":490,"y":50}}

