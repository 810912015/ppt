{"ls":[{"s":"class Solution {\n    public int flipLights(int n, int m) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def flipLights(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def flipLights(self, n: int, m: int) -> int:","lang":"Python3"},{"s":"int flipLights(int n, int m){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int FlipLights(int n, int m) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} n\n * @param {number} m\n * @return {number}\n */\nvar flipLights = function(n, m) {\n \n};","lang":"JavaScript"}],"page":"672/1581","h":"672. 灯泡开关 Ⅱ","d":"<div class=\"notranslate\"><p>现有一个房间，墙上挂有&nbsp;<code>n</code>&nbsp;只已经打开的灯泡和 4 个按钮。在进行了&nbsp;<code>m</code>&nbsp;次未知操作后，你需要返回这&nbsp;<code>n</code>&nbsp;只灯泡可能有多少种不同的状态。</p>\n\n<p>假设这 <code>n</code> 只灯泡被编号为 [1, 2, 3 ..., n]，这 4 个按钮的功能如下：</p>\n\n<ol>\n\t<li>将所有灯泡的状态反转（即开变为关，关变为开）</li>\n\t<li>将编号为偶数的灯泡的状态反转</li>\n\t<li>将编号为奇数的灯泡的状态反转</li>\n\t<li>将编号为 <code>3k+1</code> 的灯泡的状态反转（k = 0, 1, 2, ...)</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> n = 1, m = 1.\n<strong>输出:</strong> 2\n<strong>说明:</strong> 状态为: [开], [关]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> n = 2, m = 1.\n<strong>输出:</strong> 3\n<strong>说明:</strong> 状态为: [开, 关], [关, 开], [关, 关]\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> n = 3, m = 1.\n<strong>输出:</strong> 4\n<strong>说明:</strong> 状态为: [关, 开, 关], [开, 关, 开], [关, 关, 关], [关, 开, 开].\n</pre>\n\n<p><strong>注意：</strong>&nbsp;<code>n</code>&nbsp;和&nbsp;<code>m</code> 都属于 [0, 1000].</p>\n</div>","l":"中等","s":"/**\n * @param {number} n\n * @param {number} m\n * @return {number}\n */\nvar flipLights = function(n, m) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/bulb-switcher-ii/","bb":{"x":490,"y":50}}

