{"ls":[{"s":"class H2O {\n \n    public H2O() {\n        \n    }\n \n    public void hydrogen(Runnable releaseHydrogen) \nthrows InterruptedException {\n        \n        // releaseHydrogen.run() outputs \"H\". Do not \nchange or remove this line.\n        releaseHydrogen.run();\n    }\n \n    public void oxygen(Runnable releaseOxygen) \nthrows InterruptedException {\n        \n        // releaseOxygen.run() outputs \"O\". Do not \nchange or remove this line.\n        releaseOxygen.run();\n    }\n}","lang":"Java"},{"s":"class H2O(object):\n    def __init__(self):\n        pass\n \n \n    def hydrogen(self, releaseHydrogen):\n        \"\"\"\n        :type releaseHydrogen: method\n        :rtype: void\n        \"\"\"\n        \n        # releaseHydrogen() outputs \"H\". Do not \nchange or remove this line.\n        releaseHydrogen()\n \n \n    def oxygen(self, releaseOxygen):\n        \"\"\"\n        :type releaseOxygen: method\n        :rtype: void\n        \"\"\"\n        \n        # releaseOxygen() outputs \"O\". Do not change \nor remove this line.\n        releaseOxygen()","lang":"Python"},{"s":"class H2O:\n    def __init__(self):\n        pass\n \n \n    def hydrogen(self, releaseHydrogen: 'Callable[[],\n None]') -> None:\n        \n        # releaseHydrogen() outputs \"H\". Do not \nchange or remove this line.\n        releaseHydrogen()\n \n \n    def oxygen(self, releaseOxygen: 'Callable[[], \nNone]') -> None:\n        \n        # releaseOxygen() outputs \"O\". Do not change \nor remove this line.\n        releaseOxygen()","lang":"Python3"},{"s":"typedef struct {\n    // User defined data may be declared here.\n    \n} H2O;\n \nH2O* h2oCreate() {\n    H2O* obj = (H2O*) malloc(sizeof(H2O));\n    \n    // Initialize user defined data here.\n    \n    return obj;\n}\n \nvoid hydrogen(H2O* obj) {\n    \n    // releaseHydrogen() outputs \"H\". Do not change \nor remove this line.\n    releaseHydrogen();\n}\n \nvoid oxygen(H2O* obj) {\n    \n    // releaseOxygen() outputs \"O\". Do not change or \nremove this line.\n    releaseOxygen();\n}","lang":"C"},{"s":"public class H2O {\n \n    public H2O() {\n        \n    }\n \n    public void Hydrogen(Action releaseHydrogen) {\n        \n        // releaseHydrogen() outputs \"H\". Do not \nchange or remove this line.\n        releaseHydrogen();\n    }\n \n    public void Oxygen(Action releaseOxygen) {\n        \n        // releaseOxygen() outputs \"O\". Do not \nchange or remove this line.\n        releaseOxygen();\n    }\n}","lang":"C#"},{"s":"public class H2O {\n \n    public H2O() {\n        \n    }\n \n    public void Hydrogen(Action releaseHydrogen) {\n        \n        // releaseHydrogen() outputs \"H\". Do not \nchange or remove this line.\n        releaseHydrogen();\n    }\n \n    public void Oxygen(Action releaseOxygen) {\n        \n        // releaseOxygen() outputs \"O\". Do not \nchange or remove this line.\n        releaseOxygen();\n    }\n}","lang":"C#"}],"page":"1117/1581","h":"1117. H2O 生成","d":"<div class=\"notranslate\"><p>现在有两种线程，氢 <code>oxygen</code> 和氧 <code>hydrogen</code>，你的目标是组织这两种线程来产生水分子。</p>\n\n<p>存在一个屏障（barrier）使得每个线程必须等候直到一个完整水分子能够被产生出来。</p>\n\n<p>氢和氧线程会被分别给予 <code>releaseHydrogen</code> 和 <code>releaseOxygen</code> 方法来允许它们突破屏障。</p>\n\n<p>这些线程应该三三成组突破屏障并能立即组合产生一个水分子。</p>\n\n<p>你必须保证产生一个水分子所需线程的结合必须发生在下一个水分子产生之前。</p>\n\n<p>换句话说:</p>\n\n<ul>\n\t<li>如果一个氧线程到达屏障时没有氢线程到达，它必须等候直到两个氢线程到达。</li>\n\t<li>如果一个氢线程到达屏障时没有其它线程到达，它必须等候直到一个氧线程和另一个氢线程到达。</li>\n</ul>\n\n<p>书写满足这些限制条件的氢、氧线程同步代码。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>\"HOH\"\n<strong>输出: </strong>\"HHO\"\n<strong>解释:</strong> \"HOH\" 和 \"OHH\" 依然都是有效解。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>\"OOHHHH\"\n<strong>输出: </strong>\"HHOHHO\"\n<strong>解释:</strong> \"HOHHHO\", \"OHHHHO\", \"HHOHOH\", \"HOHHOH\", \"OHHHOH\", \"HHOOHH\", \"HOHOHH\" 和 \"OHHOHH\" 依然都是有效解。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>限制条件:</strong></p>\n\n<ul>\n\t<li>输入字符串的总长将会是 3<em>n</em>, 1 ≤&nbsp;<em>n</em>&nbsp;≤ 50；</li>\n\t<li>输入字符串中的 “H” 总数将会是 2n；</li>\n\t<li>输入字符串中的 “O” 总数将会是 n。</li>\n</ul>\n</div>","l":"中等","s":"public class H2O {\n \n    public H2O() {\n        \n    }\n \n    public void Hydrogen(Action releaseHydrogen) {\n        \n        // releaseHydrogen() outputs \"H\". Do not \nchange or remove this line.\n        releaseHydrogen();\n    }\n \n    public void Oxygen(Action releaseOxygen) {\n        \n        // releaseOxygen() outputs \"O\". Do not \nchange or remove this line.\n        releaseOxygen();\n    }\n}","lang":"C#","href":"https://leetcode-cn.com/problems/building-h2o/","bb":{"x":490,"y":50}}

