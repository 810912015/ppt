{"ls":[{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int findTilt(TreeNode root) {\n \n    }\n}","lang":"Java"},{"s":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n \nclass Solution(object):\n    def findTilt(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n \nclass Solution:\n    def findTilt(self, root: TreeNode) -> int:","lang":"Python3"},{"s":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n \n \nint findTilt(struct TreeNode* root){\n \n}","lang":"C"},{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int FindTilt(TreeNode root) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findTilt = function(root) {\n \n};","lang":"JavaScript"}],"page":"563/1581","h":"563. 二叉树的坡度","d":"<div class=\"notranslate\"><p>给定一个二叉树，计算<strong>整个树</strong>的坡度。</p>\n\n<p>一个树的<strong>节点的坡度</strong>定义即为，该节点左子树的结点之和和右子树结点之和的<strong>差的绝对值</strong>。空结点的的坡度是0。</p>\n\n<p><strong>整个树</strong>的坡度就是其所有节点的坡度之和。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> \n         1\n       /   \\\n      2     3\n<strong>输出:</strong> 1\n<strong>解释:</strong> \n结点的坡度 2 : 0\n结点的坡度 3 : 0\n结点的坡度 1 : |2-3| = 1\n树的坡度 : 0 + 0 + 1 = 1\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>任何子树的结点的和不会超过32位整数的范围。</li>\n\t<li>坡度的值不会超过32位整数的范围。</li>\n</ol>\n</div>","l":"简单","s":"# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n \n# @param {TreeNode} root\n# @return {Integer}\ndef find_tilt(root)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/binary-tree-tilt/","bb":{"x":490,"y":50}}

