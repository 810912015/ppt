{"ls":[{"s":"class Solution {\n    public int numEnclaves(int[][] A) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def numEnclaves(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def numEnclaves(self, A: List[List[int]]) -> int:","lang":"Python3"},{"s":"int numEnclaves(int** A, int ASize, int* AColSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int NumEnclaves(int[][] A) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} A\n * @return {number}\n */\nvar numEnclaves = function(A) {\n \n};","lang":"JavaScript"}],"page":"1020/1581","h":"1020. 飞地的数量","d":"<div class=\"notranslate\"><p>给出一个二维数组&nbsp;<code>A</code>，每个单元格为 0（代表海）或 1（代表陆地）。</p>\n\n<p>移动是指在陆地上从一个地方走到另一个地方（朝四个方向之一）或离开网格的边界。</p>\n\n<p>返回网格中<strong>无法</strong>在任意次数的移动中离开网格边界的陆地单元格的数量。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]\n<strong>输出：</strong>3\n<strong>解释： </strong>\n有三个 1 被 0 包围。一个 1 没有被包围，因为它在边界上。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]\n<strong>输出：</strong>0\n<strong>解释：</strong>\n所有 1 都在边界上或可以到达边界。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 500</code></li>\n\t<li><code>1 &lt;= A[i].length &lt;= 500</code></li>\n\t<li><code>0 &lt;= A[i][j] &lt;= 1</code></li>\n\t<li>所有行的大小都相同</li>\n</ol>\n</div>","l":"中等","s":"/**\n * @param {number[][]} A\n * @return {number}\n */\nvar numEnclaves = function(A) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/number-of-enclaves/","bb":{"x":490,"y":50}}

