{"ls":[{"s":"class Solution {\n    public int[] findDiagonalOrder(int[][] matrix) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def findDiagonalOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def findDiagonalOrder(self, matrix: List[List\n[int]]) -> List[int]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, assume \ncaller calls free().\n */\nint* findDiagonalOrder(int** matrix, int matrixSize, \nint* matrixColSize, int* returnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int[] FindDiagonalOrder(int[][] matrix) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} matrix\n * @return {number[]}\n */\nvar findDiagonalOrder = function(matrix) {\n \n};","lang":"JavaScript"}],"page":"498/1581","h":"498. 对角线遍历","d":"<div class=\"notranslate\"><p>给定一个含有 M x N 个元素的矩阵（M 行，N 列），请以对角线遍历的顺序返回这个矩阵中的所有元素，对角线遍历如下图所示。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\n\n<strong>输出:</strong>  [1,2,4,7,5,3,6,8,9]\n\n<strong>解释:</strong>\n<img style=\"width: 220px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/diagonal_traverse.png\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>给定矩阵中的元素总数不会超过 100000 。</li>\n</ol>\n</div>","l":"中等","s":"/**\n * @param {number[][]} matrix\n * @return {number[]}\n */\nvar findDiagonalOrder = function(matrix) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/diagonal-traverse/","bb":{"x":490,"y":50}}

