{"ls":[{"s":"class Solution {\n    public List<Boolean> camelMatch(String[] queries,\n String pattern) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def camelMatch(self, queries, pattern):\n        \"\"\"\n        :type queries: List[str]\n        :type pattern: str\n        :rtype: List[bool]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def camelMatch(self, queries: List[str], \npattern: str) -> List[bool]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, assume \ncaller calls free().\n */\nbool* camelMatch(char ** queries, int queriesSize, \nchar * pattern, int* returnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<bool> CamelMatch(string[] queries, \nstring pattern) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string[]} queries\n * @param {string} pattern\n * @return {boolean[]}\n */\nvar camelMatch = function(queries, pattern) {\n \n};","lang":"JavaScript"}],"page":"1023/1581","h":"1023. 驼峰式匹配","d":"<div class=\"notranslate\"><p>如果我们可以将<strong>小写字母</strong>插入模式串&nbsp;<code>pattern</code>&nbsp;得到待查询项&nbsp;<code>query</code>，那么待查询项与给定模式串匹配。（我们可以在任何位置插入每个字符，也可以插入 0 个字符。）</p>\n\n<p>给定待查询列表&nbsp;<code>queries</code>，和模式串&nbsp;<code>pattern</code>，返回由布尔值组成的答案列表&nbsp;<code>answer</code>。只有在待查项&nbsp;<code>queries[i]</code> 与模式串&nbsp;<code>pattern</code> 匹配时，&nbsp;<code>answer[i]</code>&nbsp;才为 <code>true</code>，否则为 <code>false</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FB\"\n<strong>输出：</strong>[true,false,true,true,false]\n<strong>示例：</strong>\n\"FooBar\" 可以这样生成：\"F\" + \"oo\" + \"B\" + \"ar\"。\n\"FootBall\" 可以这样生成：\"F\" + \"oot\" + \"B\" + \"all\".\n\"FrameBuffer\" 可以这样生成：\"F\" + \"rame\" + \"B\" + \"uffer\".</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBa\"\n<strong>输出：</strong>[true,false,true,false,false]\n<strong>解释：</strong>\n\"FooBar\" 可以这样生成：\"Fo\" + \"o\" + \"Ba\" + \"r\".\n\"FootBall\" 可以这样生成：\"Fo\" + \"ot\" + \"Ba\" + \"ll\".\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输出：</strong>queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBaT\"\n<strong>输入：</strong>[false,true,false,false,false]\n<strong>解释： </strong>\n\"FooBarTest\" 可以这样生成：\"Fo\" + \"o\" + \"Ba\" + \"r\" + \"T\" + \"est\".\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= queries.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= queries[i].length &lt;= 100</code></li>\n\t<li><code>1 &lt;= pattern.length &lt;= 100</code></li>\n\t<li>所有字符串都仅由大写和小写英文字母组成。</li>\n</ol>\n</div>","l":"中等","s":"/**\n * @param {string[]} queries\n * @param {string} pattern\n * @return {boolean[]}\n */\nvar camelMatch = function(queries, pattern) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/camelcase-matching/","bb":{"x":490,"y":50}}

