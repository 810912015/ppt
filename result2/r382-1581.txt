{"ls":[{"s":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n \n    /** @param head The linked list's head.\n        Note that the head is guaranteed to be not \nnull, so it contains at least one node. */\n    public Solution(ListNode head) {\n \n    }\n    \n    /** Returns a random node's value. */\n    public int getRandom() {\n \n    }\n}\n \n/**\n * Your Solution object will be instantiated and \ncalled as such:","lang":"Java"},{"s":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n \nclass Solution(object):\n \n    def __init__(self, head):\n        \"\"\"\n        @param head The linked list's head.\n        Note that the head is guaranteed to be not \nnull, so it contains at least one node.\n        :type head: ListNode\n        \"\"\"\n        \n \n    def getRandom(self):\n        \"\"\"\n        Returns a random node's value.\n        :rtype: int\n        \"\"\"\n        \n \n \n# Your Solution object will be instantiated and ","lang":"Python"},{"s":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n \nclass Solution:\n \n    def __init__(self, head: ListNode):\n        \"\"\"\n        @param head The linked list's head.\n        Note that the head is guaranteed to be not \nnull, so it contains at least one node.\n        \"\"\"\n        \n \n    def getRandom(self) -> int:\n        \"\"\"\n        Returns a random node's value.\n        \"\"\"\n        \n \n \n# Your Solution object will be instantiated and \ncalled as such:\n# obj = Solution(head)","lang":"Python3"},{"s":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n \n \n \ntypedef struct {\n    \n} Solution;\n \n/** @param head The linked list's head.\n        Note that the head is guaranteed to be not \nnull, so it contains at least one node. */\n \nSolution* solutionCreate(struct ListNode* head) {\n    \n}\n \n/** Returns a random node's value. */\nint solutionGetRandom(Solution* obj) {\n  \n}","lang":"C"},{"s":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n \n    /** @param head The linked list's head.\n        Note that the head is guaranteed to be not \nnull, so it contains at least one node. */\n    public Solution(ListNode head) {\n \n    }\n    \n    /** Returns a random node's value. */\n    public int GetRandom() {\n \n    }\n}\n \n/**\n * Your Solution object will be instantiated and \ncalled as such:","lang":"C#"},{"s":"/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param head The linked list's head.\n        Note that the head is guaranteed to be not \nnull, so it contains at least one node.\n * @param {ListNode} head\n */\nvar Solution = function(head) {\n \n};\n \n/**\n * Returns a random node's value.\n * @return {number}\n */\nSolution.prototype.getRandom = function() {\n \n};\n \n/**","lang":"JavaScript"}],"page":"382/1581","h":"382. 链表随机节点","d":"<div class=\"notranslate\"><p>给定一个单链表，随机选择链表的一个节点，并返回相应的节点值。保证每个节点<strong>被选的概率一样</strong>。</p>\n\n<p><strong>进阶:</strong><br>\n如果链表十分大且长度未知，如何解决这个问题？你能否使用常数级空间复杂度实现？</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>// 初始化一个单链表 [1,2,3].\nListNode head = new ListNode(1);\nhead.next = new ListNode(2);\nhead.next.next = new ListNode(3);\nSolution solution = new Solution(head);\n\n// getRandom()方法应随机返回1,2,3中的一个，保证每个元素被返回的概率相等。\nsolution.getRandom();\n</pre>\n</div>","l":"中等","s":"/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param head The linked list's head.\n        Note that the head is guaranteed to be not \nnull, so it contains at least one node.\n * @param {ListNode} head\n */\nvar Solution = function(head) {\n \n};\n \n/**\n * Returns a random node's value.\n * @return {number}\n */\nSolution.prototype.getRandom = function() {\n \n};\n \n/**","lang":"JavaScript","href":"https://leetcode-cn.com/problems/linked-list-random-node/","bb":{"x":490,"y":50}}

