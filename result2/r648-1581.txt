{"ls":[{"s":"class Solution {\n    public String replaceWords(List<String> dict, \nString sentence) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def replaceWords(self, dict, sentence):\n        \"\"\"\n        :type dict: List[str]\n        :type sentence: str\n        :rtype: str\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def replaceWords(self, dict: List[str], \nsentence: str) -> str:","lang":"Python3"},{"s":"char * replaceWords(char ** dict, int dictSize, char \n* sentence){\n \n}","lang":"C"},{"s":"public class Solution {\n    public string ReplaceWords(IList<string> dict, \nstring sentence) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string[]} dict\n * @param {string} sentence\n * @return {string}\n */\nvar replaceWords = function(dict, sentence) {\n \n};","lang":"JavaScript"}],"page":"648/1581","h":"648. 单词替换","d":"<div class=\"notranslate\"><p>在英语中，我们有一个叫做&nbsp;<code>词根</code>(root)的概念，它可以跟着其他一些词组成另一个较长的单词——我们称这个词为&nbsp;<code>继承词</code>(successor)。例如，词根<code>an</code>，跟随着单词&nbsp;<code>other</code>(其他)，可以形成新的单词&nbsp;<code>another</code>(另一个)。</p>\n\n<p>现在，给定一个由许多词根组成的词典和一个句子。你需要将句子中的所有<code>继承词</code>用<code>词根</code>替换掉。如果<code>继承词</code>有许多可以形成它的<code>词根</code>，则用最短的词根替换它。</p>\n\n<p>你需要输出替换之后的句子。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> dict(词典) = [\"cat\", \"bat\", \"rat\"]\nsentence(句子) = \"the cattle was rattled by the battery\"\n<strong>输出:</strong> \"the cat was rat by the bat\"\n</pre>\n\n<p><strong>注:</strong></p>\n\n<ol>\n\t<li>输入只包含小写字母。</li>\n\t<li>1 &lt;= 字典单词数 &lt;=1000</li>\n\t<li>1 &lt;=&nbsp; 句中词语数&nbsp;&lt;= 1000</li>\n\t<li>1 &lt;= 词根长度 &lt;= 100</li>\n\t<li>1 &lt;= 句中词语长度&nbsp;&lt;= 1000</li>\n</ol>\n</div>","l":"中等","s":"/**\n * @param {string[]} dict\n * @param {string} sentence\n * @return {string}\n */\nvar replaceWords = function(dict, sentence) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/replace-words/","bb":{"x":490,"y":50}}

