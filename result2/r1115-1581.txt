{"ls":[{"s":"class FooBar {\n    private int n;\n \n    public FooBar(int n) {\n        this.n = n;\n    }\n \n    public void foo(Runnable printFoo) throws \nInterruptedException {\n        \n        for (int i = 0; i < n; i++) {\n            \n            // printFoo.run() outputs \"foo\". Do not \nchange or remove this line.\n            printFoo.run();\n        }\n    }\n \n    public void bar(Runnable printBar) throws \nInterruptedException {\n        \n        for (int i = 0; i < n; i++) {\n            \n            // printBar.run() outputs \"bar\". Do not \nchange or remove this line.\n            printBar.run();","lang":"Java"},{"s":"class FooBar(object):\n    def __init__(self, n):\n        self.n = n\n \n \n    def foo(self, printFoo):\n        \"\"\"\n        :type printFoo: method\n        :rtype: void\n        \"\"\"\n        for i in xrange(self.n):\n            \n            # printFoo() outputs \"foo\". Do not \nchange or remove this line.\n            printFoo()\n \n \n    def bar(self, printBar):\n        \"\"\"\n        :type printBar: method\n        :rtype: void\n        \"\"\"\n        for i in xrange(self.n):\n            \n            # printBar() outputs \"bar\". Do not \nchange or remove this line.","lang":"Python"},{"s":"class FooBar:\n    def __init__(self, n):\n        self.n = n\n \n \n    def foo(self, printFoo: 'Callable[[], None]') -> \nNone:\n        \n        for i in range(self.n):\n            \n            # printFoo() outputs \"foo\". Do not \nchange or remove this line.\n            printFoo()\n \n \n    def bar(self, printBar: 'Callable[[], None]') -> \nNone:\n        \n        for i in range(self.n):\n            \n            # printBar() outputs \"bar\". Do not \nchange or remove this line.\n            printBar()","lang":"Python3"},{"s":"typedef struct {\n    int n;\n} FooBar;\n \nFooBar* fooBarCreate(int n) {\n    FooBar* obj = (FooBar*) malloc(sizeof(FooBar));\n    obj->n = n;\n    return obj;\n}\n \nvoid foo(FooBar* obj) {\n    \n    for (int i = 0; i < obj->n; i++) {\n        \n        // printFoo() outputs \"foo\". Do not change \nor remove this line.\n        printFoo();\n    }\n}\n \nvoid bar(FooBar* obj) {\n    \n    for (int i = 0; i < obj->n; i++) {\n        \n        // printBar() outputs \"bar\". Do not change \nor remove this line.","lang":"C"},{"s":"public class FooBar {\n    private int n;\n \n    public FooBar(int n) {\n        this.n = n;\n    }\n \n    public void Foo(Action printFoo) {\n        \n        for (int i = 0; i < n; i++) {\n            \n            // printFoo() outputs \"foo\". Do not \nchange or remove this line.\n            printFoo();\n        }\n    }\n \n    public void Bar(Action printBar) {\n        \n        for (int i = 0; i < n; i++) {\n            \n            // printBar() outputs \"bar\". Do not \nchange or remove this line.\n            printBar();\n        }\n    }","lang":"C#"},{"s":"public class FooBar {\n    private int n;\n \n    public FooBar(int n) {\n        this.n = n;\n    }\n \n    public void Foo(Action printFoo) {\n        \n        for (int i = 0; i < n; i++) {\n            \n            // printFoo() outputs \"foo\". Do not \nchange or remove this line.\n            printFoo();\n        }\n    }\n \n    public void Bar(Action printBar) {\n        \n        for (int i = 0; i < n; i++) {\n            \n            // printBar() outputs \"bar\". Do not \nchange or remove this line.\n            printBar();\n        }\n    }","lang":"C#"}],"page":"1115/1581","h":"1115. 交替打印FooBar","d":"<div class=\"notranslate\"><p>我们提供一个类：</p>\n\n<pre>class FooBar {\n  public void foo() {\n&nbsp; &nbsp; for (int i = 0; i &lt; n; i++) {\n&nbsp; &nbsp; &nbsp; print(\"foo\");\n&nbsp;   }\n  }\n\n  public void bar() {\n&nbsp; &nbsp; for (int i = 0; i &lt; n; i++) {\n&nbsp; &nbsp; &nbsp; print(\"bar\");\n&nbsp; &nbsp; }\n  }\n}\n</pre>\n\n<p>两个不同的线程将会共用一个 <code>FooBar</code>&nbsp;实例。其中一个线程将会调用&nbsp;<code>foo()</code>&nbsp;方法，另一个线程将会调用&nbsp;<code>bar()</code>&nbsp;方法。</p>\n\n<p>请设计修改程序，以确保 \"foobar\" 被输出 n 次。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> n = 1\n<strong>输出:</strong> \"foobar\"\n<strong>解释:</strong> 这里有两个线程被异步启动。其中一个调用 foo() 方法, 另一个调用 bar() 方法，\"foobar\" 将被输出一次。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> n = 2\n<strong>输出:</strong> \"foobarfoobar\"\n<strong>解释:</strong> \"foobar\" 将被输出两次。\n</pre>\n</div>","l":"中等","s":"public class FooBar {\n    private int n;\n \n    public FooBar(int n) {\n        this.n = n;\n    }\n \n    public void Foo(Action printFoo) {\n        \n        for (int i = 0; i < n; i++) {\n            \n            // printFoo() outputs \"foo\". Do not \nchange or remove this line.\n            printFoo();\n        }\n    }\n \n    public void Bar(Action printBar) {\n        \n        for (int i = 0; i < n; i++) {\n            \n            // printBar() outputs \"bar\". Do not \nchange or remove this line.\n            printBar();\n        }\n    }","lang":"C#","href":"https://leetcode-cn.com/problems/print-foobar-alternately/","bb":{"x":490,"y":50}}

