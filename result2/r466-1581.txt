{"ls":[{"s":"class Solution {\n    public int getMaxRepetitions(String s1, int n1, \nString s2, int n2) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def getMaxRepetitions(self, s1, n1, s2, n2):\n        \"\"\"\n        :type s1: str\n        :type n1: int\n        :type s2: str\n        :type n2: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def getMaxRepetitions(self, s1: str, n1: int, \ns2: str, n2: int) -> int:","lang":"Python3"},{"s":"int getMaxRepetitions(char * s1, int n1, char * s2, \nint n2){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int GetMaxRepetitions(string s1, int n1, \nstring s2, int n2) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} s1\n * @param {number} n1\n * @param {string} s2\n * @param {number} n2\n * @return {number}\n */\nvar getMaxRepetitions = function(s1, n1, s2, n2) {\n \n};","lang":"JavaScript"}],"page":"466/1581","h":"466. 统计重复个数","d":"<div class=\"notranslate\"><p>定义由 n 个连接的字符串 s 组成字符串 S，即&nbsp;<code>S = [s,n]</code>。例如，<code>[\"abc\", 3]</code>=“abcabcabc”。</p>\n\n<p>另一方面，如果我们可以从 s<sub>2&nbsp;</sub>中删除某些字符使其变为 s<sub>1</sub>，我们称字符串 s<sub>1&nbsp;</sub>可以从字符串 s<sub>2&nbsp;</sub>获得。例如，“abc” 可以根据我们的定义从 “abdbec” 获得，但不能从 “acbbe” 获得。</p>\n\n<p>现在给出两个非空字符串 S<sub>1&nbsp;</sub>和 S<sub>2</sub>（每个最多 100 个字符长）和两个整数 0 ≤ N<sub>1&nbsp;</sub>≤ 10<sup>6&nbsp;</sup>和 1 ≤ N<sub>2&nbsp;</sub>≤ 10<sup>6</sup>。现在考虑字符串 S<sub>1&nbsp;</sub>和 S<sub>2</sub>，其中<code>S1=[s1,n1]</code>和<code>S2=[s2,n2]</code>。找出可以使<code>[S2,M]</code>从&nbsp;<code>S1</code>&nbsp;获得的最大整数 M。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>输入：\ns1 =\"acb\",n1 = 4\ns2 =\"ab\",n2 = 2\n\n返回：\n2\n</pre>\n</div>","l":"困难","s":"/**\n * @param {string} s1\n * @param {number} n1\n * @param {string} s2\n * @param {number} n2\n * @return {number}\n */\nvar getMaxRepetitions = function(s1, n1, s2, n2) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/count-the-repetitions/","bb":{"x":490,"y":50}}

