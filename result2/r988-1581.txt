{"ls":[{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public String smallestFromLeaf(TreeNode root) {\n \n    }\n}","lang":"Java"},{"s":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n \nclass Solution(object):\n    def smallestFromLeaf(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: str\n        \"\"\"","lang":"Python"},{"s":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n \nclass Solution:\n    def smallestFromLeaf(self, root: TreeNode) -> \nstr:","lang":"Python3"},{"s":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n \n \nchar * smallestFromLeaf(struct TreeNode* root){\n \n}","lang":"C"},{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public string SmallestFromLeaf(TreeNode root) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {string}\n */\nvar smallestFromLeaf = function(root) {\n \n};","lang":"JavaScript"}],"page":"988/1581","h":"988. 从叶结点开始的最小字符串","d":"<div class=\"notranslate\"><p>给定一颗根结点为&nbsp;<code>root</code>&nbsp;的二叉树，树中的每一个结点都有一个从&nbsp;<code>0</code> 到&nbsp;<code>25</code>&nbsp;的值，分别代表字母&nbsp;<code>'a'</code> 到&nbsp;<code>'z'</code>：值&nbsp;<code>0</code> 代表&nbsp;<code>'a'</code>，值&nbsp;<code>1</code>&nbsp;代表&nbsp;<code>'b'</code>，依此类推。</p>\n\n<p>找出按字典序最小的字符串，该字符串从这棵树的一个叶结点开始，到根结点结束。</p>\n\n<p><em>（小贴士：字符串中任何较短的前缀在字典序上都是较小的：例如，在字典序上&nbsp;<code>\"ab\"</code> 比&nbsp;<code>\"aba\"</code>&nbsp;要小。叶结点是指没有子结点的结点。）</em></p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<p><strong><img style=\"height: 107px; width: 160px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/02/tree1.png\" alt=\"\"></strong></p>\n\n<pre><strong>输入：</strong>[0,1,2,3,4,3,4]\n<strong>输出：</strong>\"dba\"\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><strong><img style=\"height: 107px; width: 160px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/02/tree2.png\" alt=\"\"></strong></p>\n\n<pre><strong>输入：</strong>[25,1,3,1,3,0,2]\n<strong>输出：</strong>\"adz\"\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<p><strong><img style=\"height: 180px; width: 172px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/02/tree3.png\" alt=\"\"></strong></p>\n\n<pre><strong>输入：</strong>[2,2,1,null,1,0,null,0]\n<strong>输出：</strong>\"abc\"\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>给定树的结点数介于&nbsp;<code>1</code> 和&nbsp;<code>8500</code>&nbsp;之间。</li>\n\t<li>树中的每个结点都有一个介于&nbsp;<code>0</code>&nbsp;和&nbsp;<code>25</code>&nbsp;之间的值。</li>\n</ol>\n</div>","l":"中等","s":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {string}\n */\nvar smallestFromLeaf = function(root) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/smallest-string-starting-from-leaf/","bb":{"x":490,"y":50}}

