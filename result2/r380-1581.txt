{"ls":[{"s":"class RandomizedSet {\n \n    /** Initialize your data structure here. */\n    public RandomizedSet() {\n \n    }\n    \n    /** Inserts a value to the set. Returns true if \nthe set did not already contain the specified \nelement. */\n    public boolean insert(int val) {\n \n    }\n    \n    /** Removes a value from the set. Returns true \nif the set contained the specified element. */\n    public boolean remove(int val) {\n \n    }\n    \n    /** Get a random element from the set. */\n    public int getRandom() {\n \n    }\n}\n ","lang":"Java"},{"s":"class RandomizedSet(object):\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n \n    def insert(self, val):\n        \"\"\"\n        Inserts a value to the set. Returns true if \nthe set did not already contain the specified \nelement.\n        :type val: int\n        :rtype: bool\n        \"\"\"\n        \n \n    def remove(self, val):\n        \"\"\"\n        Removes a value from the set. Returns true \nif the set contained the specified element.\n        :type val: int\n        :rtype: bool\n        \"\"\"\n        ","lang":"Python"},{"s":"class RandomizedSet:\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n \n    def insert(self, val: int) -> bool:\n        \"\"\"\n        Inserts a value to the set. Returns true if \nthe set did not already contain the specified \nelement.\n        \"\"\"\n        \n \n    def remove(self, val: int) -> bool:\n        \"\"\"\n        Removes a value from the set. Returns true \nif the set contained the specified element.\n        \"\"\"\n        \n \n    def getRandom(self) -> int:\n        \"\"\"\n        Get a random element from the set.","lang":"Python3"},{"s":"typedef struct {\n    \n} RandomizedSet;\n \n/** Initialize your data structure here. */\n \nRandomizedSet* randomizedSetCreate() {\n    \n}\n \n/** Inserts a value to the set. Returns true if the \nset did not already contain the specified element. */\nbool randomizedSetInsert(RandomizedSet* obj, int val)\n {\n  \n}\n \n/** Removes a value from the set. Returns true if \nthe set contained the specified element. */\nbool randomizedSetRemove(RandomizedSet* obj, int val)\n {\n  \n}\n \n/** Get a random element from the set. */\nint randomizedSetGetRandom(RandomizedSet* obj) {","lang":"C"},{"s":"public class RandomizedSet {\n \n    /** Initialize your data structure here. */\n    public RandomizedSet() {\n \n    }\n    \n    /** Inserts a value to the set. Returns true if \nthe set did not already contain the specified \nelement. */\n    public bool Insert(int val) {\n \n    }\n    \n    /** Removes a value from the set. Returns true \nif the set contained the specified element. */\n    public bool Remove(int val) {\n \n    }\n    \n    /** Get a random element from the set. */\n    public int GetRandom() {\n \n    }\n}\n ","lang":"C#"},{"s":"/**\n * Initialize your data structure here.\n */\nvar RandomizedSet = function() {\n \n};\n \n/**\n * Inserts a value to the set. Returns true if the \nset did not already contain the specified element. \n * @param {number} val\n * @return {boolean}\n */\nRandomizedSet.prototype.insert = function(val) {\n \n};\n \n/**\n * Removes a value from the set. Returns true if the \nset contained the specified element. \n * @param {number} val\n * @return {boolean}\n */\nRandomizedSet.prototype.remove = function(val) {\n \n};","lang":"JavaScript"}],"page":"380/1581","h":"380. 常数时间插入、删除和获取随机元素","d":"<div class=\"notranslate\"><p>设计一个支持在<em>平均&nbsp;</em>时间复杂度 <strong>O(1)</strong>&nbsp;下，执行以下操作的数据结构。</p>\n\n<ol>\n\t<li><code>insert(val)</code>：当元素 val 不存在时，向集合中插入该项。</li>\n\t<li><code>remove(val)</code>：元素 val 存在时，从集合中移除该项。</li>\n\t<li><code>getRandom</code>：随机返回现有集合中的一项。每个元素应该有<strong>相同的概率</strong>被返回。</li>\n</ol>\n\n<p><strong>示例 :</strong></p>\n\n<pre>// 初始化一个空的集合。\nRandomizedSet randomSet = new RandomizedSet();\n\n// 向集合中插入 1 。返回 true 表示 1 被成功地插入。\nrandomSet.insert(1);\n\n// 返回 false ，表示集合中不存在 2 。\nrandomSet.remove(2);\n\n// 向集合中插入 2 。返回 true 。集合现在包含 [1,2] 。\nrandomSet.insert(2);\n\n// getRandom 应随机返回 1 或 2 。\nrandomSet.getRandom();\n\n// 从集合中移除 1 ，返回 true 。集合现在包含 [2] 。\nrandomSet.remove(1);\n\n// 2 已在集合中，所以返回 false 。\nrandomSet.insert(2);\n\n// 由于 2 是集合中唯一的数字，getRandom 总是返回 2 。\nrandomSet.getRandom();\n</pre>\n</div>","l":"中等","s":"/**\n * Initialize your data structure here.\n */\nvar RandomizedSet = function() {\n \n};\n \n/**\n * Inserts a value to the set. Returns true if the \nset did not already contain the specified element. \n * @param {number} val\n * @return {boolean}\n */\nRandomizedSet.prototype.insert = function(val) {\n \n};\n \n/**\n * Removes a value from the set. Returns true if the \nset contained the specified element. \n * @param {number} val\n * @return {boolean}\n */\nRandomizedSet.prototype.remove = function(val) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/insert-delete-getrandom-o1/","bb":{"x":490,"y":50}}

