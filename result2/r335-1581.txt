{"ls":[{"s":"class Solution {\n    public boolean isSelfCrossing(int[] x) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def isSelfCrossing(self, x):\n        \"\"\"\n        :type x: List[int]\n        :rtype: bool\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def isSelfCrossing(self, x: List[int]) -> bool:","lang":"Python3"},{"s":"bool isSelfCrossing(int* x, int xSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public bool IsSelfCrossing(int[] x) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} x\n * @return {boolean}\n */\nvar isSelfCrossing = function(x) {\n \n};","lang":"JavaScript"}],"page":"335/1581","h":"335. 路径交叉","d":"<div class=\"notranslate\"><p>给定一个含有&nbsp;<code>n</code>&nbsp;个正数的数组&nbsp;<em>x</em>。从点&nbsp;<code>(0,0)</code>&nbsp;开始，先向北移动&nbsp;<code>x[0]</code>&nbsp;米，然后向西移动&nbsp;<code>x[1]</code>&nbsp;米，向南移动&nbsp;<code>x[2]</code>&nbsp;米，向东移动&nbsp;<code>x[3]</code>&nbsp;米，持续移动。也就是说，每次移动后你的方位会发生逆时针变化。</p>\n\n<p>编写一个&nbsp;<code>O(1)</code>&nbsp;空间复杂度的一趟扫描算法，判断你所经过的路径是否相交。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>┌───┐\n│ &nbsp; │\n└───┼──&gt;\n&nbsp; &nbsp; │\n\n输入: </strong><code>[2,1,1,2]</code>\n<strong>输出:</strong> true \n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>┌──────┐\n│ &nbsp; &nbsp; &nbsp;│\n│\n│\n└────────────&gt;\n\n输入: </strong><code>[1,2,3,4]</code>\n<strong>输出: </strong>false \n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>┌───┐\n│ &nbsp; │\n└───┼&gt;\n\n输入:</strong> <code>[1,1,1,1]</code>\n<strong>输出:</strong> true \n</pre>\n</div>","l":"困难","s":"/**\n * @param {number[]} x\n * @return {boolean}\n */\nvar isSelfCrossing = function(x) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/self-crossing/","bb":{"x":490,"y":50}}

