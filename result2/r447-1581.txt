{"ls":[{"s":"class Solution {\n    public int numberOfBoomerangs(int[][] points) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def numberOfBoomerangs(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def numberOfBoomerangs(self, points: List[List\n[int]]) -> int:","lang":"Python3"},{"s":"int numberOfBoomerangs(int** points, int pointsSize, \nint* pointsColSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int NumberOfBoomerangs(int[][] points) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} points\n * @return {number}\n */\nvar numberOfBoomerangs = function(points) {\n \n};","lang":"JavaScript"}],"page":"447/1581","h":"447. 回旋镖的数量","d":"<div class=\"notranslate\"><p>给定平面上<em>&nbsp;n </em>对不同的点，“回旋镖” 是由点表示的元组&nbsp;<code>(i, j, k)</code>&nbsp;，其中&nbsp;<code>i</code>&nbsp;和&nbsp;<code>j</code>&nbsp;之间的距离和&nbsp;<code>i</code>&nbsp;和&nbsp;<code>k</code>&nbsp;之间的距离相等（<strong>需要考虑元组的顺序</strong>）。</p>\n\n<p>找到所有回旋镖的数量。你可以假设<em>&nbsp;n </em>最大为 <strong>500</strong>，所有点的坐标在闭区间<strong> [-10000, 10000] </strong>中。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>\n[[0,0],[1,0],[2,0]]\n\n<strong>输出:</strong>\n2\n\n<strong>解释:</strong>\n两个回旋镖为 <strong>[[1,0],[0,0],[2,0]]</strong> 和 <strong>[[1,0],[2,0],[0,0]]</strong>\n</pre>\n</div>","l":"简单","s":"/**\n * @param {number[][]} points\n * @return {number}\n */\nvar numberOfBoomerangs = function(points) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/number-of-boomerangs/","bb":{"x":490,"y":50}}

