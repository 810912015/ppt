{"ls":[{"s":"class Solution {\n    public List<Integer> topKFrequent(int[] nums, \nint k) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def topKFrequent(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def topKFrequent(self, nums: List[int], k: int) \n-> List[int]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, assume \ncaller calls free().\n */\nint* topKFrequent(int* nums, int numsSize, int k, \nint* returnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<int> TopKFrequent(int[] nums, int k)\n {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar topKFrequent = function(nums, k) {\n \n};","lang":"JavaScript"}],"page":"347/1581","h":"347. 前 K 个高频元素","d":"<div class=\"notranslate\"><p>给定一个非空的整数数组，返回其中出现频率前&nbsp;<strong><em>k&nbsp;</em></strong>高的元素。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>nums = [1,1,1,2,2,3], k = 2\n<strong>输出: </strong>[1,2]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>nums = [1], k = 1\n<strong>输出: </strong>[1]</pre>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>你可以假设给定的&nbsp;<em>k&nbsp;</em>总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。</li>\n\t<li>你的算法的时间复杂度<strong>必须</strong>优于 O(<em>n</em> log <em>n</em>) ,&nbsp;<em>n&nbsp;</em>是数组的大小。</li>\n</ul>\n</div>","l":"中等","s":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar topKFrequent = function(nums, k) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/top-k-frequent-elements/","bb":{"x":490,"y":50}}

