{"ls":[{"s":"class Solution {\n    public int[] numsSameConsecDiff(int N, int K) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def numsSameConsecDiff(self, N, K):\n        \"\"\"\n        :type N: int\n        :type K: int\n        :rtype: List[int]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def numsSameConsecDiff(self, N: int, K: int) -> \nList[int]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, assume \ncaller calls free().\n */\nint* numsSameConsecDiff(int N, int K, int* \nreturnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int[] NumsSameConsecDiff(int N, int K) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} N\n * @param {number} K\n * @return {number[]}\n */\nvar numsSameConsecDiff = function(N, K) {\n \n};","lang":"JavaScript"}],"page":"967/1581","h":"967. 连续差相同的数字","d":"<div class=\"notranslate\"><p>返回所有长度为 <code>N</code> 且满足其每两个连续位上的数字之间的差的绝对值为 <code>K</code>&nbsp;的<strong>非负整数</strong>。</p>\n\n<p>请注意，<strong>除了</strong>数字 <code>0</code> 本身之外，答案中的每个数字都<strong>不能</strong>有前导零。例如，<code>01</code>&nbsp;因为有一个前导零，所以是无效的；但 <code>0</code>&nbsp;是有效的。</p>\n\n<p>你可以按任何顺序返回答案。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>N = 3, K = 7\n<strong>输出：</strong>[181,292,707,818,929]\n<strong>解释：</strong>注意，070 不是一个有效的数字，因为它有前导零。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>N = 2, K = 1\n<strong>输出：</strong>[10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 9</code></li>\n\t<li><code>0 &lt;= K &lt;= 9</code></li>\n</ol>\n</div>","l":"中等","s":"/**\n * @param {number} N\n * @param {number} K\n * @return {number[]}\n */\nvar numsSameConsecDiff = function(N, K) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/numbers-with-same-consecutive-differences/","bb":{"x":490,"y":50}}

