{"ls":[{"s":"class LFUCache {\n \n    public LFUCache(int capacity) {\n \n    }\n    \n    public int get(int key) {\n \n    }\n    \n    public void put(int key, int value) {\n \n    }\n}\n \n/**\n * Your LFUCache object will be instantiated and \ncalled as such:\n * LFUCache obj = new LFUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */","lang":"Java"},{"s":"class LFUCache(object):\n \n    def __init__(self, capacity):\n        \"\"\"\n        :type capacity: int\n        \"\"\"\n        \n \n    def get(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: int\n        \"\"\"\n        \n \n    def put(self, key, value):\n        \"\"\"\n        :type key: int\n        :type value: int\n        :rtype: None\n        \"\"\"\n        \n \n \n# Your LFUCache object will be instantiated and \ncalled as such:","lang":"Python"},{"s":"class LFUCache:\n \n    def __init__(self, capacity: int):\n        \n \n    def get(self, key: int) -> int:\n        \n \n    def put(self, key: int, value: int) -> None:\n        \n \n \n# Your LFUCache object will be instantiated and \ncalled as such:\n# obj = LFUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)","lang":"Python3"},{"s":"typedef struct {\n    \n} LFUCache;\n \n \nLFUCache* lFUCacheCreate(int capacity) {\n    \n}\n \nint lFUCacheGet(LFUCache* obj, int key) {\n  \n}\n \nvoid lFUCachePut(LFUCache* obj, int key, int value) {\n  \n}\n \nvoid lFUCacheFree(LFUCache* obj) {\n    \n}\n \n/**\n * Your LFUCache struct will be instantiated and \ncalled as such:\n * LFUCache* obj = lFUCacheCreate(capacity);\n * int param_1 = lFUCacheGet(obj, key);","lang":"C"},{"s":"public class LFUCache {\n \n    public LFUCache(int capacity) {\n \n    }\n    \n    public int Get(int key) {\n \n    }\n    \n    public void Put(int key, int value) {\n \n    }\n}\n \n/**\n * Your LFUCache object will be instantiated and \ncalled as such:\n * LFUCache obj = new LFUCache(capacity);\n * int param_1 = obj.Get(key);\n * obj.Put(key,value);\n */","lang":"C#"},{"s":"/**\n * @param {number} capacity\n */\nvar LFUCache = function(capacity) {\n \n};\n \n/** \n * @param {number} key\n * @return {number}\n */\nLFUCache.prototype.get = function(key) {\n \n};\n \n/** \n * @param {number} key \n * @param {number} value\n * @return {void}\n */\nLFUCache.prototype.put = function(key, value) {\n \n};\n \n/**\n * Your LFUCache object will be instantiated and ","lang":"JavaScript"}],"page":"460/1581","h":"460. LFU缓存","d":"<div class=\"notranslate\"><p>设计并实现<a href=\"https://baike.baidu.com/item/%E7%BC%93%E5%AD%98%E7%AE%97%E6%B3%95\">最不经常使用（LFU）</a>缓存的数据结构。它应该支持以下操作：<code>get</code>&nbsp;和&nbsp;<code>put</code>。</p>\n\n<p><code>get(key)</code>&nbsp;- 如果键存在于缓存中，则获取键的值（总是正数），否则返回 -1。<br>\n<code>put(key, value)</code>&nbsp;- 如果键不存在，请设置或插入值。当缓存达到其容量时，它应该在插入新项目之前，使最不经常使用的项目无效。在此问题中，当存在平局（即两个或更多个键具有相同使用频率）时，<strong>最近</strong>最少使用的键将被去除。</p>\n\n<p><strong>进阶：</strong><br>\n你是否可以在&nbsp;<strong>O(1)&nbsp;</strong>时间复杂度内执行两项操作？</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>LFUCache cache = new LFUCache( 2 /* capacity (缓存容量) */ );\n\ncache.put(1, 1);\ncache.put(2, 2);\ncache.get(1);       // 返回 1\ncache.put(3, 3);    // 去除 key 2\ncache.get(2);       // 返回 -1 (未找到key 2)\ncache.get(3);       // 返回 3\ncache.put(4, 4);    // 去除 key 1\ncache.get(1);       // 返回 -1 (未找到 key 1)\ncache.get(3);       // 返回 3\ncache.get(4);       // 返回 4</pre>\n</div>","l":"困难","s":"/**\n * @param {number} capacity\n */\nvar LFUCache = function(capacity) {\n \n};\n \n/** \n * @param {number} key\n * @return {number}\n */\nLFUCache.prototype.get = function(key) {\n \n};\n \n/** \n * @param {number} key \n * @param {number} value\n * @return {void}\n */\nLFUCache.prototype.put = function(key, value) {\n \n};\n \n/**\n * Your LFUCache object will be instantiated and ","lang":"JavaScript","href":"https://leetcode-cn.com/problems/lfu-cache/","bb":{"x":490,"y":50}}

