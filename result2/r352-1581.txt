{"ls":[{"s":"class SummaryRanges {\n \n    /** Initialize your data structure here. */\n    public SummaryRanges() {\n \n    }\n    \n    public void addNum(int val) {\n \n    }\n    \n    public int[][] getIntervals() {\n \n    }\n}\n \n/**\n * Your SummaryRanges object will be instantiated \nand called as such:\n * SummaryRanges obj = new SummaryRanges();\n * obj.addNum(val);\n * int[][] param_2 = obj.getIntervals();\n */","lang":"Java"},{"s":"class SummaryRanges(object):\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n \n    def addNum(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n \n    def getIntervals(self):\n        \"\"\"\n        :rtype: List[List[int]]\n        \"\"\"\n        \n \n \n# Your SummaryRanges object will be instantiated and \ncalled as such:\n# obj = SummaryRanges()\n# obj.addNum(val)","lang":"Python"},{"s":"class SummaryRanges:\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n \n    def addNum(self, val: int) -> None:\n        \n \n    def getIntervals(self) -> List[List[int]]:\n        \n \n \n# Your SummaryRanges object will be instantiated and \ncalled as such:\n# obj = SummaryRanges()\n# obj.addNum(val)\n# param_2 = obj.getIntervals()","lang":"Python3"},{"s":"typedef struct {\n    \n} SummaryRanges;\n \n/** Initialize your data structure here. */\n \nSummaryRanges* summaryRangesCreate() {\n    \n}\n \nvoid summaryRangesAddNum(SummaryRanges* obj, int val)\n {\n  \n}\n \nint** summaryRangesGetIntervals(SummaryRanges* obj, \nint* retSize, int** retColSize) {\n  \n}\n \nvoid summaryRangesFree(SummaryRanges* obj) {\n    \n}\n \n/**\n * Your SummaryRanges struct will be instantiated ","lang":"C"},{"s":"public class SummaryRanges {\n \n    /** Initialize your data structure here. */\n    public SummaryRanges() {\n \n    }\n    \n    public void AddNum(int val) {\n \n    }\n    \n    public int[][] GetIntervals() {\n \n    }\n}\n \n/**\n * Your SummaryRanges object will be instantiated \nand called as such:\n * SummaryRanges obj = new SummaryRanges();\n * obj.AddNum(val);\n * int[][] param_2 = obj.GetIntervals();\n */","lang":"C#"},{"s":"/**\n * Initialize your data structure here.\n */\nvar SummaryRanges = function() {\n \n};\n \n/** \n * @param {number} val\n * @return {void}\n */\nSummaryRanges.prototype.addNum = function(val) {\n \n};\n \n/**\n * @return {number[][]}\n */\nSummaryRanges.prototype.getIntervals = function() {\n \n};\n \n/**\n * Your SummaryRanges object will be instantiated \nand called as such:\n * var obj = new SummaryRanges()","lang":"JavaScript"}],"page":"352/1581","h":"352. 将数据流变为多个不相交区间","d":"<div class=\"notranslate\"><p>给定一个非负整数的数据流输入 a<sub>1</sub>，a<sub>2</sub>，…，a<sub>n，</sub>…，将到目前为止看到的数字总结为不相交的区间列表。</p>\n\n<p>例如，假设数据流中的整数为 1，3，7，2，6，…，每次的总结为：</p>\n\n<pre>[1, 1]\n[1, 1], [3, 3]\n[1, 1], [3, 3], [7, 7]\n[1, 3], [7, 7]\n[1, 3], [6, 7]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong><br>\n如果有很多合并，并且与数据流的大小相比，不相交区间的数量很小，该怎么办?</p>\n\n<p><strong>提示：</strong><br>\n特别感谢 <a href=\"https://discuss.leetcode.com/user/yunhong\">@yunhong</a> 提供了本问题和其测试用例。</p>\n</div>","l":"困难","s":"/**","lang":"JavaScript","href":"https://leetcode-cn.com/problems/data-stream-as-disjoint-intervals/","bb":{"x":490,"y":50}}

