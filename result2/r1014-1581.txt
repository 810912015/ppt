{"ls":[{"s":"class Solution {\n    public int maxScoreSightseeingPair(int[] A) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def maxScoreSightseeingPair(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def maxScoreSightseeingPair(self, A: List[int]) \n-> int:","lang":"Python3"},{"s":"int maxScoreSightseeingPair(int* A, int ASize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int MaxScoreSightseeingPair(int[] A) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} A\n * @return {number}\n */\nvar maxScoreSightseeingPair = function(A) {\n \n};","lang":"JavaScript"}],"page":"1014/1581","h":"1014. 最佳观光组合","d":"<div class=\"notranslate\"><p>给定正整数数组&nbsp;<code>A</code>，<code>A[i]</code>&nbsp;表示第 <code>i</code> 个观光景点的评分，并且两个景点&nbsp;<code>i</code> 和&nbsp;<code>j</code>&nbsp;之间的距离为&nbsp;<code>j - i</code>。</p>\n\n<p>一对景点（<code>i &lt; j</code>）组成的观光组合的得分为（<code>A[i] + A[j] + i&nbsp;- j</code>）：景点的评分之和<strong>减去</strong>它们两者之间的距离。</p>\n\n<p>返回一对观光景点能取得的最高分。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>[8,1,5,2,6]\n<strong>输出：</strong>11\n<strong>解释：</strong>i = 0, j = 2, <code>A[i] + A[j] + i - j = 8 + 5 + 0 - 2 = 11</code>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= A.length &lt;= 50000</code></li>\n\t<li><code>1 &lt;= A[i] &lt;= 1000</code></li>\n</ol>\n</div>","l":"中等","s":"/**\n * @param {number[]} A\n * @return {number}\n */\nvar maxScoreSightseeingPair = function(A) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/best-sightseeing-pair/","bb":{"x":490,"y":50}}

