{"ls":[{"s":"class Solution {\n    public List<String> findItinerary\n(List<List<String>> tickets) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def findItinerary(self, tickets: List[List[str]])\n -> List[str]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, assume \ncaller calls free().\n */\nchar ** findItinerary(char *** tickets, int \nticketsSize, int* ticketsColSize, int* returnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<string> FindItinerary\n(IList<IList<string>> tickets) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string[][]} tickets\n * @return {string[]}\n */\nvar findItinerary = function(tickets) {\n \n};","lang":"JavaScript"}],"page":"332/1581","h":"332. 重新安排行程","d":"<div class=\"notranslate\"><p>给定一个机票的字符串二维数组 <code>[from, to]</code>，子数组中的两个成员分别表示飞机出发和降落的机场地点，对该行程进行重新规划排序。所有这些机票都属于一个从JFK（肯尼迪国际机场）出发的先生，所以该行程必须从 JFK 出发。</p>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>如果存在多种有效的行程，你可以按字符自然排序返回最小的行程组合。例如，行程 [\"JFK\", \"LGA\"] 与 [\"JFK\", \"LGB\"] 相比就更小，排序更靠前</li>\n\t<li>所有的机场都用三个大写字母表示（机场代码）。</li>\n\t<li>假定所有机票至少存在一种合理的行程。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><code><strong>输入: </strong></code><code>[[\"MUC\", \"LHR\"], [\"JFK\", \"MUC\"], [\"SFO\", \"SJC\"], [\"LHR\", \"SFO\"]]</code>\n<strong>输出: </strong><code>[\"JFK\", \"MUC\", \"LHR\", \"SFO\", \"SJC\"]</code>\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><code><strong>输入: </strong></code><code>[[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]</code>\n<strong>输出: </strong><code>[\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]</code>\n<strong>解释: </strong>另一种有效的行程是&nbsp;<code>[\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"]</code>。但是它自然排序更大更靠后。</pre>\n</div>","l":"中等","s":"/**\n * @param {string[][]} tickets\n * @return {string[]}\n */\nvar findItinerary = function(tickets) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/reconstruct-itinerary/","bb":{"x":490,"y":50}}

