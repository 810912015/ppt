{"ls":[{"s":"class Solution {\n    public boolean increasingTriplet(int[] nums) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def increasingTriplet(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def increasingTriplet(self, nums: List[int]) -> \nbool:","lang":"Python3"},{"s":"bool increasingTriplet(int* nums, int numsSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public bool IncreasingTriplet(int[] nums) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar increasingTriplet = function(nums) {\n \n};","lang":"JavaScript"}],"page":"334/1581","h":"334. 递增的三元子序列","d":"<div class=\"notranslate\"><p>给定一个未排序的数组，判断这个数组中是否存在长度为 3 的递增子序列。</p>\n\n<p>数学表达式如下:</p>\n\n<blockquote>如果存在这样的&nbsp;<em>i, j, k,&nbsp;</em>&nbsp;且满足&nbsp;0 ≤ <em>i</em> &lt; <em>j</em> &lt; <em>k</em> ≤ <em>n</em>-1，<br>\n使得&nbsp;<em>arr[i]</em> &lt; <em>arr[j]</em> &lt; <em>arr[k] </em>，返回 true ;&nbsp;否则返回 false 。</blockquote>\n\n<p><strong>说明:</strong> 要求算法的时间复杂度为 O(<em>n</em>)，空间复杂度为 O(<em>1</em>) 。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>[1,2,3,4,5]\n<strong>输出: </strong>true\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>[5,4,3,2,1]\n<strong>输出: </strong>false</pre>\n</div>","l":"中等","s":"/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar increasingTriplet = function(nums) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/increasing-triplet-subsequence/","bb":{"x":490,"y":50}}

