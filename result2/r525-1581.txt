{"ls":[{"s":"class Solution {\n    public int findMaxLength(int[] nums) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def findMaxLength(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def findMaxLength(self, nums: List[int]) -> int:","lang":"Python3"},{"s":"int findMaxLength(int* nums, int numsSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int FindMaxLength(int[] nums) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxLength = function(nums) {\n \n};","lang":"JavaScript"}],"page":"525/1581","h":"525. 连续数组","d":"<div class=\"notranslate\"><p>给定一个二进制数组, 找到含有相同数量的 0 和 1 的最长连续子数组（的长度）。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [0,1]\n<strong>输出:</strong> 2\n<strong>说明:</strong> [0, 1] 是具有相同数量0和1的最长连续子数组。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [0,1,0]\n<strong>输出:</strong> 2\n<strong>说明:</strong> [0, 1] (或 [1, 0]) 是具有相同数量0和1的最长连续子数组。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意:&nbsp;</strong>给定的二进制数组的长度不会超过50000。</p>\n</div>","l":"中等","s":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxLength = function(nums) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/contiguous-array/","bb":{"x":490,"y":50}}

