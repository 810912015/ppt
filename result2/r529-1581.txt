{"ls":[{"s":"class Solution {\n    public char[][] updateBoard(char[][] board, int[]\n click) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def updateBoard(self, board, click):\n        \"\"\"\n        :type board: List[List[str]]\n        :type click: List[int]\n        :rtype: List[List[str]]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def updateBoard(self, board: List[List[str]], \nclick: List[int]) -> List[List[str]]:","lang":"Python3"},{"s":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as \n*returnColumnSizes array.\n * Note: Both returned array and *columnSizes array \nmust be malloced, assume caller calls free().\n */\nchar** updateBoard(char** board, int boardSize, int* \nboardColSize, int* click, int clickSize, int* \nreturnSize, int** returnColumnSizes){\n \n}","lang":"C"},{"s":"public class Solution {\n    public char[][] UpdateBoard(char[][] board, int[]\n click) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {character[][]} board\n * @param {number[]} click\n * @return {character[][]}\n */\nvar updateBoard = function(board, click) {\n \n};","lang":"JavaScript"}],"page":"529/1581","h":"529. 扫雷游戏","d":"<div class=\"notranslate\"><p>让我们一起来玩扫雷游戏！</p>\n\n<p>给定一个代表游戏板的二维字符矩阵。&nbsp;<strong>'M'</strong>&nbsp;代表一个<strong>未挖出的</strong>地雷，<strong>'E'</strong>&nbsp;代表一个<strong>未挖出的</strong>空方块，<strong>'B'&nbsp;</strong>代表没有相邻（上，下，左，右，和所有4个对角线）地雷的<strong>已挖出的</strong>空白方块，<strong>数字</strong>（'1' 到 '8'）表示有多少地雷与这块<strong>已挖出的</strong>方块相邻，<strong>'X'</strong>&nbsp;则表示一个<strong>已挖出的</strong>地雷。</p>\n\n<p>现在给出在所有<strong>未挖出的</strong>方块中（'M'或者'E'）的下一个点击位置（行和列索引），根据以下规则，返回相应位置被点击后对应的面板：</p>\n\n<ol>\n\t<li>如果一个地雷（'M'）被挖出，游戏就结束了- 把它改为&nbsp;<strong>'X'</strong>。</li>\n\t<li>如果一个<strong>没有相邻地雷</strong>的空方块（'E'）被挖出，修改它为（'B'），并且所有和其相邻的方块都应该被递归地揭露。</li>\n\t<li>如果一个<strong>至少与一个地雷相邻</strong>的空方块（'E'）被挖出，修改它为数字（'1'到'8'），表示相邻地雷的数量。</li>\n\t<li>如果在此次点击中，若无更多方块可被揭露，则返回面板。</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入:</strong> \n\n[['E', 'E', 'E', 'E', 'E'],\n ['E', 'E', 'M', 'E', 'E'],\n ['E', 'E', 'E', 'E', 'E'],\n ['E', 'E', 'E', 'E', 'E']]\n\nClick : [3,0]\n\n<strong>输出:</strong> \n\n[['B', '1', 'E', '1', 'B'],\n ['B', '1', 'M', '1', 'B'],\n ['B', '1', '1', '1', 'B'],\n ['B', 'B', 'B', 'B', 'B']]\n\n<strong>解释:</strong>\n<img style=\"width: 100%; max-width: 400px\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/minesweeper_example_1.png\">\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入:</strong> \n\n[['B', '1', 'E', '1', 'B'],\n ['B', '1', 'M', '1', 'B'],\n ['B', '1', '1', '1', 'B'],\n ['B', 'B', 'B', 'B', 'B']]\n\nClick : [1,2]\n\n<strong>输出:</strong> \n\n[['B', '1', 'E', '1', 'B'],\n ['B', '1', 'X', '1', 'B'],\n ['B', '1', '1', '1', 'B'],\n ['B', 'B', 'B', 'B', 'B']]\n\n<strong>解释:</strong>\n<img style=\"width: 100%; max-width: 400px\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/minesweeper_example_2.png\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li>输入矩阵的宽和高的范围为 [1,50]。</li>\n\t<li>点击的位置只能是未被挖出的方块 ('M' 或者 'E')，这也意味着面板至少包含一个可点击的方块。</li>\n\t<li>输入面板不会是游戏结束的状态（即有地雷已被挖出）。</li>\n\t<li>简单起见，未提及的规则在这个问题中可被忽略。例如，当游戏结束时你不需要挖出所有地雷，考虑所有你可能赢得游戏或标记方块的情况。</li>\n</ol></div>","l":"中等","s":"/**\n * @param {character[][]} board\n * @param {number[]} click\n * @return {character[][]}\n */\nvar updateBoard = function(board, click) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/minesweeper/","bb":{"x":490,"y":50}}

