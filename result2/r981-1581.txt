{"ls":[{"s":"class TimeMap {\n \n    /** Initialize your data structure here. */\n    public TimeMap() {\n \n    }\n    \n    public void set(String key, String value, int \ntimestamp) {\n \n    }\n    \n    public String get(String key, int timestamp) {\n \n    }\n}\n \n/**\n * Your TimeMap object will be instantiated and \ncalled as such:\n * TimeMap obj = new TimeMap();\n * obj.set(key,value,timestamp);\n * String param_2 = obj.get(key,timestamp);\n */","lang":"Java"},{"s":"class TimeMap(object):\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n \n    def set(self, key, value, timestamp):\n        \"\"\"\n        :type key: str\n        :type value: str\n        :type timestamp: int\n        :rtype: None\n        \"\"\"\n        \n \n    def get(self, key, timestamp):\n        \"\"\"\n        :type key: str\n        :type timestamp: int\n        :rtype: str\n        \"\"\"\n        \n \n ","lang":"Python"},{"s":"class TimeMap:\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n \n    def set(self, key: str, value: str, timestamp: \nint) -> None:\n        \n \n    def get(self, key: str, timestamp: int) -> str:\n        \n \n \n# Your TimeMap object will be instantiated and \ncalled as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)","lang":"Python3"},{"s":"typedef struct {\n    \n} TimeMap;\n \n/** Initialize your data structure here. */\n \nTimeMap* timeMapCreate() {\n    \n}\n \nvoid timeMapSet(TimeMap* obj, char * key, char * \nvalue, int timestamp) {\n  \n}\n \nchar * timeMapGet(TimeMap* obj, char * key, int \ntimestamp) {\n  \n}\n \nvoid timeMapFree(TimeMap* obj) {\n    \n}\n \n/**\n * Your TimeMap struct will be instantiated and ","lang":"C"},{"s":"public class TimeMap {\n \n    /** Initialize your data structure here. */\n    public TimeMap() {\n \n    }\n    \n    public void Set(string key, string value, int \ntimestamp) {\n \n    }\n    \n    public string Get(string key, int timestamp) {\n \n    }\n}\n \n/**\n * Your TimeMap object will be instantiated and \ncalled as such:\n * TimeMap obj = new TimeMap();\n * obj.Set(key,value,timestamp);\n * string param_2 = obj.Get(key,timestamp);\n */","lang":"C#"},{"s":"/**\n * Initialize your data structure here.\n */\nvar TimeMap = function() {\n \n};\n \n/** \n * @param {string} key \n * @param {string} value \n * @param {number} timestamp\n * @return {void}\n */\nTimeMap.prototype.set = function(key, value, \ntimestamp) {\n \n};\n \n/** \n * @param {string} key \n * @param {number} timestamp\n * @return {string}\n */\nTimeMap.prototype.get = function(key, timestamp) {\n \n};","lang":"JavaScript"}],"page":"981/1581","h":"981. 基于时间的键值存储","d":"<div class=\"notranslate\"><p>创建一个基于时间的键值存储类&nbsp;<code>TimeMap</code>，它支持下面两个操作：</p>\n\n<p>1. <code>set(string key, string value, int timestamp)</code></p>\n\n<ul>\n\t<li>存储键&nbsp;<code>key</code>、值&nbsp;<code>value</code>，以及给定的时间戳&nbsp;<code>timestamp</code>。</li>\n</ul>\n\n<p>2. <code>get(string key, int timestamp)</code></p>\n\n<ul>\n\t<li>返回先前调用&nbsp;<code>set(key, value, timestamp_prev)</code>&nbsp;所存储的值，其中&nbsp;<code>timestamp_prev &lt;= timestamp</code>。</li>\n\t<li>如果有多个这样的值，则返回对应最大的&nbsp;&nbsp;<code>timestamp_prev</code>&nbsp;的那个值。</li>\n\t<li>如果没有值，则返回空字符串（<code>\"\"</code>）。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>inputs = [\"TimeMap\",\"set\",\"get\",\"get\",\"set\",\"get\",\"get\"], inputs = [[],[\"foo\",\"bar\",1],[\"foo\",1],[\"foo\",3],[\"foo\",\"bar2\",4],[\"foo\",4],[\"foo\",5]]\n<strong>输出：</strong>[null,null,\"bar\",\"bar\",null,\"bar2\",\"bar2\"]\n<strong>解释：</strong>&nbsp; \nTimeMap kv; &nbsp; \nkv.set(\"foo\", \"bar\", 1); // 存储键 \"foo\" 和值 \"bar\" 以及时间戳 timestamp = 1 &nbsp; \nkv.get(\"foo\", 1);  // 输出 \"bar\" &nbsp; \nkv.get(\"foo\", 3); // 输出 \"bar\" 因为在时间戳 3 和时间戳 2 处没有对应 \"foo\" 的值，所以唯一的值位于时间戳 1 处（即 \"bar\"） &nbsp; \nkv.set(\"foo\", \"bar2\", 4); &nbsp; \nkv.get(\"foo\", 4); // 输出 \"bar2\" &nbsp; \nkv.get(\"foo\", 5); // 输出 \"bar2\" &nbsp; \n\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>inputs = [\"TimeMap\",\"set\",\"set\",\"get\",\"get\",\"get\",\"get\",\"get\"], inputs = [[],[\"love\",\"high\",10],[\"love\",\"low\",20],[\"love\",5],[\"love\",10],[\"love\",15],[\"love\",20],[\"love\",25]]\n<strong>输出：</strong>[null,null,null,\"\",\"high\",\"high\",\"low\",\"low\"]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>所有的键/值字符串都是小写的。</li>\n\t<li>所有的键/值字符串长度都在&nbsp;<code>[1, 100]</code>&nbsp;范围内。</li>\n\t<li>所有&nbsp;<code>TimeMap.set</code>&nbsp;操作中的时间戳&nbsp;<code>timestamps</code> 都是严格递增的。</li>\n\t<li><code>1 &lt;= timestamp &lt;= 10^7</code></li>\n\t<li><code>TimeMap.set</code> 和&nbsp;<code>TimeMap.get</code>&nbsp;函数在每个测试用例中将（组合）调用总计&nbsp;<code>120000</code> 次。</li>\n</ol>\n</div>","l":"中等","s":"/**\n * Initialize your data structure here.\n */\nvar TimeMap = function() {\n \n};\n \n/** \n * @param {string} key \n * @param {string} value \n * @param {number} timestamp\n * @return {void}\n */\nTimeMap.prototype.set = function(key, value, \ntimestamp) {\n \n};\n \n/** \n * @param {string} key \n * @param {number} timestamp\n * @return {string}\n */\nTimeMap.prototype.get = function(key, timestamp) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/time-based-key-value-store/","bb":{"x":490,"y":50}}

