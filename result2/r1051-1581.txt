{"ls":[{"s":"class Solution {\n    public int heightChecker(int[] heights) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def heightChecker(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def heightChecker(self, heights: List[int]) -> \nint:","lang":"Python3"},{"s":"int heightChecker(int* heights, int heightsSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int HeightChecker(int[] heights) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} heights\n * @return {number}\n */\nvar heightChecker = function(heights) {\n \n};","lang":"JavaScript"}],"page":"1051/1581","h":"1051. 高度检查器","d":"<div class=\"notranslate\"><p>学校在拍年度纪念照时，一般要求学生按照 <strong>非递减</strong> 的高度顺序排列。</p>\n\n<p>请你返回能让所有学生以 <strong>非递减</strong> 高度排列的最小必要移动人数。</p>\n\n<p>注意，当一组学生被选中时，他们之间可以以任何可能的方式重新排序，而未被选中的学生应该保持不动。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>heights =&nbsp;[1,1,4,2,1,3]\n<strong>输出：</strong>3 \n<strong>解释：</strong>\n当前数组：[1,1,4,2,1,3]\n目标数组：[1,1,1,2,3,4]\n在下标 2 处（从 0 开始计数）出现 4 vs 1 ，所以我们必须移动这名学生。\n在下标 4 处（从 0 开始计数）出现 1 vs 3 ，所以我们必须移动这名学生。\n在下标 5 处（从 0 开始计数）出现 3 vs 4 ，所以我们必须移动这名学生。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>heights = [5,1,2,3,4]\n<strong>输出：</strong>5\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>heights = [1,2,3,4,5]\n<strong>输出：</strong>0\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= heights.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= heights[i] &lt;= 100</code></li>\n</ol>\n</div>","l":"简单","s":"/**\n * @param {number[]} heights\n * @return {number}\n */\nvar heightChecker = function(heights) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/height-checker/","bb":{"x":490,"y":50}}

