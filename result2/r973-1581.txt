{"ls":[{"s":"class Solution {\n    public int[][] kClosest(int[][] points, int K) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def kClosest(self, points, K):\n        \"\"\"\n        :type points: List[List[int]]\n        :type K: int\n        :rtype: List[List[int]]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def kClosest(self, points: List[List[int]], K: \nint) -> List[List[int]]:","lang":"Python3"},{"s":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as \n*returnColumnSizes array.\n * Note: Both returned array and *columnSizes array \nmust be malloced, assume caller calls free().\n */\nint** kClosest(int** points, int pointsSize, int* \npointsColSize, int K, int* returnSize, int** \nreturnColumnSizes){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int[][] KClosest(int[][] points, int K) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} points\n * @param {number} K\n * @return {number[][]}\n */\nvar kClosest = function(points, K) {\n \n};","lang":"JavaScript"}],"page":"973/1581","h":"973. 最接近原点的 K 个点","d":"<div class=\"notranslate\"><p>我们有一个由平面上的点组成的列表 <code>points</code>。需要从中找出 <code>K</code> 个距离原点 <code>(0, 0)</code> 最近的点。</p>\n\n<p>（这里，平面上两点之间的距离是欧几里德距离。）</p>\n\n<p>你可以按任何顺序返回答案。除了点坐标的顺序之外，答案确保是唯一的。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>points = [[1,3],[-2,2]], K = 1\n<strong>输出：</strong>[[-2,2]]\n<strong>解释： </strong>\n(1, 3) 和原点之间的距离为 sqrt(10)，\n(-2, 2) 和原点之间的距离为 sqrt(8)，\n由于 sqrt(8) &lt; sqrt(10)，(-2, 2) 离原点更近。\n我们只需要距离原点最近的 K = 1 个点，所以答案就是 [[-2,2]]。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>points = [[3,3],[5,-1],[-2,4]], K = 2\n<strong>输出：</strong>[[3,3],[-2,4]]\n（答案 [[-2,4],[3,3]] 也会被接受。）\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= K &lt;= points.length &lt;= 10000</code></li>\n\t<li><code>-10000 &lt; points[i][0] &lt; 10000</code></li>\n\t<li><code>-10000 &lt; points[i][1] &lt; 10000</code></li>\n</ol>\n</div>","l":"中等","s":"/**\n * @param {number[][]} points\n * @param {number} K\n * @return {number[][]}\n */\nvar kClosest = function(points, K) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/k-closest-points-to-origin/","bb":{"x":490,"y":50}}

