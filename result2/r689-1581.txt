{"ls":[{"s":"class Solution {\n    public int[] maxSumOfThreeSubarrays(int[] nums, \nint k) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def maxSumOfThreeSubarrays(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def maxSumOfThreeSubarrays(self, nums: List[int],\n k: int) -> List[int]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, assume \ncaller calls free().\n */\nint* maxSumOfThreeSubarrays(int* nums, int numsSize, \nint k, int* returnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int[] MaxSumOfThreeSubarrays(int[] nums, \nint k) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar maxSumOfThreeSubarrays = function(nums, k) {\n \n};","lang":"JavaScript"}],"page":"689/1581","h":"689. 三个无重叠子数组的最大和","d":"<div class=\"notranslate\"><p>给定数组&nbsp;<code>nums</code>&nbsp;由正整数组成，找到三个互不重叠的子数组的最大和。</p>\n\n<p>每个子数组的长度为<code>k</code>，我们要使这<code>3*k</code>个项的和最大化。</p>\n\n<p>返回每个区间起始索引的列表（索引从 0 开始）。如果有多个结果，返回字典序最小的一个。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,1,2,6,7,5,1], 2\n<strong>输出:</strong> [0, 3, 5]\n<strong>解释:</strong> 子数组 [1, 2], [2, 6], [7, 5] 对应的起始索引为 [0, 3, 5]。\n我们也可以取 [2, 1], 但是结果 [1, 3, 5] 在字典序上更大。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>nums.length</code>的范围在<code>[1, 20000]</code>之间。</li>\n\t<li><code>nums[i]</code>的范围在<code>[1, 65535]</code>之间。</li>\n\t<li><code>k</code>的范围在<code>[1, floor(nums.length / 3)]</code>之间。</li>\n</ul>\n</div>","l":"困难","s":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar maxSumOfThreeSubarrays = function(nums, k) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/maximum-sum-of-3-non-overlapping-subarrays/","bb":{"x":490,"y":50}}

