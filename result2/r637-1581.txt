{"ls":[{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<Double> averageOfLevels(TreeNode \nroot) {\n \n    }\n}","lang":"Java"},{"s":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n \nclass Solution(object):\n    def averageOfLevels(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[float]\n        \"\"\"","lang":"Python"},{"s":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n \nclass Solution:\n    def averageOfLevels(self, root: TreeNode) -> List\n[float]:","lang":"Python3"},{"s":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n \n \n/**\n * Note: The returned array must be malloced, assume \ncaller calls free().\n */\ndouble* averageOfLevels(struct TreeNode* root, int* \nreturnSize){\n \n}","lang":"C"},{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public IList<double> AverageOfLevels(TreeNode \nroot) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar averageOfLevels = function(root) {\n \n};","lang":"JavaScript"}],"page":"637/1581","h":"637. 二叉树的层平均值","d":"<div class=\"notranslate\"><p>给定一个非空二叉树, 返回一个由每层节点平均值组成的数组.</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong>\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n<strong>输出:</strong> [3, 14.5, 11]\n<strong>解释:</strong>\n第0层的平均值是 3,  第1层是 14.5, 第2层是 11. 因此返回 [3, 14.5, 11].\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li>节点值的范围在32位有符号整数范围内。</li>\n</ol>\n</div>","l":"简单","s":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar averageOfLevels = function(root) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/average-of-levels-in-binary-tree/","bb":{"x":490,"y":50}}

