{"ls":[{"s":"class MyCircularQueue {\n \n    /** Initialize your data structure here. Set the \nsize of the queue to be k. */\n    public MyCircularQueue(int k) {\n \n    }\n    \n    /** Insert an element into the circular queue. \nReturn true if the operation is successful. */\n    public boolean enQueue(int value) {\n \n    }\n    \n    /** Delete an element from the circular queue. \nReturn true if the operation is successful. */\n    public boolean deQueue() {\n \n    }\n    \n    /** Get the front item from the queue. */\n    public int Front() {\n \n    }\n    \n    /** Get the last item from the queue. */","lang":"Java"},{"s":"class MyCircularQueue(object):\n \n    def __init__(self, k):\n        \"\"\"\n        Initialize your data structure here. Set the \nsize of the queue to be k.\n        :type k: int\n        \"\"\"\n        \n \n    def enQueue(self, value):\n        \"\"\"\n        Insert an element into the circular queue. \nReturn true if the operation is successful.\n        :type value: int\n        :rtype: bool\n        \"\"\"\n        \n \n    def deQueue(self):\n        \"\"\"\n        Delete an element from the circular queue. \nReturn true if the operation is successful.\n        :rtype: bool\n        \"\"\"\n        ","lang":"Python"},{"s":"class MyCircularQueue:\n \n    def __init__(self, k: int):\n        \"\"\"\n        Initialize your data structure here. Set the \nsize of the queue to be k.\n        \"\"\"\n        \n \n    def enQueue(self, value: int) -> bool:\n        \"\"\"\n        Insert an element into the circular queue. \nReturn true if the operation is successful.\n        \"\"\"\n        \n \n    def deQueue(self) -> bool:\n        \"\"\"\n        Delete an element from the circular queue. \nReturn true if the operation is successful.\n        \"\"\"\n        \n \n    def Front(self) -> int:\n        \"\"\"\n        Get the front item from the queue.","lang":"Python3"},{"s":"typedef struct {\n    \n} MyCircularQueue;\n \n/** Initialize your data structure here. Set the \nsize of the queue to be k. */\n \nMyCircularQueue* myCircularQueueCreate(int k) {\n    \n}\n \n/** Insert an element into the circular queue. \nReturn true if the operation is successful. */\nbool myCircularQueueEnQueue(MyCircularQueue* obj, \nint value) {\n  \n}\n \n/** Delete an element from the circular queue. \nReturn true if the operation is successful. */\nbool myCircularQueueDeQueue(MyCircularQueue* obj) {\n  \n}\n \n/** Get the front item from the queue. */\nint myCircularQueueFront(MyCircularQueue* obj) {","lang":"C"},{"s":"public class MyCircularQueue {\n \n    /** Initialize your data structure here. Set the \nsize of the queue to be k. */\n    public MyCircularQueue(int k) {\n \n    }\n    \n    /** Insert an element into the circular queue. \nReturn true if the operation is successful. */\n    public bool EnQueue(int value) {\n \n    }\n    \n    /** Delete an element from the circular queue. \nReturn true if the operation is successful. */\n    public bool DeQueue() {\n \n    }\n    \n    /** Get the front item from the queue. */\n    public int Front() {\n \n    }\n    \n    /** Get the last item from the queue. */","lang":"C#"},{"s":"/**\n * Initialize your data structure here. Set the size \nof the queue to be k.\n * @param {number} k\n */\nvar MyCircularQueue = function(k) {\n \n};\n \n/**\n * Insert an element into the circular queue. Return \ntrue if the operation is successful. \n * @param {number} value\n * @return {boolean}\n */\nMyCircularQueue.prototype.enQueue = function(value) {\n \n};\n \n/**\n * Delete an element from the circular queue. Return \ntrue if the operation is successful.\n * @return {boolean}\n */\nMyCircularQueue.prototype.deQueue = function() {\n ","lang":"JavaScript"}],"page":"622/1581","h":"622. 设计循环队列","d":"<div class=\"notranslate\"><p>设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为“环形缓冲器”。</p>\n\n<p>循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。</p>\n\n<p>你的实现应该支持如下操作：</p>\n\n<ul>\n\t<li><code>MyCircularQueue(k)</code>: 构造器，设置队列长度为 k 。</li>\n\t<li><code>Front</code>: 从队首获取元素。如果队列为空，返回 -1 。</li>\n\t<li><code>Rear</code>: 获取队尾元素。如果队列为空，返回 -1 。</li>\n\t<li><code>enQueue(value)</code>: 向循环队列插入一个元素。如果成功插入则返回真。</li>\n\t<li><code>deQueue()</code>: 从循环队列中删除一个元素。如果成功删除则返回真。</li>\n\t<li><code>isEmpty()</code>: 检查循环队列是否为空。</li>\n\t<li><code>isFull()</code>: 检查循环队列是否已满。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>MyCircularQueue circularQueue = new MycircularQueue(3); // 设置长度为 3\n\ncircularQueue.enQueue(1); &nbsp;// 返回 true\n\ncircularQueue.enQueue(2); &nbsp;// 返回 true\n\ncircularQueue.enQueue(3); &nbsp;// 返回 true\n\ncircularQueue.enQueue(4); &nbsp;// 返回 false，队列已满\n\ncircularQueue.Rear(); &nbsp;// 返回 3\n\ncircularQueue.isFull(); &nbsp;// 返回 true\n\ncircularQueue.deQueue(); &nbsp;// 返回 true\n\ncircularQueue.enQueue(4); &nbsp;// 返回 true\n\ncircularQueue.Rear(); &nbsp;// 返回 4\n&nbsp;</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>所有的值都在 0&nbsp;至 1000 的范围内；</li>\n\t<li>操作数将在 1 至 1000 的范围内；</li>\n\t<li>请不要使用内置的队列库。</li>\n</ul>\n</div>","l":"中等","s":"/**\n * Initialize your data structure here. Set the size \nof the queue to be k.\n * @param {number} k\n */\nvar MyCircularQueue = function(k) {\n \n};\n \n/**\n * Insert an element into the circular queue. Return \ntrue if the operation is successful. \n * @param {number} value\n * @return {boolean}\n */\nMyCircularQueue.prototype.enQueue = function(value) {\n \n};\n \n/**\n * Delete an element from the circular queue. Return \ntrue if the operation is successful.\n * @return {boolean}\n */\nMyCircularQueue.prototype.deQueue = function() {\n ","lang":"JavaScript","href":"https://leetcode-cn.com/problems/design-circular-queue/","bb":{"x":490,"y":50}}

