{"ls":[{"s":"class Solution {\n \n    public Solution(int[] nums) {\n \n    }\n    \n    /** Resets the array to its original \nconfiguration and return it. */\n    public int[] reset() {\n \n    }\n    \n    /** Returns a random shuffling of the array. */\n    public int[] shuffle() {\n \n    }\n}\n \n/**\n * Your Solution object will be instantiated and \ncalled as such:\n * Solution obj = new Solution(nums);\n * int[] param_1 = obj.reset();\n * int[] param_2 = obj.shuffle();\n */","lang":"Java"},{"s":"class Solution(object):\n \n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        \n \n    def reset(self):\n        \"\"\"\n        Resets the array to its original \nconfiguration and return it.\n        :rtype: List[int]\n        \"\"\"\n        \n \n    def shuffle(self):\n        \"\"\"\n        Returns a random shuffling of the array.\n        :rtype: List[int]\n        \"\"\"\n        \n \n \n# Your Solution object will be instantiated and \ncalled as such:","lang":"Python"},{"s":"class Solution:\n \n    def __init__(self, nums: List[int]):\n        \n \n    def reset(self) -> List[int]:\n        \"\"\"\n        Resets the array to its original \nconfiguration and return it.\n        \"\"\"\n        \n \n    def shuffle(self) -> List[int]:\n        \"\"\"\n        Returns a random shuffling of the array.\n        \"\"\"\n        \n \n \n# Your Solution object will be instantiated and \ncalled as such:\n# obj = Solution(nums)\n# param_1 = obj.reset()\n# param_2 = obj.shuffle()","lang":"Python3"},{"s":"typedef struct {\n    \n} Solution;\n \n \nSolution* solutionCreate(int* nums, int numsSize) {\n    \n}\n \n/** Resets the array to its original configuration \nand return it. */\nint* solutionReset(Solution* obj, int* retSize) {\n  \n}\n \n/** Returns a random shuffling of the array. */\nint* solutionShuffle(Solution* obj, int* retSize) {\n  \n}\n \nvoid solutionFree(Solution* obj) {\n    \n}\n \n/**\n * Your Solution struct will be instantiated and ","lang":"C"},{"s":"public class Solution {\n \n    public Solution(int[] nums) {\n \n    }\n    \n    /** Resets the array to its original \nconfiguration and return it. */\n    public int[] Reset() {\n \n    }\n    \n    /** Returns a random shuffling of the array. */\n    public int[] Shuffle() {\n \n    }\n}\n \n/**\n * Your Solution object will be instantiated and \ncalled as such:\n * Solution obj = new Solution(nums);\n * int[] param_1 = obj.Reset();\n * int[] param_2 = obj.Shuffle();\n */","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n */\nvar Solution = function(nums) {\n \n};\n \n/**\n * Resets the array to its original configuration \nand return it.\n * @return {number[]}\n */\nSolution.prototype.reset = function() {\n \n};\n \n/**\n * Returns a random shuffling of the array.\n * @return {number[]}\n */\nSolution.prototype.shuffle = function() {\n \n};\n \n/**\n * Your Solution object will be instantiated and ","lang":"JavaScript"}],"page":"384/1581","h":"384. 打乱数组","d":"<div class=\"notranslate\"><p>打乱一个没有重复元素的数组。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>// 以数字集合 1, 2 和 3 初始化数组。\nint[] nums = {1,2,3};\nSolution solution = new Solution(nums);\n\n// 打乱数组 [1,2,3] 并返回结果。任何 [1,2,3]的排列返回的概率应该相同。\nsolution.shuffle();\n\n// 重设数组到它的初始状态[1,2,3]。\nsolution.reset();\n\n// 随机返回数组[1,2,3]打乱后的结果。\nsolution.shuffle();\n</pre>\n</div>","l":"中等","s":"/**\n * @param {number[]} nums\n */\nvar Solution = function(nums) {\n \n};\n \n/**\n * Resets the array to its original configuration \nand return it.\n * @return {number[]}\n */\nSolution.prototype.reset = function() {\n \n};\n \n/**\n * Returns a random shuffling of the array.\n * @return {number[]}\n */\nSolution.prototype.shuffle = function() {\n \n};\n \n/**\n * Your Solution object will be instantiated and ","lang":"JavaScript","href":"https://leetcode-cn.com/problems/shuffle-an-array/","bb":{"x":490,"y":50}}

