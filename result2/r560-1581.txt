{"ls":[{"s":"class Solution:\n    def subarraySum(self, nums: List[int], k: int) \n-> int:","lang":"Python3"},{"s":"int subarraySum(int* nums, int numsSize, int k){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int SubarraySum(int[] nums, int k) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar subarraySum = function(nums, k) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef subarray_sum(nums, k)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func subarraySum(_ nums: [Int], _ k: Int) -> Int \n{\n        \n    }\n}","lang":"Swift"}],"page":"560/1581","h":"560. 和为K的子数组","d":"<div class=\"notranslate\"><p>给定一个整数数组和一个整数&nbsp;<strong>k，</strong>你需要找到该数组中和为&nbsp;<strong>k&nbsp;</strong>的连续的子数组的个数。</p>\n\n<p><strong>示例 1 :</strong></p>\n\n<pre><strong>输入:</strong>nums = [1,1,1], k = 2\n<strong>输出:</strong> 2 , [1,1] 与 [1,1] 为两种不同的情况。\n</pre>\n\n<p><strong>说明 :</strong></p>\n\n<ol>\n\t<li>数组的长度为 [1, 20,000]。</li>\n\t<li>数组中元素的范围是 [-1000, 1000] ，且整数&nbsp;<strong>k&nbsp;</strong>的范围是&nbsp;[-1e7, 1e7]。</li>\n</ol>\n</div>","l":"中等","s":"func subarraySum(nums []int, k int) int {\n \n}","lang":"Go","href":"https://leetcode-cn.com/problems/subarray-sum-equals-k/","bb":{"x":490,"y":50}}

