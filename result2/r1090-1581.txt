{"ls":[{"s":"class Solution {\n    public int largestValsFromLabels(int[] values, \nint[] labels, int num_wanted, int use_limit) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def largestValsFromLabels(self, values, labels, \nnum_wanted, use_limit):\n        \"\"\"\n        :type values: List[int]\n        :type labels: List[int]\n        :type num_wanted: int\n        :type use_limit: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def largestValsFromLabels(self, values: List[int]\n, labels: List[int], num_wanted: int, use_limit: int)\n -> int:","lang":"Python3"},{"s":"int largestValsFromLabels(int* values, int \nvaluesSize, int* labels, int labelsSize, int \nnum_wanted, int use_limit){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int LargestValsFromLabels(int[] values, \nint[] labels, int num_wanted, int use_limit) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} values\n * @param {number[]} labels\n * @param {number} num_wanted\n * @param {number} use_limit\n * @return {number}\n */\nvar largestValsFromLabels = function(values, labels, \nnum_wanted, use_limit) {\n \n};","lang":"JavaScript"}],"page":"1090/1581","h":"1090. 受标签影响的最大值","d":"<div class=\"notranslate\"><p>我们有一个项的集合，其中第&nbsp;<code>i</code>&nbsp;项的值为&nbsp;<code>values[i]</code>，标签为&nbsp;<code>labels[i]</code>。</p>\n\n<p>我们从这些项中选出一个子集&nbsp;<code>S</code>，这样一来：</p>\n\n<ul>\n\t<li><code>|S| &lt;= num_wanted</code></li>\n\t<li>对于任意的标签 <code>L</code>，子集 <code>S</code> 中标签为 <code>L</code>&nbsp;的项的数目总满足&nbsp;<code>&lt;= use_limit</code>。</li>\n</ul>\n\n<p>返回子集&nbsp;<code>S</code>&nbsp;的最大可能的&nbsp;<strong>和</strong>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>values = [5,4,3,2,1], labels = [1,1,2,2,3], <code>num_wanted </code>= 3, use_limit = 1\n<strong>输出：</strong>9\n<strong>解释：</strong>选出的子集是第一项，第三项和第五项。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>values = [5,4,3,2,1], labels = [1,3,3,3,2], <code>num_wanted </code>= 3, use_limit = 2\n<strong>输出：</strong>12\n<strong>解释：</strong>选出的子集是第一项，第二项和第三项。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>values = [9,8,8,7,6], labels = [0,0,0,1,1], <code>num_wanted </code>= 3, use_limit = 1\n<strong>输出：</strong>16\n<strong>解释：</strong>选出的子集是第一项和第四项。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>values = [9,8,8,7,6], labels = [0,0,0,1,1], <code>num_wanted </code>= 3, use_limit = 2\n<strong>输出：</strong>24\n<strong>解释：</strong>选出的子集是第一项，第二项和第四项。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= values.length == labels.length &lt;= 20000</code></li>\n\t<li><code>0 &lt;= values[i], labels[i]&nbsp;&lt;= 20000</code></li>\n\t<li><code>1 &lt;= num_wanted, use_limit&nbsp;&lt;= values.length</code></li>\n</ol>\n</div>","l":"中等","s":"# @param {Integer[]} values\n# @param {Integer[]} labels\n# @param {Integer} num_wanted\n# @param {Integer} use_limit\n# @return {Integer}\ndef largest_vals_from_labels(values, labels, \nnum_wanted, use_limit)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/largest-values-from-labels/","bb":{"x":490,"y":50}}

