{"ls":[{"s":"class Solution {\n    public int maxProduct(String[] words) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def maxProduct(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def maxProduct(self, words: List[str]) -> int:","lang":"Python3"},{"s":"int maxProduct(char ** words, int wordsSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int MaxProduct(string[] words) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string[]} words\n * @return {number}\n */\nvar maxProduct = function(words) {\n \n};","lang":"JavaScript"}],"page":"318/1581","h":"318. 最大单词长度乘积","d":"<div class=\"notranslate\"><p>给定一个字符串数组&nbsp;<code>words</code>，找到&nbsp;<code>length(word[i]) * length(word[j])</code>&nbsp;的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> <code>[\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]</code>\n<strong>输出: </strong><code>16 \n<strong>解释:</strong> 这两个单词为<strong> </strong></code><code>\"abcw\", \"xtfn\"</code>。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> <code>[\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]</code>\n<strong>输出: </strong><code>4 \n<strong>解释: </strong></code>这两个单词为 <code>\"ab\", \"cd\"</code>。</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> <code>[\"a\",\"aa\",\"aaa\",\"aaaa\"]</code>\n<strong>输出: </strong><code>0 \n<strong>解释: </strong>不存在这样的两个单词。</code></pre>\n</div>","l":"中等","s":"/**\n * @param {string[]} words\n * @return {number}\n */\nvar maxProduct = function(words) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/maximum-product-of-word-lengths/","bb":{"x":490,"y":50}}

