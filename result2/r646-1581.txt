{"ls":[{"s":"class Solution {\n    public int findLongestChain(int[][] pairs) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def findLongestChain(self, pairs):\n        \"\"\"\n        :type pairs: List[List[int]]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def findLongestChain(self, pairs: List[List[int]]\n) -> int:","lang":"Python3"},{"s":"int findLongestChain(int** pairs, int pairsSize, \nint* pairsColSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int FindLongestChain(int[][] pairs) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} pairs\n * @return {number}\n */\nvar findLongestChain = function(pairs) {\n \n};","lang":"JavaScript"}],"page":"646/1581","h":"646. 最长数对链","d":"<div class=\"notranslate\"><p>给出&nbsp;<code>n</code>&nbsp;个数对。&nbsp;在每一个数对中，第一个数字总是比第二个数字小。</p>\n\n<p>现在，我们定义一种跟随关系，当且仅当&nbsp;<code>b &lt; c</code>&nbsp;时，数对<code>(c, d)</code>&nbsp;才可以跟在&nbsp;<code>(a, b)</code>&nbsp;后面。我们用这种形式来构造一个数对链。</p>\n\n<p>给定一个对数集合，找出能够形成的最长数对链的长度。你不需要用到所有的数对，你可以以任何顺序选择其中的一些数对来构造。</p>\n\n<p><strong>示例 :</strong></p>\n\n<pre><strong>输入:</strong> [[1,2], [2,3], [3,4]]\n<strong>输出:</strong> 2\n<strong>解释:</strong> 最长的数对链是 [1,2] -&gt; [3,4]\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li>给出数对的个数在&nbsp;[1, 1000] 范围内。</li>\n</ol>\n</div>","l":"中等","s":"/**\n * @param {number[][]} pairs\n * @return {number}\n */\nvar findLongestChain = function(pairs) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/maximum-length-of-pair-chain/","bb":{"x":490,"y":50}}

