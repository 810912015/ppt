{"ls":[{"s":"class Foo {\n \n    public Foo() {\n        \n    }\n \n    public void first(Runnable printFirst) throws \nInterruptedException {\n        \n        // printFirst.run() outputs \"first\". Do not \nchange or remove this line.\n        printFirst.run();\n    }\n \n    public void second(Runnable printSecond) throws \nInterruptedException {\n        \n        // printSecond.run() outputs \"second\". Do \nnot change or remove this line.\n        printSecond.run();\n    }\n \n    public void third(Runnable printThird) throws \nInterruptedException {\n        \n        // printThird.run() outputs \"third\". Do not ","lang":"Java"},{"s":"class Foo(object):\n    def __init__(self):\n        pass\n \n \n    def first(self, printFirst):\n        \"\"\"\n        :type printFirst: method\n        :rtype: void\n        \"\"\"\n        \n        # printFirst() outputs \"first\". Do not \nchange or remove this line.\n        printFirst()\n \n \n    def second(self, printSecond):\n        \"\"\"\n        :type printSecond: method\n        :rtype: void\n        \"\"\"\n        \n        # printSecond() outputs \"second\". Do not \nchange or remove this line.\n        printSecond()\n            ","lang":"Python"},{"s":"class Foo:\n    def __init__(self):\n        pass\n \n \n    def first(self, printFirst: 'Callable[[], None]')\n -> None:\n        \n        # printFirst() outputs \"first\". Do not \nchange or remove this line.\n        printFirst()\n \n \n    def second(self, printSecond: 'Callable[[], None]\n') -> None:\n        \n        # printSecond() outputs \"second\". Do not \nchange or remove this line.\n        printSecond()\n \n \n    def third(self, printThird: 'Callable[[], None]')\n -> None:\n        \n        # printThird() outputs \"third\". Do not \nchange or remove this line.","lang":"Python3"},{"s":"typedef struct {\n    // User defined data may be declared here.\n    \n} Foo;\n \nFoo* fooCreate() {\n    Foo* obj = (Foo*) malloc(sizeof(Foo));\n    \n    // Initialize user defined data here.\n    \n    return obj;\n}\n \nvoid first(Foo* obj) {\n    \n    // printFirst() outputs \"first\". Do not change \nor remove this line.\n    printFirst();\n}\n \nvoid second(Foo* obj) {\n    \n    // printSecond() outputs \"second\". Do not change \nor remove this line.\n    printSecond();\n}","lang":"C"},{"s":"public class Foo {\n \n    public Foo() {\n        \n    }\n \n    public void First(Action printFirst) {\n        \n        // printFirst() outputs \"first\". Do not \nchange or remove this line.\n        printFirst();\n    }\n \n    public void Second(Action printSecond) {\n        \n        // printSecond() outputs \"second\". Do not \nchange or remove this line.\n        printSecond();\n    }\n \n    public void Third(Action printThird) {\n        \n        // printThird() outputs \"third\". Do not \nchange or remove this line.\n        printThird();\n    }","lang":"C#"},{"s":"public class Foo {\n \n    public Foo() {\n        \n    }\n \n    public void First(Action printFirst) {\n        \n        // printFirst() outputs \"first\". Do not \nchange or remove this line.\n        printFirst();\n    }\n \n    public void Second(Action printSecond) {\n        \n        // printSecond() outputs \"second\". Do not \nchange or remove this line.\n        printSecond();\n    }\n \n    public void Third(Action printThird) {\n        \n        // printThird() outputs \"third\". Do not \nchange or remove this line.\n        printThird();\n    }","lang":"C#"}],"page":"1114/1581","h":"1114. 按序打印","d":"<div class=\"notranslate\"><p>我们提供了一个类：</p>\n\n<pre>public class Foo {\n&nbsp; public void one() { print(\"one\"); }\n&nbsp; public void two() { print(\"two\"); }\n&nbsp; public void three() { print(\"three\"); }\n}\n</pre>\n\n<p>三个不同的线程将会共用一个&nbsp;<code>Foo</code>&nbsp;实例。</p>\n\n<ul>\n\t<li>线程 A 将会调用 <code>one()</code> 方法</li>\n\t<li>线程 B 将会调用&nbsp;<code>two()</code> 方法</li>\n\t<li>线程 C 将会调用 <code>three()</code> 方法</li>\n</ul>\n\n<p>请设计修改程序，以确保 <code>two()</code> 方法在 <code>one()</code> 方法之后被执行，<code>three()</code> 方法在 <code>two()</code> 方法之后被执行。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,3]\n<strong>输出:</strong> \"onetwothree\"\n<strong>解释:</strong> \n有三个线程会被异步启动。\n输入 [1,2,3] 表示线程 A 将会调用 one() 方法，线程 B 将会调用 two() 方法，线程 C 将会调用 three() 方法。\n正确的输出是 \"onetwothree\"。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [1,3,2]\n<strong>输出:</strong> \"onetwothree\"\n<strong>解释:</strong> \n输入 [1,3,2] 表示线程 A 将会调用 one() 方法，线程 B 将会调用 three() 方法，线程 C 将会调用 two() 方法。\n正确的输出是 \"onetwothree\"。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意:</strong></p>\n\n<p>尽管输入中的数字似乎暗示了顺序，但是我们并不保证线程在操作系统中的调度顺序。</p>\n\n<p>你看到的输入格式主要是为了确保测试的全面性。</p>\n</div>","l":"简单","s":"class Foo {\npublic:\n    Foo() {\n        \n    }\n \n    void first(function<void()> printFirst) {\n        \n        // printFirst() outputs \"first\". Do not \nchange or remove this line.\n        printFirst();\n    }\n \n    void second(function<void()> printSecond) {\n        \n        // printSecond() outputs \"second\". Do not \nchange or remove this line.\n        printSecond();\n    }\n \n    void third(function<void()> printThird) {\n        \n        // printThird() outputs \"third\". Do not \nchange or remove this line.\n        printThird();\n    }","lang":"C++","href":"https://leetcode-cn.com/problems/print-in-order/","bb":{"x":490,"y":50}}

