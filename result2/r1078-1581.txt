{"ls":[{"s":"/**\n * @param {string} text\n * @param {string} first\n * @param {string} second\n * @return {string[]}\n */\nvar findOcurrences = function(text, first, second) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} text\n# @param {String} first\n# @param {String} second\n# @return {String[]}\ndef find_ocurrences(text, first, second)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func findOcurrences(_ text: String, _ first: \nString, _ second: String) -> [String] {\n        \n    }\n}","lang":"Swift"},{"s":"func findOcurrences(text string, first string, \nsecond string) []string {\n \n}","lang":"Go"},{"s":"object Solution {\n    def findOcurrences(text: String, first: String, \nsecond: String): Array[String] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun findOcurrences(text: String, first: String, \nsecond: String): Array<String> {\n \n    }\n}","lang":"Kotlin"}],"page":"1078/1581","h":"1078. Bigram 分词","d":"<div class=\"notranslate\"><p>给出第一个词&nbsp;<code>first</code> 和第二个词&nbsp;<code>second</code>，考虑在某些文本&nbsp;<code>text</code>&nbsp;中可能以 \"<code>first second third</code>\" 形式出现的情况，其中&nbsp;<code>second</code>&nbsp;紧随&nbsp;<code>first</code>&nbsp;出现，<code>third</code>&nbsp;紧随&nbsp;<code>second</code>&nbsp;出现。</p>\n\n<p>对于每种这样的情况，将第三个词 \"<code>third</code>\" 添加到答案中，并返回答案。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>text = \"alice is a good girl she is a good student\", first = \"a\", second = \"good\"\n<strong>输出：</strong>[\"girl\",\"student\"]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>text = \"we will we will rock you\", first = \"we\", second = \"will\"\n<strong>输出：</strong>[\"we\",\"rock\"]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= text.length &lt;= 1000</code></li>\n\t<li><code>text</code>&nbsp;由一些用空格分隔的单词组成，每个单词都由小写英文字母组成</li>\n\t<li><code>1 &lt;= first.length, second.length &lt;= 10</code></li>\n\t<li><code>first</code> 和&nbsp;<code>second</code>&nbsp;由小写英文字母组成</li>\n</ol>\n</div>","l":"简单","s":"impl Solution {\n    pub fn find_ocurrences(text: String, first: \nString, second: String) -> Vec<String> {\n        \n    }\n}","lang":"Rust","href":"https://leetcode-cn.com/problems/occurrences-after-bigram/","bb":{"x":490,"y":50}}

