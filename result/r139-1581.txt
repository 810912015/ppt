{"ls":[{"s":"class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) \n-> bool:","lang":"Python3"},{"s":"bool wordBreak(char * s, char ** wordDict, int \nwordDictSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public bool WordBreak(string s, IList<string> \nwordDict) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} s\n * @param {string[]} wordDict\n * @return {boolean}\n */\nvar wordBreak = function(s, wordDict) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} s\n# @param {String[]} word_dict\n# @return {Boolean}\ndef word_break(s, word_dict)\n \nend","lang":"Ruby"}],"page":"139/1581","h":"139. 单词拆分","d":"<div class=\"notranslate\"><p>给定一个<strong>非空</strong>字符串 <em>s</em> 和一个包含<strong>非空</strong>单词列表的字典 <em>wordDict</em>，判定&nbsp;<em>s</em> 是否可以被空格拆分为一个或多个在字典中出现的单词。</p>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>拆分时可以重复使用字典中的单词。</li>\n\t<li>你可以假设字典中没有重复的单词。</li>\n</ul>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入:</strong> s = \"leetcode\", wordDict = [\"leet\", \"code\"]\n<strong>输出:</strong> true\n<strong>解释:</strong> 返回 true 因为 \"leetcode\" 可以被拆分成 \"leet code\"。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入:</strong> s = \"applepenapple\", wordDict = [\"apple\", \"pen\"]\n<strong>输出:</strong> true\n<strong>解释:</strong> 返回 true 因为 <code>\"</code>applepenapple<code>\"</code> 可以被拆分成 <code>\"</code>apple pen apple<code>\"</code>。\n&nbsp;    注意你可以重复使用字典中的单词。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入:</strong> s = \"catsandog\", wordDict = [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"]\n<strong>输出:</strong> false\n</pre>\n</div>","l":"中等","s":"class Solution {\n    func wordBreak(_ s: String, _ wordDict: [String])\n -> Bool {\n \n    }\n}","lang":"Swift","href":"https://leetcode-cn.com/problems/word-break/","bb":{"x":490,"y":50}}

