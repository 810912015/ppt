{"ls":[{"s":"class Solution {\n    public int maximalSquare(char[][] matrix) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def maximalSquare(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def maximalSquare(self, matrix: List[List[str]]) \n-> int:","lang":"Python3"},{"s":"int maximalSquare(char** matrix, int matrixSize, \nint* matrixColSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int MaximalSquare(char[][] matrix) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {character[][]} matrix\n * @return {number}\n */\nvar maximalSquare = function(matrix) {\n \n};","lang":"JavaScript"}],"page":"221/1581","h":"221. 最大正方形","d":"<div class=\"notranslate\"><p>在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入: \n</strong>\n1 0 1 0 0\n1 0 <strong>1 1</strong> 1\n1 1 <strong>1 1 </strong>1\n1 0 0 1 0\n\n<strong>输出: </strong>4</pre>\n</div>","l":"中等","s":"/**\n * @param {character[][]} matrix\n * @return {number}\n */\nvar maximalSquare = function(matrix) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/maximal-square/","bb":{"x":490,"y":50}}

