{"ls":[{"s":"class Solution {\n    public List<List<String>> solveNQueens(int n) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]\n:","lang":"Python3"},{"s":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as \n*returnColumnSizes array.\n * Note: Both returned array and *columnSizes array \nmust be malloced, assume caller calls free().\n */\nchar *** solveNQueens(int n, int* returnSize, int** \nreturnColumnSizes){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<IList<string>> SolveNQueens(int n) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} n\n * @return {string[][]}\n */\nvar solveNQueens = function(n) {\n \n};","lang":"JavaScript"}],"page":"51/1581","h":"51. N皇后","d":"<div class=\"notranslate\"><p><em>n&nbsp;</em>皇后问题研究的是如何将 <em>n</em>&nbsp;个皇后放置在 <em>n</em>×<em>n</em> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/8-queens.png\"></p>\n\n<p><small>上图为 8 皇后问题的一种解法。</small></p>\n\n<p>给定一个整数 <em>n</em>，返回所有不同的&nbsp;<em>n&nbsp;</em>皇后问题的解决方案。</p>\n\n<p>每一种解法包含一个明确的&nbsp;<em>n</em> 皇后问题的棋子放置方案，该方案中 <code>'Q'</code> 和 <code>'.'</code> 分别代表了皇后和空位。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> 4\n<strong>输出:</strong> [\n [\".Q..\",  // 解法 1\n  \"...Q\",\n  \"Q...\",\n  \"..Q.\"],\n\n [\"..Q.\",  // 解法 2\n  \"Q...\",\n  \"...Q\",\n  \".Q..\"]\n]\n<strong>解释:</strong> 4 皇后问题存在两个不同的解法。\n</pre>\n</div>","l":"困难","s":"/**\n * @param {number} n\n * @return {string[][]}\n */\nvar solveNQueens = function(n) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/n-queens/","bb":{"x":490,"y":50}}

