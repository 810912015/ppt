{"ls":[{"s":"class Solution {\n    public List<Integer> getRow(int rowIndex) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def getRow(self, rowIndex: int) -> List[int]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, assume \ncaller calls free().\n */\nint* getRow(int rowIndex, int* returnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<int> GetRow(int rowIndex) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} rowIndex\n * @return {number[]}\n */\nvar getRow = function(rowIndex) {\n \n};","lang":"JavaScript"}],"page":"119/1581","h":"119. 杨辉三角 II","d":"<div class=\"notranslate\"><p>给定一个非负索引&nbsp;<em>k</em>，其中 <em>k</em>&nbsp;≤&nbsp;33，返回杨辉三角的第 <em>k </em>行。</p>\n\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\" alt=\"\"></p>\n\n<p><small>在杨辉三角中，每个数是它左上方和右上方的数的和。</small></p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> 3\n<strong>输出:</strong> [1,3,3,1]\n</pre>\n\n<p><strong>进阶：</strong></p>\n\n<p>你可以优化你的算法到 <em>O</em>(<em>k</em>) 空间复杂度吗？</p>\n</div>","l":"简单","s":"# @param {Integer} row_index\n# @return {Integer[]}\ndef get_row(row_index)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/pascals-triangle-ii/","bb":{"x":490,"y":50}}

