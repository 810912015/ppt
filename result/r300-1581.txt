{"ls":[{"s":"class Solution {\n    public int lengthOfLIS(int[] nums) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def lengthOfLIS(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:","lang":"Python3"},{"s":"int lengthOfLIS(int* nums, int numsSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int LengthOfLIS(int[] nums) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar lengthOfLIS = function(nums) {\n \n};","lang":"JavaScript"}],"page":"300/1581","h":"300. 最长上升子序列","d":"<div class=\"notranslate\"><p>给定一个无序的整数数组，找到其中最长上升子序列的长度。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> <code>[10,9,2,5,3,7,101,18]\n</code><strong>输出: </strong>4 \n<strong>解释: </strong>最长的上升子序列是&nbsp;<code>[2,3,7,101]，</code>它的长度是 <code>4</code>。</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。</li>\n\t<li>你算法的时间复杂度应该为&nbsp;O(<em>n<sup>2</sup></em>) 。</li>\n</ul>\n\n<p><strong>进阶:</strong> 你能将算法的时间复杂度降低到&nbsp;O(<em>n</em> log <em>n</em>) 吗?</p>\n</div>","l":"中等","s":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar lengthOfLIS = function(nums) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/longest-increasing-subsequence/","bb":{"x":490,"y":50}}

