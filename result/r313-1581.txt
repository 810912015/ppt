{"ls":[{"s":"class Solution {\n    public int nthSuperUglyNumber(int n, int[] \nprimes) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def nthSuperUglyNumber(self, n, primes):\n        \"\"\"\n        :type n: int\n        :type primes: List[int]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def nthSuperUglyNumber(self, n: int, primes: List\n[int]) -> int:","lang":"Python3"},{"s":"int nthSuperUglyNumber(int n, int* primes, int \nprimesSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int NthSuperUglyNumber(int n, int[] \nprimes) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} n\n * @param {number[]} primes\n * @return {number}\n */\nvar nthSuperUglyNumber = function(n, primes) {\n \n};","lang":"JavaScript"}],"page":"313/1581","h":"313. 超级丑数","d":"<div class=\"notranslate\"><p>编写一段程序来查找第 <code><em>n</em></code> 个超级丑数。</p>\n\n<p>超级丑数是指其所有质因数都是长度为&nbsp;<code>k</code>&nbsp;的质数列表&nbsp;<code>primes</code>&nbsp;中的正整数。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> n = 12, <code>primes</code> = <code>[2,7,13,19]</code>\n<strong>输出:</strong> 32 \n<strong>解释: </strong>给定长度为 4 的质数列表 primes = [2,7,13,19]，前 12 个超级丑数序列为：[1,2,4,7,8,13,14,16,19,26,28,32] 。</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li><code>1</code>&nbsp;是任何给定&nbsp;<code>primes</code>&nbsp;的超级丑数。</li>\n\t<li>&nbsp;给定&nbsp;<code>primes</code>&nbsp;中的数字以升序排列。</li>\n\t<li>0 &lt; <code>k</code> ≤ 100, 0 &lt; <code>n</code> ≤ 10<sup>6</sup>, 0 &lt; <code>primes[i]</code> &lt; 1000 。</li>\n\t<li>第&nbsp;<code>n</code>&nbsp;个超级丑数确保在 32 位有符整数范围内。</li>\n</ul>\n</div>","l":"中等","s":"/**\n * @param {number} n\n * @param {number[]} primes\n * @return {number}\n */\nvar nthSuperUglyNumber = function(n, primes) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/super-ugly-number/","bb":{"x":490,"y":50}}

