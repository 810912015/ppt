{"ls":[{"s":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node next;\n \n    public Node() {}\n    \n    public Node(int _val) {\n        val = _val;\n    }\n \n    public Node(int _val, Node _left, Node _right, \nNode _next) {\n        val = _val;\n        left = _left;\n        right = _right;\n        next = _next;\n    }\n};\n*/\nclass Solution {\n    public Node connect(Node root) {\n        ","lang":"Java"},{"s":"\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val=0, left=None, right=None, \nnext=None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n\"\"\"\nclass Solution(object):\n    def connect(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: Node\n        \"\"\"","lang":"Python"},{"s":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val: int = 0, left: 'Node' = \nNone, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n\"\"\"\nclass Solution:\n    def connect(self, root: 'Node') -> 'Node':","lang":"Python3"},{"s":"/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node next;\n \n    public Node() {}\n \n    public Node(int _val) {\n        val = _val;\n    }\n \n    public Node(int _val, Node _left, Node _right, \nNode _next) {\n        val = _val;\n        left = _left;\n        right = _right;\n        next = _next;\n    }\n}\n*/\npublic class Solution {\n    public Node Connect(Node root) {\n        ","lang":"C#"},{"s":"/**\n * // Definition for a Node.\n * function Node(val, left, right, next) {\n *    this.val = val === undefined ? null : val;\n *    this.left = left === undefined ? null : left;\n *    this.right = right === undefined ? null : \nright;\n *    this.next = next === undefined ? null : next;\n * };\n */\n/**\n * @param {Node} root\n * @return {Node}\n */\nvar connect = function(root) {\n    \n};","lang":"JavaScript"},{"s":"/**\n * Definition for a Node.\n * public class Node {\n *     public var val: Int\n *     public var left: Node?\n *     public var right: Node?\n *     public var next: Node?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *         self.next = nil\n *     }\n * }\n */\n \nclass Solution {\n    func connect(_ root: Node?) -> Node? {\n        \n    }\n}","lang":"Swift"}],"page":"117/1581","h":"117. 填充每个节点的下一个右侧节点指针 II","d":"<div class=\"notranslate\"><p>给定一个二叉树</p>\n\n<pre>struct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}</pre>\n\n<p>填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 <code>NULL</code>。</p>\n\n<p>初始状态下，所有&nbsp;next 指针都被设置为 <code>NULL</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong></p>\n\n<ul>\n\t<li>你只能使用常量级额外空间。</li>\n\t<li>使用递归解题也符合要求，本题中递归程序占用的栈空间不算做额外的空间复杂度。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<p><img style=\"height: 218px; width: 640px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/15/117_sample.png\" alt=\"\"></p>\n\n<pre><strong>输入</strong>：root = [1,2,3,4,5,null,7]\n<strong>输出：</strong>[1,#,2,3,#,4,5,7,#]\n<strong>解释：</strong>给定二叉树如图 A 所示，你的函数应该填充它的每个 next 指针，以指向其下一个右侧节点，如图 B 所示。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>树中的节点数小于 <code>6000</code></li>\n\t<li><code>-100&nbsp;&lt;= node.val &lt;= 100</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n</div>","l":"中等","s":"/**\n * Definition for a Node.\n * public class Node {\n *     public var val: Int\n *     public var left: Node?\n *     public var right: Node?\n *     public var next: Node?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *         self.next = nil\n *     }\n * }\n */\n \nclass Solution {\n    func connect(_ root: Node?) -> Node? {\n        \n    }\n}","lang":"Swift","href":"https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node-ii/","bb":{"x":490,"y":50}}

