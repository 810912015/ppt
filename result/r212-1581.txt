{"ls":[{"s":"class Solution {\n    public List<String> findWords(char[][] board, \nString[] words) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def findWords(self, board: List[List[str]], \nwords: List[str]) -> List[str]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, assume \ncaller calls free().\n */\nchar ** findWords(char** board, int boardSize, int* \nboardColSize, char ** words, int wordsSize, int* \nreturnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<string> FindWords(char[][] board, \nstring[] words) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {character[][]} board\n * @param {string[]} words\n * @return {string[]}\n */\nvar findWords = function(board, words) {\n \n};","lang":"JavaScript"}],"page":"212/1581","h":"212. 单词搜索 II","d":"<div class=\"notranslate\"><p>给定一个二维网格&nbsp;<strong>board&nbsp;</strong>和一个字典中的单词列表 <strong>words</strong>，找出所有同时在二维网格和字典中出现的单词。</p>\n\n<p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母在一个单词中不允许被重复使用。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> \n<strong>words</strong> = <code>[\"oath\",\"pea\",\"eat\",\"rain\"]</code> and <strong>board </strong>=\n[\n  ['<strong>o</strong>','<strong>a</strong>','a','n'],\n  ['e','<strong>t</strong>','<strong>a</strong>','<strong>e</strong>'],\n  ['i','<strong>h</strong>','k','r'],\n  ['i','f','l','v']\n]\n\n<strong>输出:&nbsp;</strong><code>[\"eat\",\"oath\"]</code></pre>\n\n<p><strong>说明:</strong><br>\n你可以假设所有输入都由小写字母 <code>a-z</code>&nbsp;组成。</p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li>你需要优化回溯算法以通过更大数据量的测试。你能否早点停止回溯？</li>\n\t<li>如果当前单词不存在于所有单词的前缀中，则可以立即停止回溯。什么样的数据结构可以有效地执行这样的操作？散列表是否可行？为什么？ 前缀树如何？如果你想学习如何实现一个基本的前缀树，请先查看这个问题： <a href=\"/problems/implement-trie-prefix-tree/description/\">实现Trie（前缀树）</a>。</li>\n</ul>\n</div>","l":"困难","s":"/**\n * @param {character[][]} board\n * @param {string[]} words\n * @return {string[]}\n */\nvar findWords = function(board, words) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/word-search-ii/","bb":{"x":490,"y":50}}

