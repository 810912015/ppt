{"ls":[{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public void recoverTree(TreeNode root) {\n \n    }\n}","lang":"Java"},{"s":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n \nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify \nroot in-place instead.\n        \"\"\"","lang":"Python"},{"s":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n \nclass Solution:\n    def recoverTree(self, root: TreeNode) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place \ninstead.\n        \"\"\"","lang":"Python3"},{"s":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n \n \nvoid recoverTree(struct TreeNode* root){\n \n}","lang":"C"},{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public void RecoverTree(TreeNode root) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {void} Do not return anything, modify \nroot in-place instead.\n */\nvar recoverTree = function(root) {\n \n};","lang":"JavaScript"}],"page":"99/1581","h":"99. 恢复二叉搜索树","d":"<div class=\"notranslate\"><p>二叉搜索树中的两个节点被错误地交换。</p>\n\n<p>请在不改变其结构的情况下，恢复这棵树。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> [1,3,null,null,2]\n\n&nbsp;  1\n&nbsp; /\n&nbsp;3\n&nbsp; \\\n&nbsp;  2\n\n<strong>输出:</strong> [3,1,null,null,2]\n\n&nbsp;  3\n&nbsp; /\n&nbsp;1\n&nbsp; \\\n&nbsp;  2\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> [3,1,4,null,null,2]\n\n  3\n / \\\n1   4\n&nbsp;  /\n&nbsp; 2\n\n<strong>输出:</strong> [2,1,4,null,null,3]\n\n  2\n / \\\n1   4\n&nbsp;  /\n &nbsp;3</pre>\n\n<p><strong>进阶:</strong></p>\n\n<ul>\n\t<li>使用 O(<em>n</em>) 空间复杂度的解法很容易实现。</li>\n\t<li>你能想出一个只使用常数空间的解决方案吗？</li>\n</ul>\n</div>","l":"困难","s":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {void} Do not return anything, modify \nroot in-place instead.\n */\nvar recoverTree = function(root) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/recover-binary-search-tree/","bb":{"x":490,"y":50}}

