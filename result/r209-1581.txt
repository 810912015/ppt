{"ls":[{"s":"class Solution {\n    public int minSubArrayLen(int s, int[] nums) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def minSubArrayLen(self, s, nums):\n        \"\"\"\n        :type s: int\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def minSubArrayLen(self, s: int, nums: List[int])\n -> int:","lang":"Python3"},{"s":"int minSubArrayLen(int s, int* nums, int numsSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int MinSubArrayLen(int s, int[] nums) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} s\n * @param {number[]} nums\n * @return {number}\n */\nvar minSubArrayLen = function(s, nums) {\n \n};","lang":"JavaScript"}],"page":"209/1581","h":"209. 长度最小的子数组","d":"<div class=\"notranslate\"><p>给定一个含有&nbsp;<strong>n&nbsp;</strong>个正整数的数组和一个正整数&nbsp;<strong>s ，</strong>找出该数组中满足其和<strong> ≥ s </strong>的长度最小的连续子数组<strong>。</strong>如果不存在符合条件的连续子数组，返回 0。</p>\n\n<p><strong>示例:&nbsp;</strong></p>\n\n<pre><strong>输入:</strong> <code>s = 7, nums = [2,3,1,2,4,3]</code>\n<strong>输出:</strong> 2\n<strong>解释: </strong>子数组&nbsp;<code>[4,3]</code>&nbsp;是该条件下的长度最小的连续子数组。\n</pre>\n\n<p><strong>进阶:</strong></p>\n\n<p>如果你已经完成了<em>O</em>(<em>n</em>) 时间复杂度的解法, 请尝试&nbsp;<em>O</em>(<em>n</em> log <em>n</em>) 时间复杂度的解法。</p>\n</div>","l":"中等","s":"/**\n * @param {number} s\n * @param {number[]} nums\n * @return {number}\n */\nvar minSubArrayLen = function(s, nums) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/minimum-size-subarray-sum/","bb":{"x":490,"y":50}}

