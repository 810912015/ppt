{"ls":[{"s":"class Solution {\n    public void solve(char[][] board) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify \nboard in-place instead.\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board \nin-place instead.\n        \"\"\"","lang":"Python3"},{"s":"void solve(char** board, int boardSize, int* \nboardColSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public void Solve(char[][] board) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify \nboard in-place instead.\n */\nvar solve = function(board) {\n \n};","lang":"JavaScript"}],"page":"130/1581","h":"130. 被围绕的区域","d":"<div class=\"notranslate\"><p>给定一个二维的矩阵，包含&nbsp;<code>'X'</code>&nbsp;和&nbsp;<code>'O'</code>（<strong>字母 O</strong>）。</p>\n\n<p>找到所有被 <code>'X'</code> 围绕的区域，并将这些区域里所有的&nbsp;<code>'O'</code> 用 <code>'X'</code> 填充。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>X X X X\nX O O X\nX X O X\nX O X X\n</pre>\n\n<p>运行你的函数后，矩阵变为：</p>\n\n<pre>X X X X\nX X X X\nX X X X\nX O X X\n</pre>\n\n<p><strong>解释:</strong></p>\n\n<p>被围绕的区间不会存在于边界上，换句话说，任何边界上的&nbsp;<code>'O'</code>&nbsp;都不会被填充为&nbsp;<code>'X'</code>。 任何不在边界上，或不与边界上的&nbsp;<code>'O'</code>&nbsp;相连的&nbsp;<code>'O'</code>&nbsp;最终都会被填充为&nbsp;<code>'X'</code>。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。</p>\n</div>","l":"中等","s":"/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify \nboard in-place instead.\n */\nvar solve = function(board) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/surrounded-regions/","bb":{"x":490,"y":50}}

