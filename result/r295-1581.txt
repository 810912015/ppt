{"ls":[{"s":"class MedianFinder {\n \n    /** initialize your data structure here. */\n    public MedianFinder() {\n \n    }\n    \n    public void addNum(int num) {\n \n    }\n    \n    public double findMedian() {\n \n    }\n}\n \n/**\n * Your MedianFinder object will be instantiated and \ncalled as such:\n * MedianFinder obj = new MedianFinder();\n * obj.addNum(num);\n * double param_2 = obj.findMedian();\n */","lang":"Java"},{"s":"class MedianFinder(object):\n \n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n        \n \n    def addNum(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: None\n        \"\"\"\n        \n \n    def findMedian(self):\n        \"\"\"\n        :rtype: float\n        \"\"\"\n        \n \n \n# Your MedianFinder object will be instantiated and \ncalled as such:\n# obj = MedianFinder()\n# obj.addNum(num)","lang":"Python"},{"s":"class MedianFinder:\n \n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n        \n \n    def addNum(self, num: int) -> None:\n        \n \n    def findMedian(self) -> float:\n        \n \n \n# Your MedianFinder object will be instantiated and \ncalled as such:\n# obj = MedianFinder()\n# obj.addNum(num)\n# param_2 = obj.findMedian()","lang":"Python3"},{"s":"typedef struct {\n    \n} MedianFinder;\n \n/** initialize your data structure here. */\n \nMedianFinder* medianFinderCreate() {\n    \n}\n \nvoid medianFinderAddNum(MedianFinder* obj, int num) {\n  \n}\n \ndouble medianFinderFindMedian(MedianFinder* obj) {\n  \n}\n \nvoid medianFinderFree(MedianFinder* obj) {\n    \n}\n \n/**\n * Your MedianFinder struct will be instantiated and \ncalled as such:\n * MedianFinder* obj = medianFinderCreate();","lang":"C"},{"s":"public class MedianFinder {\n \n    /** initialize your data structure here. */\n    public MedianFinder() {\n \n    }\n    \n    public void AddNum(int num) {\n \n    }\n    \n    public double FindMedian() {\n \n    }\n}\n \n/**\n * Your MedianFinder object will be instantiated and \ncalled as such:\n * MedianFinder obj = new MedianFinder();\n * obj.AddNum(num);\n * double param_2 = obj.FindMedian();\n */","lang":"C#"},{"s":"/**\n * initialize your data structure here.\n */\nvar MedianFinder = function() {\n \n};\n \n/** \n * @param {number} num\n * @return {void}\n */\nMedianFinder.prototype.addNum = function(num) {\n \n};\n \n/**\n * @return {number}\n */\nMedianFinder.prototype.findMedian = function() {\n \n};\n \n/**\n * Your MedianFinder object will be instantiated and \ncalled as such:\n * var obj = new MedianFinder()","lang":"JavaScript"}],"page":"295/1581","h":"295. 数据流的中位数","d":"<div class=\"notranslate\"><p>中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。</p>\n\n<p>例如，</p>\n\n<p>[2,3,4]&nbsp;的中位数是 3</p>\n\n<p>[2,3] 的中位数是 (2 + 3) / 2 = 2.5</p>\n\n<p>设计一个支持以下两种操作的数据结构：</p>\n\n<ul>\n\t<li>void addNum(int num) - 从数据流中添加一个整数到数据结构中。</li>\n\t<li>double findMedian() - 返回目前所有元素的中位数。</li>\n</ul>\n\n<p><strong>示例：</strong></p>\n\n<pre>addNum(1)\naddNum(2)\nfindMedian() -&gt; 1.5\naddNum(3) \nfindMedian() -&gt; 2</pre>\n\n<p><strong>进阶:</strong></p>\n\n<ol>\n\t<li>如果数据流中所有整数都在 0 到 100 范围内，你将如何优化你的算法？</li>\n\t<li>如果数据流中 99% 的整数都在 0 到 100 范围内，你将如何优化你的算法？</li>\n</ol>\n</div>","l":"困难","s":"/**\n * initialize your data structure here.\n */\nvar MedianFinder = function() {\n \n};\n \n/** \n * @param {number} num\n * @return {void}\n */\nMedianFinder.prototype.addNum = function(num) {\n \n};\n \n/**\n * @return {number}\n */\nMedianFinder.prototype.findMedian = function() {\n \n};\n \n/**\n * Your MedianFinder object will be instantiated and \ncalled as such:\n * var obj = new MedianFinder()","lang":"JavaScript","href":"https://leetcode-cn.com/problems/find-median-from-data-stream/","bb":{"x":490,"y":50}}

