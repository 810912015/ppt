{"ls":[{"s":"class Solution {\n    public int maxSubArray(int[] nums) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:","lang":"Python3"},{"s":"int maxSubArray(int* nums, int numsSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int MaxSubArray(int[] nums) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSubArray = function(nums) {\n \n};","lang":"JavaScript"}],"page":"53/1581","h":"53. 最大子序和","d":"<div class=\"notranslate\"><p>给定一个整数数组 <code>nums</code>&nbsp;，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [-2,1,-3,4,-1,2,1,-5,4],\n<strong>输出:</strong> 6\n<strong>解释:</strong>&nbsp;连续子数组&nbsp;[4,-1,2,1] 的和最大，为&nbsp;6。\n</pre>\n\n<p><strong>进阶:</strong></p>\n\n<p>如果你已经实现复杂度为 O(<em>n</em>) 的解法，尝试使用更为精妙的分治法求解。</p>\n</div>","l":"简单","s":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSubArray = function(nums) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/maximum-subarray/","bb":{"x":490,"y":50}}

