{"ls":[{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int sumNumbers(TreeNode root) {\n \n    }\n}","lang":"Java"},{"s":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n \nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n \nclass Solution:\n    def sumNumbers(self, root: TreeNode) -> int:","lang":"Python3"},{"s":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n \n \nint sumNumbers(struct TreeNode* root){\n \n}","lang":"C"},{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int SumNumbers(TreeNode root) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar sumNumbers = function(root) {\n \n};","lang":"JavaScript"}],"page":"129/1581","h":"129. 求根到叶子节点数字之和","d":"<div class=\"notranslate\"><p>给定一个二叉树，它的每个结点都存放一个&nbsp;<code>0-9</code>&nbsp;的数字，每条从根到叶子节点的路径都代表一个数字。</p>\n\n<p>例如，从根到叶子节点路径 <code>1-&gt;2-&gt;3</code> 代表数字 <code>123</code>。</p>\n\n<p>计算从根到叶子节点生成的所有数字之和。</p>\n\n<p><strong>说明:</strong>&nbsp;叶子节点是指没有子节点的节点。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,3]\n    1\n   / \\\n  2   3\n<strong>输出:</strong> 25\n<strong>解释:</strong>\n从根到叶子节点路径 <code>1-&gt;2</code> 代表数字 <code>12</code>.\n从根到叶子节点路径 <code>1-&gt;3</code> 代表数字 <code>13</code>.\n因此，数字总和 = 12 + 13 = <code>25</code>.</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [4,9,0,5,1]\n    4\n   / \\\n  9   0\n&nbsp;/ \\\n5   1\n<strong>输出:</strong> 1026\n<strong>解释:</strong>\n从根到叶子节点路径 <code>4-&gt;9-&gt;5</code> 代表数字 495.\n从根到叶子节点路径 <code>4-&gt;9-&gt;1</code> 代表数字 491.\n从根到叶子节点路径 <code>4-&gt;0</code> 代表数字 40.\n因此，数字总和 = 495 + 491 + 40 = <code>1026</code>.</pre>\n</div>","l":"中等","s":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar sumNumbers = function(root) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/sum-root-to-leaf-numbers/","bb":{"x":490,"y":50}}

