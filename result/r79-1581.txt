{"ls":[{"s":"class Solution {\n    public boolean exist(char[][] board, String word)\n {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def exist(self, board: List[List[str]], word: \nstr) -> bool:","lang":"Python3"},{"s":"bool exist(char** board, int boardSize, int* \nboardColSize, char * word){\n \n}","lang":"C"},{"s":"public class Solution {\n    public bool Exist(char[][] board, string word) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {character[][]} board\n * @param {string} word\n * @return {boolean}\n */\nvar exist = function(board, word) {\n \n};","lang":"JavaScript"}],"page":"79/1581","h":"79. 单词搜索","d":"<div class=\"notranslate\"><p>给定一个二维网格和一个单词，找出该单词是否存在于网格中。</p>\n\n<p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>board =\n[\n  ['A','B','C','E'],\n  ['S','F','C','S'],\n  ['A','D','E','E']\n]\n\n给定 word = \"<strong>ABCCED</strong>\", 返回 <strong>true</strong>\n给定 word = \"<strong>SEE</strong>\", 返回 <strong>true</strong>\n给定 word = \"<strong>ABCB</strong>\", 返回 <strong>false</strong></pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>board</code> 和 <code>word</code> 中只包含大写和小写英文字母。</li>\n\t<li><code>1 &lt;= board.length &lt;= 200</code></li>\n\t<li><code>1 &lt;= board[i].length &lt;= 200</code></li>\n\t<li><code>1 &lt;= word.length &lt;= 10^3</code></li>\n</ul>\n</div>","l":"中等","s":"/**\n * @param {character[][]} board\n * @param {string} word\n * @return {boolean}\n */\nvar exist = function(board, word) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/word-search/","bb":{"x":490,"y":50}}

