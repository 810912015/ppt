{"ls":[{"s":"class Solution {\n    public boolean isPalindrome(int x) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def isPalindrome(self, x: int) -> bool:","lang":"Python3"},{"s":"bool isPalindrome(int x){\n \n}","lang":"C"},{"s":"public class Solution {\n    public bool IsPalindrome(int x) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} x\n * @return {boolean}\n */\nvar isPalindrome = function(x) {\n \n};","lang":"JavaScript"}],"page":"9/1581","h":"9. 回文数","d":"<div class=\"notranslate\"><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> 121\n<strong>输出:</strong> true\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> -121\n<strong>输出:</strong> false\n<strong>解释:</strong> 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> 10\n<strong>输出:</strong> false\n<strong>解释:</strong> 从右向左读, 为 01 。因此它不是一个回文数。\n</pre>\n\n<p><strong>进阶:</strong></p>\n\n<p>你能不将整数转为字符串来解决这个问题吗？</p>\n</div>","l":"简单","s":"/**\n * @param {number} x\n * @return {boolean}\n */\nvar isPalindrome = function(x) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/palindrome-number/","bb":{"x":490,"y":50}}

