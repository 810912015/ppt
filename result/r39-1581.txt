{"ls":[{"s":"class Solution {\n    public List<List<Integer>> combinationSum(int[] \ncandidates, int target) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def combinationSum(self, candidates: List[int], \ntarget: int) -> List[List[int]]:","lang":"Python3"},{"s":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as \n*returnColumnSizes array.\n * Note: Both returned array and *columnSizes array \nmust be malloced, assume caller calls free().\n */\nint** combinationSum(int* candidates, int \ncandidatesSize, int target, int* returnSize, int** \nreturnColumnSizes){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<IList<int>> CombinationSum(int[] \ncandidates, int target) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum = function(candidates, target) {\n \n};","lang":"JavaScript"}],"page":"39/1581","h":"39. 组合总和","d":"<div class=\"notranslate\"><p>给定一个<strong>无重复元素</strong>的数组&nbsp;<code>candidates</code>&nbsp;和一个目标数&nbsp;<code>target</code>&nbsp;，找出&nbsp;<code>candidates</code>&nbsp;中所有可以使数字和为&nbsp;<code>target</code>&nbsp;的组合。</p>\n\n<p><code>candidates</code>&nbsp;中的数字可以无限制重复被选取。</p>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>所有数字（包括&nbsp;<code>target</code>）都是正整数。</li>\n\t<li>解集不能包含重复的组合。&nbsp;</li>\n</ul>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> candidates = <code>[2,3,6,7], </code>target = <code>7</code>,\n<strong>所求解集为:</strong>\n[\n  [7],\n  [2,2,3]\n]\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> candidates = [2,3,5]<code>, </code>target = 8,\n<strong>所求解集为:</strong>\n[\n&nbsp; [2,2,2,2],\n&nbsp; [2,3,3],\n&nbsp; [3,5]\n]</pre>\n</div>","l":"中等","s":"/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum = function(candidates, target) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/combination-sum/","bb":{"x":490,"y":50}}

