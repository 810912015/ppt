{"ls":[{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n \n    }\n}","lang":"Java"},{"s":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n \nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"","lang":"Python"},{"s":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n \nclass Solution:\n    def isValidBST(self, root: TreeNode) -> bool:","lang":"Python3"},{"s":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n \n \nbool isValidBST(struct TreeNode* root){\n \n}","lang":"C"},{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public bool IsValidBST(TreeNode root) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isValidBST = function(root) {\n \n};","lang":"JavaScript"}],"page":"98/1581","h":"98. 验证二叉搜索树","d":"<div class=\"notranslate\"><p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。</p>\n\n<p>假设一个二叉搜索树具有如下特征：</p>\n\n<ul>\n\t<li>节点的左子树只包含<strong>小于</strong>当前节点的数。</li>\n\t<li>节点的右子树只包含<strong>大于</strong>当前节点的数。</li>\n\t<li>所有左子树和右子树自身必须也是二叉搜索树。</li>\n</ul>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong>\n    2\n   / \\\n  1   3\n<strong>输出:</strong> true\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:\n</strong>    5\n   / \\\n  1   4\n&nbsp;    / \\\n&nbsp;   3   6\n<strong>输出:</strong> false\n<strong>解释:</strong> 输入为: [5,1,4,null,null,3,6]。\n&nbsp;    根节点的值为 5 ，但是其右子节点值为 4 。\n</pre>\n</div>","l":"中等","s":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isValidBST = function(root) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/validate-binary-search-tree/","bb":{"x":490,"y":50}}

