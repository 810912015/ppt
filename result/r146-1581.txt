{"ls":[{"s":"class LRUCache {\n \n    public LRUCache(int capacity) {\n \n    }\n    \n    public int get(int key) {\n \n    }\n    \n    public void put(int key, int value) {\n \n    }\n}\n \n/**\n * Your LRUCache object will be instantiated and \ncalled as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */","lang":"Java"},{"s":"class LRUCache(object):\n \n    def __init__(self, capacity):\n        \"\"\"\n        :type capacity: int\n        \"\"\"\n \n \n    def get(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: int\n        \"\"\"\n \n \n    def put(self, key, value):\n        \"\"\"\n        :type key: int\n        :type value: int\n        :rtype: None\n        \"\"\"\n \n \n \n# Your LRUCache object will be instantiated and \ncalled as such:","lang":"Python"},{"s":"class LRUCache:\n \n    def __init__(self, capacity: int):\n \n \n    def get(self, key: int) -> int:\n \n \n    def put(self, key: int, value: int) -> None:\n \n \n \n# Your LRUCache object will be instantiated and \ncalled as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)","lang":"Python3"},{"s":"typedef struct {\n \n} LRUCache;\n \n \nLRUCache* lRUCacheCreate(int capacity) {\n \n}\n \nint lRUCacheGet(LRUCache* obj, int key) {\n \n}\n \nvoid lRUCachePut(LRUCache* obj, int key, int value) {\n \n}\n \nvoid lRUCacheFree(LRUCache* obj) {\n \n}\n \n/**\n * Your LRUCache struct will be instantiated and \ncalled as such:\n * LRUCache* obj = lRUCacheCreate(capacity);\n * int param_1 = lRUCacheGet(obj, key);","lang":"C"},{"s":"public class LRUCache {\n \n    public LRUCache(int capacity) {\n \n    }\n    \n    public int Get(int key) {\n \n    }\n    \n    public void Put(int key, int value) {\n \n    }\n}\n \n/**\n * Your LRUCache object will be instantiated and \ncalled as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.Get(key);\n * obj.Put(key,value);\n */","lang":"C#"},{"s":"/**\n * @param {number} capacity\n */\nvar LRUCache = function(capacity) {\n \n};\n \n/** \n * @param {number} key\n * @return {number}\n */\nLRUCache.prototype.get = function(key) {\n \n};\n \n/** \n * @param {number} key \n * @param {number} value\n * @return {void}\n */\nLRUCache.prototype.put = function(key, value) {\n \n};\n \n/**\n * Your LRUCache object will be instantiated and ","lang":"JavaScript"}],"page":"146/1581","h":"146. LRU缓存机制","d":"<div class=\"notranslate\"><p>运用你所掌握的数据结构，设计和实现一个&nbsp; <a href=\"https://baike.baidu.com/item/LRU\">LRU (最近最少使用) 缓存机制</a>。它应该支持以下操作： 获取数据 <code>get</code> 和 写入数据 <code>put</code> 。</p>\n\n<p>获取数据 <code>get(key)</code> - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。<br>\n写入数据 <code>put(key, value)</code> - 如果密钥不存在，则写入其数据值。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。</p>\n\n<p><strong>进阶:</strong></p>\n\n<p>你是否可以在&nbsp;<strong>O(1)</strong> 时间复杂度内完成这两种操作？</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>LRUCache cache = new LRUCache( 2 /* 缓存容量 */ );\n\ncache.put(1, 1);\ncache.put(2, 2);\ncache.get(1);       // 返回  1\ncache.put(3, 3);    // 该操作会使得密钥 2 作废\ncache.get(2);       // 返回 -1 (未找到)\ncache.put(4, 4);    // 该操作会使得密钥 1 作废\ncache.get(1);       // 返回 -1 (未找到)\ncache.get(3);       // 返回  3\ncache.get(4);       // 返回  4\n</pre>\n</div>","l":"中等","s":"/**\n * @param {number} capacity\n */\nvar LRUCache = function(capacity) {\n \n};\n \n/** \n * @param {number} key\n * @return {number}\n */\nLRUCache.prototype.get = function(key) {\n \n};\n \n/** \n * @param {number} key \n * @param {number} value\n * @return {void}\n */\nLRUCache.prototype.put = function(key, value) {\n \n};\n \n/**\n * Your LRUCache object will be instantiated and ","lang":"JavaScript","href":"https://leetcode-cn.com/problems/lru-cache/","bb":{"x":490,"y":50}}

