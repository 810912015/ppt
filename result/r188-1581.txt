{"ls":[{"s":"class Solution {\n    public int maxProfit(int k, int[] prices) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def maxProfit(self, k: int, prices: List[int]) \n-> int:","lang":"Python3"},{"s":"int maxProfit(int k, int* prices, int pricesSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int MaxProfit(int k, int[] prices) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} k\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function(k, prices) {\n \n};","lang":"JavaScript"}],"page":"188/1581","h":"188. 买卖股票的最佳时机 IV","d":"<div class=\"notranslate\"><p>给定一个数组，它的第<em> i</em> 个元素是一支给定的股票在第 <em>i </em>天的价格。</p>\n\n<p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 <strong>k</strong> 笔交易。</p>\n\n<p><strong>注意:</strong>&nbsp;你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> [2,4,1], k = 2\n<strong>输出:</strong> 2\n<strong>解释:</strong> 在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [3,2,6,5,0,3], k = 2\n<strong>输出:</strong> 7\n<strong>解释:</strong> 在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。\n&nbsp;    随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。\n</pre>\n</div>","l":"困难","s":"/**\n * @param {number} k\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function(k, prices) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/","bb":{"x":490,"y":50}}

