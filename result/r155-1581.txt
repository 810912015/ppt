{"ls":[{"s":"class MinStack {\n \n    /** initialize your data structure here. */\n    public MinStack() {\n \n    }\n    \n    public void push(int x) {\n \n    }\n    \n    public void pop() {\n \n    }\n    \n    public int top() {\n \n    }\n    \n    public int getMin() {\n \n    }\n}\n \n/**\n * Your MinStack object will be instantiated and ","lang":"Java"},{"s":"class MinStack(object):\n \n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n \n \n    def push(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: None\n        \"\"\"\n \n \n    def pop(self):\n        \"\"\"\n        :rtype: None\n        \"\"\"\n \n \n    def top(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n ","lang":"Python"},{"s":"class MinStack:\n \n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n \n \n    def push(self, x: int) -> None:\n \n \n    def pop(self) -> None:\n \n \n    def top(self) -> int:\n \n \n    def getMin(self) -> int:\n \n \n \n# Your MinStack object will be instantiated and \ncalled as such:\n# obj = MinStack()\n# obj.push(x)\n# obj.pop()","lang":"Python3"},{"s":"typedef struct {\n \n} MinStack;\n \n/** initialize your data structure here. */\n \nMinStack* minStackCreate() {\n \n}\n \nvoid minStackPush(MinStack* obj, int x) {\n \n}\n \nvoid minStackPop(MinStack* obj) {\n \n}\n \nint minStackTop(MinStack* obj) {\n \n}\n \nint minStackGetMin(MinStack* obj) {\n \n}\n ","lang":"C"},{"s":"public class MinStack {\n \n    /** initialize your data structure here. */\n    public MinStack() {\n \n    }\n    \n    public void Push(int x) {\n \n    }\n    \n    public void Pop() {\n \n    }\n    \n    public int Top() {\n \n    }\n    \n    public int GetMin() {\n \n    }\n}\n \n/**\n * Your MinStack object will be instantiated and ","lang":"C#"},{"s":"/**\n * initialize your data structure here.\n */\nvar MinStack = function() {\n \n};\n \n/** \n * @param {number} x\n * @return {void}\n */\nMinStack.prototype.push = function(x) {\n \n};\n \n/**\n * @return {void}\n */\nMinStack.prototype.pop = function() {\n \n};\n \n/**\n * @return {number}\n */\nMinStack.prototype.top = function() {","lang":"JavaScript"}],"page":"155/1581","h":"155. 最小栈","d":"<div class=\"notranslate\"><p>设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。</p>\n\n<ul>\n\t<li>push(x)&nbsp;-- 将元素 x 推入栈中。</li>\n\t<li>pop()&nbsp;-- 删除栈顶的元素。</li>\n\t<li>top()&nbsp;-- 获取栈顶元素。</li>\n\t<li>getMin() -- 检索栈中的最小元素。</li>\n</ul>\n\n<p><strong>示例:</strong></p>\n\n<pre>MinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin();   --&gt; 返回 -3.\nminStack.pop();\nminStack.top();      --&gt; 返回 0.\nminStack.getMin();   --&gt; 返回 -2.\n</pre>\n</div>","l":"简单","s":"/**\n * initialize your data structure here.\n */\nvar MinStack = function() {\n \n};\n \n/** \n * @param {number} x\n * @return {void}\n */\nMinStack.prototype.push = function(x) {\n \n};\n \n/**\n * @return {void}\n */\nMinStack.prototype.pop = function() {\n \n};\n \n/**\n * @return {number}\n */\nMinStack.prototype.top = function() {","lang":"JavaScript","href":"https://leetcode-cn.com/problems/min-stack/","bb":{"x":490,"y":50}}

