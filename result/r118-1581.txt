{"ls":[{"s":"class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def generate(self, numRows: int) -> List[List\n[int]]:","lang":"Python3"},{"s":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as \n*returnColumnSizes array.\n * Note: Both returned array and *columnSizes array \nmust be malloced, assume caller calls free().\n */\nint** generate(int numRows, int* returnSize, int** \nreturnColumnSizes){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<IList<int>> Generate(int numRows) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} numRows\n * @return {number[][]}\n */\nvar generate = function(numRows) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer} num_rows\n# @return {Integer[][]}\ndef generate(num_rows)\n \nend","lang":"Ruby"}],"page":"118/1581","h":"118. 杨辉三角","d":"<div class=\"notranslate\"><p>给定一个非负整数&nbsp;<em>numRows，</em>生成杨辉三角的前&nbsp;<em>numRows&nbsp;</em>行。</p>\n\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\" alt=\"\"></p>\n\n<p><small>在杨辉三角中，每个数是它左上方和右上方的数的和。</small></p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> 5\n<strong>输出:</strong>\n[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]</pre>\n</div>","l":"简单","s":"class Solution {\n    func generate(_ numRows: Int) -> [[Int]] {\n        \n    }\n}","lang":"Swift","href":"https://leetcode-cn.com/problems/pascals-triangle/","bb":{"x":490,"y":50}}

