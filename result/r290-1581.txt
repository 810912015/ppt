{"ls":[{"s":"class Solution {\n    public boolean wordPattern(String pattern, \nString str) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def wordPattern(self, pattern, str):\n        \"\"\"\n        :type pattern: str\n        :type str: str\n        :rtype: bool\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def wordPattern(self, pattern: str, str: str) -> \nbool:","lang":"Python3"},{"s":"bool wordPattern(char * pattern, char * str){\n \n}","lang":"C"},{"s":"public class Solution {\n    public bool WordPattern(string pattern, string \nstr) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} pattern\n * @param {string} str\n * @return {boolean}\n */\nvar wordPattern = function(pattern, str) {\n \n};","lang":"JavaScript"}],"page":"290/1581","h":"290. 单词规律","d":"<div class=\"notranslate\"><p>给定一种规律 <code>pattern</code>&nbsp;和一个字符串&nbsp;<code>str</code>&nbsp;，判断 <code>str</code> 是否遵循相同的规律。</p>\n\n<p>这里的&nbsp;<strong>遵循&nbsp;</strong>指完全匹配，例如，&nbsp;<code>pattern</code>&nbsp;里的每个字母和字符串&nbsp;<code>str</code><strong>&nbsp;</strong>中的每个非空单词之间存在着双向连接的对应规律。</p>\n\n<p><strong>示例1:</strong></p>\n\n<pre><strong>输入:</strong> pattern = <code>\"abba\"</code>, str = <code>\"dog cat cat dog\"</code>\n<strong>输出:</strong> true</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong>pattern = <code>\"abba\"</code>, str = <code>\"dog cat cat fish\"</code>\n<strong>输出:</strong> false</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> pattern = <code>\"aaaa\"</code>, str = <code>\"dog cat cat dog\"</code>\n<strong>输出:</strong> false</pre>\n\n<p><strong>示例&nbsp;4:</strong></p>\n\n<pre><strong>输入:</strong> pattern = <code>\"abba\"</code>, str = <code>\"dog dog dog dog\"</code>\n<strong>输出:</strong> false</pre>\n\n<p><strong>说明:</strong><br>\n你可以假设&nbsp;<code>pattern</code>&nbsp;只包含小写字母，&nbsp;<code>str</code>&nbsp;包含了由单个空格分隔的小写字母。&nbsp; &nbsp;&nbsp;</p>\n</div>","l":"简单","s":"/**\n * @param {string} pattern\n * @param {string} str\n * @return {boolean}\n */\nvar wordPattern = function(pattern, str) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/word-pattern/","bb":{"x":490,"y":50}}

