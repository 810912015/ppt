{"ls":[{"s":"class Solution {\n    public String minWindow(String s, String t) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def minWindow(self, s: str, t: str) -> str:","lang":"Python3"},{"s":"char * minWindow(char * s, char * t){\n \n}","lang":"C"},{"s":"public class Solution {\n    public string MinWindow(string s, string t) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} s\n * @param {string} t\n * @return {string}\n */\nvar minWindow = function(s, t) {\n \n};","lang":"JavaScript"}],"page":"76/1581","h":"76. 最小覆盖子串","d":"<div class=\"notranslate\"><p>给你一个字符串 S、一个字符串 T，请在字符串 S 里面找出：包含 T 所有字母的最小子串。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入: S</strong> = \"ADOBECODEBANC\", <strong>T</strong> = \"ABC\"\n<strong>输出:</strong> \"BANC\"</pre>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>如果 S 中不存这样的子串，则返回空字符串 <code>\"\"</code>。</li>\n\t<li>如果 S 中存在这样的子串，我们保证它是唯一的答案。</li>\n</ul>\n</div>","l":"困难","s":"/**\n * @param {string} s\n * @param {string} t\n * @return {string}\n */\nvar minWindow = function(s, t) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/minimum-window-substring/","bb":{"x":490,"y":50}}

