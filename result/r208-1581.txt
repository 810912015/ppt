{"ls":[{"s":"class Trie {\n \n    /** Initialize your data structure here. */\n    public Trie() {\n \n    }\n    \n    /** Inserts a word into the trie. */\n    public void insert(String word) {\n \n    }\n    \n    /** Returns if the word is in the trie. */\n    public boolean search(String word) {\n \n    }\n    \n    /** Returns if there is any word in the trie \nthat starts with the given prefix. */\n    public boolean startsWith(String prefix) {\n \n    }\n}\n \n/**\n * Your Trie object will be instantiated and called ","lang":"Java"},{"s":"class Trie(object):\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n \n \n    def insert(self, word):\n        \"\"\"\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: None\n        \"\"\"\n \n \n    def search(self, word):\n        \"\"\"\n        Returns if the word is in the trie.\n        :type word: str\n        :rtype: bool\n        \"\"\"\n \n \n    def startsWith(self, prefix):\n        \"\"\"","lang":"Python"},{"s":"class Trie:\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n \n \n    def insert(self, word: str) -> None:\n        \"\"\"\n        Inserts a word into the trie.\n        \"\"\"\n \n \n    def search(self, word: str) -> bool:\n        \"\"\"\n        Returns if the word is in the trie.\n        \"\"\"\n \n \n    def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        Returns if there is any word in the trie \nthat starts with the given prefix.\n        \"\"\"\n ","lang":"Python3"},{"s":"typedef struct {\n    \n} Trie;\n \n/** Initialize your data structure here. */\n \nTrie* trieCreate() {\n    \n}\n \n/** Inserts a word into the trie. */\nvoid trieInsert(Trie* obj, char * word) {\n  \n}\n \n/** Returns if the word is in the trie. */\nbool trieSearch(Trie* obj, char * word) {\n  \n}\n \n/** Returns if there is any word in the trie that \nstarts with the given prefix. */\nbool trieStartsWith(Trie* obj, char * prefix) {\n  \n}\n ","lang":"C"},{"s":"public class Trie {\n \n    /** Initialize your data structure here. */\n    public Trie() {\n        \n    }\n    \n    /** Inserts a word into the trie. */\n    public void Insert(string word) {\n        \n    }\n    \n    /** Returns if the word is in the trie. */\n    public bool Search(string word) {\n        \n    }\n    \n    /** Returns if there is any word in the trie \nthat starts with the given prefix. */\n    public bool StartsWith(string prefix) {\n        \n    }\n}\n \n/**\n * Your Trie object will be instantiated and called ","lang":"C#"},{"s":"/**\n * Initialize your data structure here.\n */\nvar Trie = function() {\n \n};\n \n/**\n * Inserts a word into the trie. \n * @param {string} word\n * @return {void}\n */\nTrie.prototype.insert = function(word) {\n \n};\n \n/**\n * Returns if the word is in the trie. \n * @param {string} word\n * @return {boolean}\n */\nTrie.prototype.search = function(word) {\n \n};\n \n/**","lang":"JavaScript"}],"page":"208/1581","h":"208. 实现 Trie (前缀树)","d":"<div class=\"notranslate\"><p>实现一个 Trie (前缀树)，包含&nbsp;<code>insert</code>,&nbsp;<code>search</code>, 和&nbsp;<code>startsWith</code>&nbsp;这三个操作。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>Trie trie = new Trie();\n\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // 返回 true\ntrie.search(\"app\");     // 返回 false\ntrie.startsWith(\"app\"); // 返回 true\ntrie.insert(\"app\");   \ntrie.search(\"app\");     // 返回 true</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>你可以假设所有的输入都是由小写字母&nbsp;<code>a-z</code>&nbsp;构成的。</li>\n\t<li>保证所有输入均为非空字符串。</li>\n</ul>\n</div>","l":"中等","s":"/**\n * Initialize your data structure here.\n */\nvar Trie = function() {\n \n};\n \n/**\n * Inserts a word into the trie. \n * @param {string} word\n * @return {void}\n */\nTrie.prototype.insert = function(word) {\n \n};\n \n/**\n * Returns if the word is in the trie. \n * @param {string} word\n * @return {boolean}\n */\nTrie.prototype.search = function(word) {\n \n};\n \n/**","lang":"JavaScript","href":"https://leetcode-cn.com/problems/implement-trie-prefix-tree/","bb":{"x":490,"y":50}}

