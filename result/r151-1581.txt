{"ls":[{"s":"class Solution {\n    public String reverseWords(String s) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def reverseWords(self, s: str) -> str:","lang":"Python3"},{"s":"char * reverseWords(char * s){\n \n}","lang":"C"},{"s":"public class Solution {\n    public string ReverseWords(string s) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function(s) {\n \n};","lang":"JavaScript"}],"page":"151/1581","h":"151. 翻转字符串里的单词","d":"<div class=\"notranslate\"><p>给定一个字符串，逐个翻转字符串中的每个单词。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入:</strong> \"<code>the sky is blue</code>\"\n<strong>输出:&nbsp;</strong>\"<code>blue is sky the</code>\"\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入:</strong> \" &nbsp;hello world! &nbsp;\"\n<strong>输出:&nbsp;</strong>\"world! hello\"\n<strong>解释: </strong>输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入:</strong> \"a good &nbsp; example\"\n<strong>输出:&nbsp;</strong>\"example good a\"\n<strong>解释: </strong>如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>无空格字符构成一个单词。</li>\n\t<li>输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。</li>\n\t<li>如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong></p>\n\n<p>请选用 C 语言的用户尝试使用&nbsp;<em>O</em>(1) 额外空间复杂度的原地解法。</p>\n</div>","l":"中等","s":"/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function(s) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/reverse-words-in-a-string/","bb":{"x":490,"y":50}}

