{"ls":[{"s":"class Solution {\n    public int firstMissingPositive(int[] nums) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def firstMissingPositive(self, nums: List[int]) \n-> int:","lang":"Python3"},{"s":"int firstMissingPositive(int* nums, int numsSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int FirstMissingPositive(int[] nums) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar firstMissingPositive = function(nums) {\n \n};","lang":"JavaScript"}],"page":"41/1581","h":"41. 缺失的第一个正数","d":"<div class=\"notranslate\"><p>给定一个未排序的整数数组，找出其中没有出现的最小的正整数。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>输入: [1,2,0]\n输出: 3\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>输入: [3,4,-1,1]\n输出: 2\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre>输入: [7,8,9,11,12]\n输出: 1\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<p>你的算法的时间复杂度应为O(<em>n</em>)，并且只能使用常数级别的空间。</p>\n</div>","l":"困难","s":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar firstMissingPositive = function(nums) {\n \n};","lang":"JavaScript","href":"https://leetcode-cn.com/problems/first-missing-positive/","bb":{"x":490,"y":50}}

