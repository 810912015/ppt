{"l":"https://web.stanford.edu/class/cs253/","n":"Stanford: CS 253 Web Security","html":"\n    <div class=\"content\">\n      <a href=\"https://cs253.stanford.edu\" class=\"logo\">\n        <img src=\"stanford.svg\" alt=\"Stanford\">\n        <h1>CS 253 Web Security</h1>\n      </a>\n\n      <h2>Fall 2019</h2>\n<p>This course is a comprehensive overview of web security. The goal is to build an understanding of the most common web attacks and their countermeasures. Given the pervasive insecurity of the modern web landscape, there is a pressing need for programmers and system designers to improve their understanding of web security issues.</p>\n<p>We'll be covering the fundamentals as well as the state-of-the-art in web security.</p>\n<p>Topics include: Principles of web security, attacks and countermeasures, the browser security model, web app vulnerabilities, injection, denial-of-service, TLS attacks, privacy, fingerprinting, same-origin policy, cross site scripting, authentication, JavaScript security, emerging threats, defense-in-depth, and techniques for writing secure code. Course projects include writing security exploits, defending insecure web apps, and implementing emerging web standards.</p>\n<h2>Meeting time and place</h2>\n<p>Tuesdays and Thursdays, 1:30 PM - 2:50 PM in classroom <a href=\"https://campus-map.stanford.edu/?srch=380-380Y\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">380-380Y</a></p>\n<h2>Course Staff</h2>\n<h3>Instructor</h3>\n<p>Feross Aboukhadijeh (<a href=\"mailto:feross@cs.stanford.edu\">feross@cs.stanford.edu</a>)</p>\n<h3>Teaching Assistant</h3>\n<p>Esther Goldstein (<a href=\"mailto:egolds@stanford.edu\">egolds@stanford.edu</a>)</p>\n<h3>Office Hours</h3>\n<ul>\n<li>Feross: Thursday 3-5pm, Gates 323</li>\n<li>Esther: Monday 3-5pm, Wednesday 3-5pm, Huang Basement</li>\n</ul>\n<h2>Course Policies</h2>\n<h3>Communication</h3>\n<p>We will primarily use <a href=\"https://piazza.com/stanford/fall2019/cs253\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Piazza</a> for sending out course announcements and answering questions. Please make sure to <a href=\"https://piazza.com/stanford/fall2019/cs253\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sign up</a>.</p>\n<p>We use <a href=\"https://gradescope.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gradescope</a> for assignment submissions. Enroll with the code <code>97BGZB</code>.</p>\n<p>To submit anonymous feedback to us at any point during the quarter, you may use <a href=\"https://forms.gle/WqKuxA2m7oycRuTt7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this form</a>.</p>\n<h3>Prerequisites</h3>\n<p>CS 142, or an equivalent amount of web development experience, is a prerequisite. You should also be curious about web security and excited to learn clever attacks, defenses, and techniques for writing secure code.</p>\n<p>An introductory security course, such as CS 155, is not a formal prerequisite. The material in this course is focused specifically on the web, while CS 155 covers security more broadly.</p>\n<h3>Attendence</h3>\n<p>Attendance at lectures is mandatory. Do not enroll in this course if you are taking another course that meets at the same time.</p>\n<h3>Grading</h3>\n<ul>\n<li>Assignments (75%)</li>\n<li>Final Exam (25%)</li>\n</ul>\n<p>Each assignment is worth 15%. There is no midterm.</p>\n<h3>Final Exam</h3>\n<ul>\n<li>Tuesday, December 10, 3:30pm - 6:30pm in <a href=\"https://campus-map.stanford.edu/?srch=200-305\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">200-305</a></li>\n</ul>\n<h3>Previous Final Exams</h3>\n<ul>\n<li><a href=\"cs253-final-2019.pdf\">Final Exam 2019</a> (<a href=\"cs253-final-2019-solutions.pdf\">Solutions</a>)</li>\n<li><a href=\"cs253-sample-final.pdf\">More Sample Final Exam Questions</a> (<a href=\"cs253-sample-final-solutions.pdf\">Solutions</a>)</li>\n</ul>\n<h3>Collaboration Policy</h3>\n<p>You may discuss the assignments with other students and you may work together to come up with solutions to the problems. If you do so, you must list the name of your collaborators in the submission. Each student must write up their solutions independently.</p>\n<h3>Late Submissions</h3>\n<p>You get three “late days” in total during the quarter. You may use a late day to submit an assignment after the deadline. You can use at most three late days for any single assignment, and you may only use late days in one-day increments (no partial late days).</p>\n<p>If you submit an assignment more than 72 hours after the deadline, or if you submit an assignment late after running out of late days, you will receive <strong>no credit</strong> for the submission. Please submit your assignments on time and save your late days for extraordinary situations.</p>\n<p>If you have questions about these policies, please ask us.</p>\n<h2>Schedule</h2>\n<h3>Sep 24: What is Web Security? HTML &amp; JavaScript Review</h3>\n<ul>\n<li><a href=\"lectures/Lecture%2001.pdf\">Slides</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=5JJrJGZ_LjM\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video</a></li>\n<li>Reading<ul>\n<li><a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Inside look at modern web browser (part 1)</a></li>\n<li><a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Inside look at modern web browser (part 2)</a></li>\n<li><a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Inside look at modern web browser (part 3)</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Re-Introduction to JavaScript</a></li>\n</ul></li>\n</ul>\n<h3>Sep 26: HTTP, Cookies, Sessions</h3>\n<ul>\n<li><a href=\"lectures/Lecture%2002.pdf\">Slides</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=zhnQFQ2qFtA\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video</a></li>\n<li>Reading<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">An overview of HTTP</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HTTP Cookies</a></li>\n<li>Skim: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HTTP headers</a></li>\n</ul></li>\n</ul>\n<h3>Oct 01: Session Attacks</h3>\n<ul>\n<li><a href=\"lectures/Lecture%2003.pdf\">Slides</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=QuhgjXKzfI8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video</a></li>\n<li>Reading<ul>\n<li><a href=\"https://web.dev/samesite-cookies-explained/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SameSite Cookies Explained</a></li>\n<li><a href=\"https://tools.ietf.org/html/draft-west-cookie-incrementalism-00#section-4.1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Incrementally Better Cookies</a></li>\n<li><a href=\"https://scotthelme.co.uk/csrf-is-dead/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSRF Is Dead</a></li>\n</ul></li>\n</ul>\n<h3>Oct 03: Cross-Site Request Forgery, Same Origin Policy</h3>\n<ul>\n<li><a href=\"lectures/Lecture%2004.pdf\">Slides</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=0-q69vAYSwo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video</a></li>\n<li>Reading<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Same Origin policy</a></li>\n<li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cross-Site Request Forgery Prevention</a></li>\n</ul></li>\n</ul>\n<h3>Oct 08: Exceptions to the Same Origin Policy, Cross-Site Script Inclusion</h3>\n<ul>\n<li><a href=\"lectures/Lecture%2005.pdf\">Slides</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=ud9cVQDte3A\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video</a></li>\n</ul>\n<h3>Oct 10: Cross-Site Scripting (XSS)</h3>\n<ul>\n<li><a href=\"lectures/Lecture%2006.pdf\">Slides</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=XTcqlOFhpPI\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video</a></li>\n<li>Reading<ul>\n<li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cross Site Scripting Prevention Cheat Sheet</a></li>\n<li><a href=\"https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">XSS Filter Evasion Cheat Sheet</a></li>\n</ul></li>\n</ul>\n<h3>Oct 15: Cross-Site Scripting Defenses</h3>\n<ul>\n<li><a href=\"lectures/Lecture%2007.pdf\">Slides</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=PlXzrtheQGc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video</a></li>\n<li>Reading<ul>\n<li><a href=\"http://research.sidstamm.com/papers/csp-www2010.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Reining in the Web with Content Security Policy</a></li>\n<li><a href=\"https://storage.googleapis.com/pub-tools-public-publication-data/pdf/45542.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSP is Dead: Long Live CSP</a></li>\n<li><a href=\"https://developers.google.com/web/updates/2019/02/trusted-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Trusted Types</a></li>\n<li><a href=\"https://fastmail.blog/2015/12/20/sanitising-html-the-dom-clobbering-issue/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sanitising HTML: the DOM clobbering issue</a></li>\n</ul></li>\n</ul>\n<h3>Oct 17: Fingerprinting and Privacy on the Web</h3>\n<ul>\n<li><strong>Guest Lecture by Pete Snyder (<a href=\"https://brave.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Brave Software</a>)</strong></li>\n<li><a href=\"lectures/Lecture%2008.pdf\">Slides</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=OVh0oHbmla0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video</a></li>\n<li>Reading<ul>\n<li><a href=\"https://chromium.woolyss.com/f/OpenWPM-1-million-site-tracking-measurement.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Online tracking: A 1-million-site measurement and analysis</a></li>\n<li><a href=\"https://arxiv.org/pdf/1708.08510\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Most websites don't need to vibrate: A cost-benefit approach to improving browser security</a></li>\n<li><a href=\"https://blog.torproject.org/browser-fingerprinting-introduction-and-challenges-ahead\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Browser Fingerprinting: An Introduction and the Challenges Ahead</a></li>\n<li><a href=\"https://webkit.org/blog/8943/privacy-preserving-ad-click-attribution-for-the-web/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebKit Ad Click Attribution</a></li>\n<li><a href=\"https://crypto.stanford.edu/safecache/sameorigin.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Protecting Browser State from Web Privacy Attacks</a></li>\n<li>Skim: <a href=\"https://webkit.org/tracking-prevention-policy/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebKit Tracking Prevention Policy</a></li>\n</ul></li>\n</ul>\n<h3>Oct 22: Denial-of-service, Phishing, Side Channels</h3>\n<ul>\n<li><a href=\"lectures/Lecture%2009.pdf\">Slides</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=RfC_PzVmk4w\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video</a></li>\n<li>Reading<ul>\n<li><a href=\"https://www.usenix.org/system/files/conference/usenixsecurity13/sec13-paper_akhawe.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Alice in Warningland: A Large-Scale Field Study of Browser Security</a></li>\n<li><a href=\"http://www.sectheory.com/clickjacking.htm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Clickjacking</a></li>\n<li><a href=\"https://www.adambarth.com/papers/2009/barth-weinberger-song.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cross-Origin JavaScript Capability Leaks: Detection, Exploitation, and Defense</a></li>\n</ul></li>\n</ul>\n<h3>Oct 24: Code Injection</h3>\n<ul>\n<li><a href=\"lectures/Lecture%2010.pdf\">Slides</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=mR7yvqWmE0M\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video</a></li>\n<li>Reading<ul>\n<li>None</li>\n</ul></li>\n</ul>\n<h3>Oct 29: Transport Layer Security</h3>\n<ul>\n<li><a href=\"lectures/Lecture%2011.pdf\">Slides</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=S8-rnPHjyxs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video</a></li>\n<li>Reading<ul>\n<li><a href=\"https://blog.cryptographyengineering.com/2019/09/24/looking-back-at-the-snowden-revelations/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Looking back at the Snowden revelations</a></li>\n<li><a href=\"https://transparencyreport.google.com/https/overview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HTTPS encryption on the web</a></li>\n</ul></li>\n</ul>\n<h3>Oct 31: HTTPS in the Real World: A Spooky Tale</h3>\n<ul>\n<li><strong>Guest Lecture by Emily Stark &amp; Chris Palmer (<a href=\"https://www.google.com/chrome/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google Chrome</a>)</strong></li>\n<li><a href=\"lectures/Lecture%2012.pdf\">Slides</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=jN26N8QS5Os\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video</a></li>\n<li>Reading<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/DigiNotar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DigiNotar on Wikipedia</a></li>\n<li><a href=\"https://noncombatant.org/2015/05/01/about-http-public-key-pinning/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">About Public Key Pinning</a></li>\n<li><a href=\"https://noncombatant.org/2015/11/24/what-is-hpkp-for/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">What Is HPKP For?</a></li>\n<li><a href=\"https://developers.google.com/web/updates/2015/09/HPKP-reporting-with-chrome-46\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rolling out Public Key Pinning with HPKP Reporting</a></li>\n</ul></li>\n</ul>\n<h3>Nov 05: Authentication</h3>\n<ul>\n<li><a href=\"lectures/Lecture%2013.pdf\">Slides</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=lgmGSYwJc20\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video</a></li>\n<li>Reading<ul>\n<li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Authentication Cheat Sheet</a></li>\n</ul></li>\n</ul>\n<h3>Nov 07: WebAuthn - The future of user authentication on the web 🤞</h3>\n<ul>\n<li><strong>Guest Lecture by Lucas Garron (<a href=\"https://github.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub</a>)</strong></li>\n<li><a href=\"lectures/Lecture%2014.pdf\">Slides</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=_nPk2HgNpjE\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video</a></li>\n<li>Reading<ul>\n<li><a href=\"https://webauthn.guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Guide to Web Authentication</a></li>\n</ul></li>\n</ul>\n<h3>Nov 12: No class</h3>\n<h3>Nov 14: Managing security concerns in a large Open Source project</h3>\n<ul>\n<li><strong>Guest Lecture by Myles Borins (<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node.js</a> technical steering committee, <a href=\"https://www.google.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google</a>)</strong></li>\n<li><a href=\"https://kni.sh/oss-security\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Slides</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=lX6KLL0sVTU\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video</a></li>\n<li>Reading<ul>\n<li><a href=\"https://gruss.cc/files/fantastictimers.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Fantastic Timers and Where to Find Them: High-Resolution Microarchitectural Attacks in JavaScript</a></li>\n<li><a href=\"https://nodesecroadmap.fyi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Roadmap for Node.js Security</a></li>\n</ul></li>\n</ul>\n<h3>Nov 19: Server security, Safe coding practices</h3>\n<ul>\n<li><a href=\"lectures/Lecture%2017.pdf\">Slides</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=Ox15IMOvWfA\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video</a></li>\n<li>Reading<ul>\n<li><a href=\"https://snyk.io/blog/exploiting-buffer/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Exploiting Buffer</a></li>\n</ul></li>\n</ul>\n<h3>Nov 21: Local HTTP server security</h3>\n<ul>\n<li><a href=\"lectures/Lecture%2018.pdf\">Slides</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=wLgcb4jZwGM\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video</a></li>\n<li>Reading<ul>\n<li>None</li>\n</ul></li>\n</ul>\n<h3>Dec 03: DNS rebinding attacks</h3>\n<ul>\n<li><a href=\"lectures/Lecture%2019.pdf\">Slides</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=bZW_55LIz0w\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video</a></li>\n<li>Reading<ul>\n<li><a href=\"https://www.wired.com/story/chromecast-roku-sonos-dns-rebinding-vulnerability/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Millions of Streaming Devices Are Vulnerable to a Retro Web Attack</a></li>\n<li><a href=\"https://crypto.stanford.edu/dns/dns-rebinding.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Protecting Browsers from DNS Rebinding Attacks</a></li>\n</ul></li>\n</ul>\n<h3>Dec 05: Browser architecture, Writing secure code</h3>\n<ul>\n<li><a href=\"lectures/Lecture%2020.pdf\">Slides</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=5aguccOpGes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video</a></li>\n<li>Reading<ul>\n<li><a href=\"https://seclab.stanford.edu/websec/chromium/chromium-security-architecture.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Security Architecture of the Chromium Browser</a></li>\n<li><a href=\"https://www.chromium.org/Home/chromium-security/corb-for-developers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cross-Origin Read Blocking (CORB) primer</a></li>\n<li>Skim: <a href=\"https://chromium.googlesource.com/chromium/src/+/master/services/network/cross_origin_read_blocking_explainer.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cross-Origin Read Blocking (CORB) explainer</a></li>\n<li><a href=\"https://diracdeltas.github.io/blog/backdooring-js/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Backdooring Your JavaScript Using Minifier Bugs</a></li>\n<li><a href=\"https://medium.com/hackernoon/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">I’m harvesting credit card numbers and passwords from your site. Here’s how.</a></li>\n<li><a href=\"https://shkspr.mobi/blog/2018/11/major-sites-running-unauthenticated-javascript-on-their-payment-pages/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Major sites running unauthenticated JavaScript on their payment pages</a></li>\n</ul></li>\n</ul>\n<h2>Assignments</h2>\n<h3><a href=\"assign0\">Assignment 0 – Web Programming Adventure ✈️</a></h3>\n<ul>\n<li>Assigned: Tuesday, September 24</li>\n<li>Due: Friday, October 4 at 5:00pm</li>\n</ul>\n<h3><a href=\"assign1\">Assignment 1 – Journey to the Dark Side 🌘</a></h3>\n<ul>\n<li>Assigned: Tuesday, October 8</li>\n<li>Due: Friday, October 18 at 5:00pm</li>\n</ul>\n<h3><a href=\"assign2\">Assignment 2 – Oh What a Tangled Web We Weave 🕸</a></h3>\n<ul>\n<li>Assigned: Saturday, October 26</li>\n<li>Due: Thursday, November 7 at 11:59pm</li>\n</ul>\n<h3>Assignment 3 – See Piazza</h3>\n<ul>\n<li>Assigned: Tuesday, November 12</li>\n<li>Due: Friday, November 22 at 5:00pm</li>\n</ul>\n<h3>Assignment 4 – See Piazza</h3>\n<ul>\n<li>Assigned: Mon, November 25</li>\n<li>Due: Friday, December 6 at 5:00pm</li>\n</ul>\n<br>\n<br>\n<br>\n<p>Website design by <a href=\"https://feross.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Feross Aboukhadijeh</a>.</p>\n\n    </div>\n  \n\n","text":"CS 253 Web Security Fall 2019\nThis course is a comprehensive overview of web security. The goal is to build an understanding of the most common web attacks and their countermeasures. Given the pervasive insecurity of the modern web landscape, there is a pressing need for programmers and system designers to improve their understanding of web security issues.\nWe'll be covering the fundamentals as well as the state-of-the-art in web security.\nTopics include: Principles of web security, attacks and countermeasures, the browser security model, web app vulnerabilities, injection, denial-of-service, TLS attacks, privacy, fingerprinting, same-origin policy, cross site scripting, authentication, JavaScript security, emerging threats, defense-in-depth, and techniques for writing secure code. Course projects include writing security exploits, defending insecure web apps, and implementing emerging web standards.\nMeeting time and place\nTuesdays and Thursdays, 1:30 PM - 2:50 PM in classroom 380-380Y\nCourse Staff Instructor\nFeross Aboukhadijeh (feross@cs.stanford.edu)\nTeaching Assistant\nEsther Goldstein (egolds@stanford.edu)\nOffice Hours\nFeross: Thursday 3-5pm, Gates 323\nEsther: Monday 3-5pm, Wednesday 3-5pm, Huang Basement\nCourse Policies Communication\nWe will primarily use Piazza for sending out course announcements and answering questions. Please make sure to sign up.\nWe use Gradescope for assignment submissions. Enroll with the code 97BGZB.\nTo submit anonymous feedback to us at any point during the quarter, you may use this form.\nPrerequisites\nCS 142, or an equivalent amount of web development experience, is a prerequisite. You should also be curious about web security and excited to learn clever attacks, defenses, and techniques for writing secure code.\nAn introductory security course, such as CS 155, is not a formal prerequisite. The material in this course is focused specifically on the web, while CS 155 covers security more broadly.\nAttendence\nAttendance at lectures is mandatory. Do not enroll in this course if you are taking another course that meets at the same time.\nGrading\nAssignments (75%)\nFinal Exam (25%)\nEach assignment is worth 15%. There is no midterm.\nFinal Exam\nTuesday, December 10, 3:30pm - 6:30pm in 200-305\nPrevious Final Exams\nFinal Exam 2019 (Solutions)\nMore Sample Final Exam Questions (Solutions)\nCollaboration Policy\nYou may discuss the assignments with other students and you may work together to come up with solutions to the problems. If you do so, you must list the name of your collaborators in the submission. Each student must write up their solutions independently.\nLate Submissions\nYou get three “late days” in total during the quarter. You may use a late day to submit an assignment after the deadline. You can use at most three late days for any single assignment, and you may only use late days in one-day increments (no partial late days).\nIf you submit an assignment more than 72 hours after the deadline, or if you submit an assignment late after running out of late days, you will receive no credit for the submission. Please submit your assignments on time and save your late days for extraordinary situations.\nIf you have questions about these policies, please ask us.\nSchedule Sep 24: What is Web Security? HTML &amp; JavaScript Review\nSlides\nVideo\nReading\nInside look at modern web browser (part 1)\nInside look at modern web browser (part 2)\nInside look at modern web browser (part 3)\nA Re-Introduction to JavaScript\nSep 26: HTTP, Cookies, Sessions\nSlides\nVideo\nReading\nAn overview of HTTP\nHTTP Cookies\nSkim: HTTP headers\nOct 01: Session Attacks\nSlides\nVideo\nReading\nSameSite Cookies Explained\nIncrementally Better Cookies\nCSRF Is Dead\nOct 03: Cross-Site Request Forgery, Same Origin Policy\nSlides\nVideo\nReading\nSame Origin policy\nCross-Site Request Forgery Prevention\nOct 08: Exceptions to the Same Origin Policy, Cross-Site Script Inclusion\nSlides\nVideo\nOct 10: Cross-Site Scripting (XSS)\nSlides\nVideo\nReading\nCross Site Scripting Prevention Cheat Sheet\nXSS Filter Evasion Cheat Sheet\nOct 15: Cross-Site Scripting Defenses\nSlides\nVideo\nReading\nReining in the Web with Content Security Policy\nCSP is Dead: Long Live CSP\nTrusted Types\nSanitising HTML: the DOM clobbering issue\nOct 17: Fingerprinting and Privacy on the Web\nGuest Lecture by Pete Snyder (Brave Software)\nSlides\nVideo\nReading\nOnline tracking: A 1-million-site measurement and analysis\nMost websites don't need to vibrate: A cost-benefit approach to improving browser security\nBrowser Fingerprinting: An Introduction and the Challenges Ahead\nWebKit Ad Click Attribution\nProtecting Browser State from Web Privacy Attacks\nSkim: WebKit Tracking Prevention Policy\nOct 22: Denial-of-service, Phishing, Side Channels\nSlides\nVideo\nReading\nAlice in Warningland: A Large-Scale Field Study of Browser Security\nClickjacking\nCross-Origin JavaScript Capability Leaks: Detection, Exploitation, and Defense\nOct 24: Code Injection\nSlides\nVideo\nReading\nNone\nOct 29: Transport Layer Security\nSlides\nVideo\nReading\nLooking back at the Snowden revelations\nHTTPS encryption on the web\nOct 31: HTTPS in the Real World: A Spooky Tale\nGuest Lecture by Emily Stark &amp; Chris Palmer (Google Chrome)\nSlides\nVideo\nReading\nDigiNotar on Wikipedia\nAbout Public Key Pinning\nWhat Is HPKP For?\nRolling out Public Key Pinning with HPKP Reporting\nNov 05: Authentication\nSlides\nVideo\nReading\nAuthentication Cheat Sheet\nNov 07: WebAuthn - The future of user authentication on the web 🤞\nGuest Lecture by Lucas Garron (GitHub)\nSlides\nVideo\nReading\nGuide to Web Authentication\nNov 12: No class Nov 14: Managing security concerns in a large Open Source project\nGuest Lecture by Myles Borins (Node.js technical steering committee, Google)\nSlides\nVideo\nReading\nFantastic Timers and Where to Find Them: High-Resolution Microarchitectural Attacks in JavaScript\nA Roadmap for Node.js Security\nNov 19: Server security, Safe coding practices\nSlides\nVideo\nReading\nExploiting Buffer\nNov 21: Local HTTP server security\nSlides\nVideo\nReading\nNone\nDec 03: DNS rebinding attacks\nSlides\nVideo\nReading\nMillions of Streaming Devices Are Vulnerable to a Retro Web Attack\nProtecting Browsers from DNS Rebinding Attacks\nDec 05: Browser architecture, Writing secure code\nSlides\nVideo\nReading\nThe Security Architecture of the Chromium Browser\nCross-Origin Read Blocking (CORB) primer\nSkim: Cross-Origin Read Blocking (CORB) explainer\nBackdooring Your JavaScript Using Minifier Bugs\nI’m harvesting credit card numbers and passwords from your site. Here’s how.\nMajor sites running unauthenticated JavaScript on their payment pages\nAssignments Assignment 0 – Web Programming Adventure ✈️\nAssigned: Tuesday, September 24\nDue: Friday, October 4 at 5:00pm\nAssignment 1 – Journey to the Dark Side 🌘\nAssigned: Tuesday, October 8\nDue: Friday, October 18 at 5:00pm\nAssignment 2 – Oh What a Tangled Web We Weave 🕸\nAssigned: Saturday, October 26\nDue: Thursday, November 7 at 11:59pm\nAssignment 3 – See Piazza\nAssigned: Tuesday, November 12\nDue: Friday, November 22 at 5:00pm\nAssignment 4 – See Piazza\nAssigned: Mon, November 25\nDue: Friday, December 6 at 5:00pm\nWebsite design by Feross Aboukhadijeh.","ctext":"CS 253网络安全秋季2019\n本课程是网络安全的全面概述。 目的是加深对最常见的Web攻击及其对策的理解。 鉴于现代Web领域普遍存在的不安全因素，迫切需要程序员和系统设计人员提高对Web安全问题的理解。\n我们将介绍Web安全的基础知识和最新技术。\n主题包括：网络安全原理，攻击和对策，浏览器安全模型，网络应用漏洞，注入，拒绝服务，TLS攻击，隐私，指纹识别，同源策略，跨站点脚本，身份验证，JavaScript安全， 新兴的威胁，纵深防御以及编写安全代码的技术。 课程项目包括编写安全漏洞，防御不安全的Web应用程序以及实现新兴的Web标准。\n会议时间和地点\n星期二和星期四，1:30 PM-2:50 PM在教室380-380Y\n课程教员\n阿布·哈迪贾（Abu Khadija）的机会（@ X. Stanford.Member的机会）\n教学助手\nEsther Goldstein（egolds@stanford.edu）\n工作时间\nFeross：星期四3-5pm，盖茨323\n以斯帖：星期一3-5pm，星期三3-5pm，黄地下室\n课程政策交流\n我们将主要使用Piazza发出课程公告和回答问题。 请确保注册。\n我们使用Gradescope提交作业。 注册代码为97BGZB。\n要在本季度的任何时候向我们提交匿名反馈，您可以使用此表格。\n先决条件\n先决条件是CS 142或同等的Web开发经验。 您还应该对Web安全感到好奇，并乐于学习聪明的攻击，防御措施和编写安全代码的技术。\n入门级安全课程，例如CS 155，不是正式的先决条件。 本课程中的材料专门针对Web，而CS 155涵盖了更广泛的安全性。\n出席人数\n必须参加讲座。 如果您要同时修读另一门课程，请不要注册该课程。\n等级\n作业（75％）\n期末考试（25％）\n每项作业的价值为15％。 没有期中考试。\n期末考试\n200-305年12月10日，星期二，下午3:30-下午6:30\n以前的期末考试\n2019年期末考试（解决方案）\n更多期末考试样题（解决方案）\n合作政策\n您可以与其他学生讨论作业，也可以一起提出问题的解决方案。 如果这样做，则必须在提交中列出协作者的姓名。 每个学生必须独立编写他们的解决方案。\n逾期提交\n在该季度中，您总共有3个“后期”。 您可以在截止日期之后用较晚的时间提交作业。 您一次最多只能使用三天的延迟时间，并且只能以一天的增量使用延迟的时间（不能部分延迟）。\n如果您在截止日期后超过72小时提交作业，或者如果您在迟到的工作日后提交作业，您将不会获得任何信用。 请准时提交作业，并在特殊情况下节省您的延迟时间。\n如果您对这些政策有疑问，请询问我们。\n如果您对这些政策有疑问，请询问我们。...\n滑梯\n视频\n阅读\n深入了解现代Web浏览器（第1部分）\n深入了解现代Web浏览器（第2部分）\n深入了解现代Web浏览器（第3部分）\nJavaScript的重新介绍\n9月26日：HTTP，Cookie，会话\n滑梯\n视频\n阅读\nHTTP概述\nHTTP Cookie\n略读：HTTP标头\n10月1日：会话攻击\n滑梯\n视频\n阅读\nSameSite Cookies解释\n逐步改善Cookie\nCSRF已死\n10月3日：跨站点请求伪造，同源策略\n滑梯\n视频\n阅读\n同源政策\n跨站请求伪造预防\n10月8日：相同起源策略的例外，跨站点脚本包含\n滑梯\n视频\n10月10日：跨站脚本（XSS）\n滑梯\n视频\n阅读\n跨站点脚本防护备忘单\nXSS过滤器规避速查表\n10月15日：跨站脚本防护\n滑梯\n视频\n阅读\n通过内容安全策略控制Web\nCSP已死：CSP万岁\n可信类型\n清理HTML：DOM破坏问题\n10月17日：网络上的指纹和隐私\nPete Snyder的客座演讲（勇敢的软件）\n滑梯\n视频\n阅读\n在线跟踪：一百万个站点的测量和分析\n大多数网站不需要振动：一种提高浏览器安全性的成本效益方法\n浏览器指纹：简介和未来的挑战\nWebKit广告点击归因\n保护浏览器状态免受Web隐私攻击\n略读：WebKit跟踪预防策略\n10月22日：拒绝服务，网络钓鱼，侧边渠道\n滑梯\n视频\n阅读\n爱丽丝梦游仙境：浏览器安全性的大规模实地研究\n点击劫持\n跨域JavaScript功能泄漏：检测，利用和防御\n10月24日：代码注入\n滑梯\n视频\n阅读\n没有\n10月29日：传输层安全性\n滑梯\n视频\n阅读\n回顾斯诺登的启示\n网络上的HTTPS加密\n10月31日：真实世界中的HTTPS：诡异的故事\n10月31日：真实世界中的HTTPS：诡异的故事...\n滑梯\n视频\n阅读\n维基百科上的DigiNotar\n关于公钥固定\nHPKP的用途是什么？\n通过HPKP报告推出公钥固定\n11月5日：身份验证\n滑梯\n视频\n阅读\n认证备忘单\n11月7日：WebAuthn-网络上用户身份验证的未来\nLucas Garron的客座演讲（GitHub）\n滑梯\n视频\n阅读\nWeb认证指南\n11月12日：不上课11月14日：管理大型开源项目中的安全问题\nMyles Borins的客座演讲（Node.js技术指导委员会，Google）\n滑梯\n视频\n阅读\n奇妙的计时器以及在哪里找到它们：JavaScript中的高分辨率微体系结构攻击\nNode.js安全路线图\n11月19日：服务器安全性，安全的编码做法\n滑梯\n视频\n阅读\n开发缓冲区\n11月21日：本地HTTP服务器安全性\n滑梯\n视频\n阅读\n没有\n12月3日：DNS重新绑定攻击\n滑梯\n视频\n阅读\n成千上万的流媒体设备容易遭受复古Web攻击\n保护浏览器免受DNS重新绑定攻击\n12月5日：浏览器架构，编写安全代码\n滑梯\n视频\n阅读\nChromium浏览器的安全架构\n跨域读取阻止（CORB）底漆\n略读：跨域读取阻止（CORB）解释器\n使用Minifier错误对JavaScript进行后门操作\n我正在从您的网站中获取信用卡号和密码。 就是这样。\n主要网站在其付款页面上运行未经身份验证的JavaScript\n作业作业0 – Web编程冒险✈️\n分配：9月24日，星期二\n截止时间：10月4日，星期五，下午5:00\n作业1 –黑暗之旅Side\n分配：10月8日，星期二\n截止时间：10月18日，星期五，下午5:00\n作业2 –哦，我们编织的网有多纠结🕸\n分配：10月26日，星期六\n截止日期：11月7日，星期四，晚上11:59\n作业3-见广场\n分配：11月12日，星期二\n截止日期：11月22日，星期五，下午5:00\n作业4-见广场\n指派：11月25日，星期一\n截止日期：12月6日，星期五，下午5:00\n网站设计由Feross Aboukhadijeh设计。\n"}

{"l":"https://thoughtbot.com/blog/reading-an-explain-analyze-query-plan","n":"Reading a Postgres EXPLAIN ANALYZE Query Plan","html":"\n<nav class=\"site-nav\">\n<a class=\"site-nav-skip-link\" href=\"#main-content\">Skip to main content</a>\n<a class=\"site-nav-logo-link line-height-zero\" href=\"/blog\"><svg xmlns=\"http://www.w3.org/2000/svg\" role=\"img\" width=\"146\" height=\"35\" viewBox=\"0 0 146 35\" aria-labelledby=\"aof9gw1w01kkttj86vfkhnjhlraupbm4\" class=\"site-nav-logo\"><title id=\"aof9gw1w01kkttj86vfkhnjhlraupbm4\">Blog home</title><g><path d=\"M25.077 25.778l-.432-.43c.235-.18.387-.463.387-.78 0-.543-.44-.982-.983-.982-.544 0-.983.44-.983.98 0 .32.154.606.392.785l-.433.432c-.348-.29-.57-.785-.57-1.273 0-.392.145-.534.38-1.085h-.193v-4.96h-.277v10.557l.277.267v.75h-4.97v-.75l.67-.353h.157V25.63h-1.655v3.392l.552.267v.846l-4.695.008v-.855l.455-.337-.006-10.488h-.448v4.96h-.256c.236.55.38.692.38 1.084 0 .486-.22.95-.57 1.243l-.43-.418c.237-.18.39-.456.39-.777 0-.542-.44-.977-.98-.977-.544 0-.984.442-.984.983 0 .318.152.602.387.78l-.433.433c-.345-.292-.605-.726-.605-1.212 0-.39.34-.75.34-1.027v-7.695c0-.296.295-.533.59-.533h14.09c.297 0 .507.238.507.534v7.695c.55.276.445.635.445 1.027 0 .484-.153.92-.498 1.21zM14.05 9.094h7.183c.296 0 .582.132.582.427v4.677c0 .294-.286.685-.582.685H14.05c-.293 0-.52-.39-.52-.685V9.52c0-.294.227-.426.52-.426zm6.446-1.52l-.433.616c-.548-.525-1.437-.874-2.418-.874-.985 0-1.877.35-2.425.88l-.432-.617c.684-.616 1.71-1.006 2.857-1.006 1.143 0 2.167.388 2.85 1zm-.007-.96c-.745-.563-1.746-.872-2.818-.872-1.073 0-2.073.31-2.817.87-.176.134-.33.276-.465.427l-.436-.622C14.794 5.558 16.147 5 17.672 5c1.49 0 2.813.532 3.658 1.358l-.434.618c-.12-.128-.256-.25-.407-.363zM17.644 3.49c1.846 0 3.488.662 4.53 1.69l-.43.612c-.894-.94-2.398-1.56-4.1-1.56-1.706 0-3.214.62-4.107 1.566l-.43-.614c1.042-1.03 2.686-1.694 4.537-1.694zM17.642.077C8.022.077.225 7.857.225 17.46c0 9.598 7.798 17.38 17.417 17.38 9.62 0 17.417-7.782 17.417-17.38C35.06 7.857 27.26.076 17.64.076z\"></path><path d=\"M15.812 11.97c-.257 0-.467-.21-.467-.467 0-.26.21-.467.467-.467.26 0 .47.208.47.467 0 .258-.21.467-.47.467zm0-1.38c-.504 0-.913.41-.913.913 0 .503.408.913.912.913.505 0 .915-.41.915-.913 0-.504-.41-.913-.915-.913zM19.483 11.97c-.258 0-.467-.21-.467-.467 0-.26.21-.467.467-.467.258 0 .47.208.47.467 0 .258-.212.467-.47.467zm0-1.38c-.506 0-.916.41-.916.913 0 .503.41.913.916.913.505 0 .915-.41.915-.913 0-.504-.41-.913-.915-.913z\"></path></g><g><path d=\"M61.728 23.69h-2.406v-5.67c0-1.06-.17-1.832-.51-2.313-.34-.482-.916-.722-1.725-.722-.965 0-1.71.346-2.236 1.04v7.665h-2.405V7.765h2.406v6.116c.74-.622 1.563-.934 2.47-.934 2.94 0 4.408 1.692 4.408 5.075v5.67M63.45 18.425c0-.765.126-1.483.374-2.156s.603-1.253 1.065-1.742c.46-.488 1.02-.874 1.68-1.157.66-.282 1.395-.424 2.204-.424.81 0 1.54.142 2.193.425.653.284 1.21.673 1.672 1.17.46.494.818 1.075 1.074 1.74.256.665.383 1.38.383 2.145 0 .764-.124 1.48-.372 2.144-.25.664-.604 1.245-1.065 1.74-.46.496-1.022.885-1.682 1.168-.66.283-1.395.425-2.204.425-.823 0-1.56-.142-2.214-.425-.653-.283-1.21-.67-1.67-1.157-.463-.488-.818-1.065-1.066-1.73-.248-.665-.373-1.387-.373-2.165zm2.47 0c0 1.06.253 1.903.757 2.526.504.624 1.203.935 2.097.935.895 0 1.594-.31 2.098-.934.503-.622.755-1.464.755-2.525 0-1.062-.252-1.9-.755-2.517-.504-.615-1.203-.923-2.098-.923-.894 0-1.593.308-2.097.923-.504.616-.756 1.455-.756 2.517zM84.975 23.69H82.76l-.105-.785c-.71.665-1.555.998-2.534.998-2.866 0-4.3-1.65-4.3-4.948v-5.818h2.406v5.648c0 1.062.178 1.837.532 2.326.355.49.916.733 1.682.733.937 0 1.647-.325 2.13-.977v-7.73h2.405V23.69M91.546 29c-.824 0-1.547-.086-2.172-.256-.625-.17-1.143-.4-1.554-.69-.412-.29-.724-.623-.937-.998-.213-.375-.32-.775-.32-1.2 0-1.033.597-1.82 1.79-2.357-.668-.37-1.002-.857-1.002-1.466 0-.637.37-1.132 1.108-1.486-1.12-.78-1.682-1.918-1.682-3.42 0-.593.1-1.15.3-1.665.197-.517.48-.96.85-1.328.37-.368.82-.658 1.352-.87.532-.212 1.132-.32 1.8-.32.95 0 1.78.228 2.49.68.682-.34 1.47-.51 2.364-.51h.532l-.19 1.55h-.81c-.242 0-.512.022-.81.065.497.693.745 1.486.745 2.378 0 .566-.096 1.1-.288 1.603-.19.504-.472.946-.84 1.328-.37.382-.82.683-1.353.903-.533.22-1.133.33-1.8.33-.44 0-.852-.043-1.235-.128-.213.113-.32.255-.32.425 0 .127.047.234.14.318.09.085.244.163.457.234.213.07.5.137.862.2.362.065.82.132 1.374.202.468.07.95.163 1.447.277.497.112.95.282 1.363.508.412.227.752.524 1.022.892s.42.842.447 1.422c0 1.02-.447 1.837-1.34 2.453-.896.616-2.16.924-3.79.924zm-.47-14.228c-.68 0-1.202.213-1.564.637-.362.424-.543.997-.543 1.72 0 .72.184 1.295.553 1.72.37.424.894.636 1.576.636.68 0 1.202-.216 1.563-.647.362-.433.544-1.01.544-1.732s-.185-1.292-.554-1.71c-.37-.417-.894-.626-1.576-.626zm.576 9.534l-1.47-.212c-.453.14-.822.346-1.106.615-.284.268-.426.587-.426.955 0 .48.25.867.745 1.157.497.29 1.193.436 2.087.436.894 0 1.614-.142 2.16-.425.547-.283.82-.65.82-1.104 0-.412-.24-.72-.723-.925-.484-.205-1.18-.37-2.088-.5zM121.32 23.903c-1.092 0-2.03-.347-2.81-1.04l-.085.827h-2.235V7.765h2.406v6.094c.695-.61 1.604-.914 2.725-.914.767 0 1.463.142 2.088.425.624.284 1.156.67 1.596 1.158.44.49.78 1.07 1.022 1.74.242.674.362 1.392.362 2.157 0 .764-.117 1.48-.35 2.144-.235.664-.572 1.245-1.012 1.74-.44.496-.973.885-1.597 1.168-.626.283-1.328.425-2.11.425zm-.19-8.918c-.824 0-1.47.304-1.938.913-.47.608-.703 1.45-.703 2.527 0 1.104.233 1.957.702 2.558.468.602 1.114.902 1.937.902.85 0 1.53-.32 2.033-.966.504-.645.755-1.476.755-2.495 0-1.02-.248-1.848-.745-2.485-.496-.637-1.178-.955-2.044-.955zM107.016 23.69h-2.406v-5.67c0-1.06-.17-1.832-.51-2.313-.342-.482-.917-.722-1.726-.722-.965 0-1.71.346-2.235 1.04v7.665h-2.407V7.765h2.406v6.116c.737-.622 1.56-.934 2.47-.934 2.937 0 4.406 1.692 4.406 5.075v5.67M114.393 21.928l-.213 1.975h-1.83c-.47 0-.88-.07-1.236-.213-.355-.14-.65-.332-.884-.573-.234-.24-.408-.524-.52-.85-.115-.325-.172-.68-.172-1.06V15.09h-1.597l.214-1.953h1.384V10l2.406-.254v3.39h2.47v1.955h-2.47v5.012c0 .44.014.782.043 1.03.028.247.1.428.213.54.113.115.29.185.532.213.24.03.575.043 1 .043h.66M127.674 18.425c0-.765.124-1.483.373-2.156.248-.673.603-1.253 1.064-1.742.463-.488 1.023-.874 1.683-1.157.66-.282 1.395-.424 2.204-.424.81 0 1.54.142 2.193.425.653.284 1.21.673 1.67 1.17.463.494.82 1.075 1.077 1.74.255.665.383 1.38.383 2.145 0 .764-.124 1.48-.373 2.144-.248.664-.603 1.245-1.064 1.74-.46.496-1.022.885-1.682 1.168-.66.283-1.394.425-2.203.425-.823 0-1.56-.142-2.214-.425-.653-.283-1.21-.67-1.672-1.157-.46-.488-.815-1.065-1.063-1.73-.25-.665-.373-1.387-.373-2.165zm2.47 0c0 1.06.252 1.903.756 2.526.504.624 1.203.935 2.097.935.894 0 1.593-.31 2.097-.934.504-.622.756-1.464.756-2.525 0-1.062-.252-1.9-.756-2.517-.504-.615-1.203-.923-2.097-.923-.894 0-1.593.308-2.097.923-.504.616-.756 1.455-.756 2.517zM145.09 21.928l-.213 1.975h-1.83c-.47 0-.88-.07-1.236-.213-.354-.14-.65-.332-.883-.573-.234-.24-.408-.524-.52-.85-.115-.325-.172-.68-.172-1.06V15.09h-1.597l.213-1.953h1.385V10l2.406-.254v3.39h2.47v1.955h-2.47v5.012c0 .44.015.782.044 1.03.028.247.1.428.213.54.113.115.29.185.532.213.24.03.574.043 1 .043h.66M50.723 21.928l-.213 1.975h-1.83c-.47 0-.88-.07-1.236-.213-.355-.14-.65-.332-.884-.573-.234-.24-.408-.524-.522-.85-.113-.325-.17-.68-.17-1.06V15.09H44.27l.214-1.953h1.384V10l2.406-.254v3.39h2.47v1.955h-2.47v5.012c0 .44.014.782.043 1.03.028.247.1.428.213.54.113.115.29.185.532.213.24.03.575.043 1 .043h.66\"></path></g></svg>\n\n</a><ul class=\"site-nav-links\">\n<li>\n<a class=\"site-nav-link\" href=\"/blog/tags\">All Topics</a>\n</li>\n<li>\n<a class=\"site-nav-link\" href=\"/blog/design\">Design</a>\n</li>\n<li>\n<a class=\"site-nav-link\" href=\"/blog/web\">Web</a>\n</li>\n<li>\n<a class=\"site-nav-link\" href=\"/blog/ios\">iOS</a>\n</li>\n<li>\n<a class=\"site-nav-link\" href=\"/blog/android\">Android</a>\n</li>\n<li>\n<a class=\"site-nav-link\" href=\"/blog/search\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 310.42 310.42\" role=\"img\" aria-labelledby=\"a6829wmpdakb4vop7qipdboxohs5o5ny\"><title id=\"a6829wmpdakb4vop7qipdboxohs5o5ny\">Search</title>\n  <path d=\"M273.587 214.965c49.11-49.11 49.11-129.02 0-178.132-49.11-49.11-129.02-49.11-178.13 0C53.793 78.497 47.483 140.463 76.51 188.85c0 0 2.085 3.498-.73 6.312-16.066 16.064-64.264 64.263-64.264 64.263-12.79 12.79-15.836 30.675-4.493 42.02l1.953 1.95c11.343 11.346 29.23 8.302 42.02-4.49l64.127-64.127c2.95-2.95 6.448-.866 6.448-.866 48.39 29.026 110.356 22.717 152.02-18.947zM118.71 191.71c-36.287-36.288-36.286-95.332.002-131.62 36.288-36.287 95.332-36.288 131.62 0 36.287 36.287 36.287 95.332 0 131.62-36.29 36.286-95.332 36.286-131.62 0z\" fill=\"#454547\"></path>\n  <path d=\"M126.75 118.424c-1.69 0-3.406-.332-5.06-1.03-6.612-2.8-9.705-10.427-6.907-17.04 17.586-41.558 65.703-61.06 107.26-43.475 6.612 2.794 9.705 10.422 6.907 17.034-2.8 6.612-10.425 9.703-17.04 6.906-28.353-11.997-61.185 1.31-73.182 29.664-2.1 4.96-6.913 7.938-11.978 7.938z\" fill=\"#454547\"></path>\n</svg>\n\n</a></li>\n</ul>\n<a class=\"hiring-cta\" onclick=\"analytics.track('Blog Hiring Button', { category: 'Click' });\" href=\"/jobs\">We're hiring!</a>\n</nav>\n\n<div class=\"container\">\n\n<article class=\"post text\" data-url=\"/blog/reading-an-explain-analyze-query-plan\" id=\"main-content\" itemscope=\"\" itemtype=\"https://schema.org/CreativeWork\" role=\"main\">\n<header>\n<h1 class=\"title\">\nReading a Postgres EXPLAIN ANALYZE Query Plan\n</h1>\n<div class=\"meta\">\n<div class=\"meta-author\">\n<a href=\"/blog/authors/caleb-hearth\">Caleb Hearth</a>\n</div>\n<time class=\"meta-date\" datetime=\"2020-03-31T21:16:07Z\" itemprop=\"dateModified\">\nJuly 26, 2016\n<span class=\"meta-updated\">updated on</span>\nMarch 31, 2020\n</time>\n<ul class=\"meta-tag-list\">\n<li class=\"meta-tag-item\">\n<a href=\"/blog/tags/postgres\">postgres</a>\n</li>\n<li class=\"meta-tag-item\">\n<a href=\"/blog/tags/performance\">performance</a>\n</li>\n<li class=\"meta-tag-item\">\n<a href=\"/blog/tags/data\">data</a>\n</li>\n<li class=\"meta-tag-item\">\n<a href=\"/blog/tags/sql\">sql</a>\n</li>\n</ul>\n\n</div>\n\n</header>\n<div class=\"post-body\">\n<p>The most powerful tool at our disposal for understanding and optimizing SQL\nqueries is <a href=\"https://www.postgresql.org/docs/9.5/static/sql-explain.html\"><code>EXPLAIN ANALYZE</code></a>, which is a Postgres command that accepts a\nstatement such as <code>SELECT ...</code>, <code>UPDATE ...</code>, or <code>DELETE ...</code>, executes the\nstatement, and instead of returning the data provides a query plan detailing\nwhat approach the planner took to executing the statement provided.</p>\n\n<p>Here’s a query pulled from the <a href=\"https://www.postgresql.org/docs/9.5/static/using-explain.html\">Postgres Using EXPLAIN page</a>:</p>\n<div class=\"highlight\"><pre class=\"highlight sql\"><code><span class=\"k\">EXPLAIN</span> <span class=\"k\">ANALYZE</span> <span class=\"k\">SELECT</span> <span class=\"o\">*</span>\n<span class=\"k\">FROM</span> <span class=\"n\">tenk1</span> <span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">tenk2</span> <span class=\"n\">t2</span>\n<span class=\"k\">WHERE</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">unique1</span> <span class=\"o\">&lt;</span> <span class=\"mi\">100</span> <span class=\"k\">AND</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">unique2</span> <span class=\"o\">=</span> <span class=\"n\">t2</span><span class=\"p\">.</span><span class=\"n\">unique2</span>\n<span class=\"k\">ORDER</span> <span class=\"k\">BY</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">fivethous</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>And the query plan it generates:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>                                                                 QUERY PLAN\n--------------------------------------------------------------------------------------------------------------------------------------------\n Sort  (cost=717.34..717.59 rows=101 width=488) (actual time=7.761..7.774 rows=100 loops=1)\n   Sort Key: t1.fivethous\n   Sort Method: quicksort  Memory: 77kB\n   -&gt;  Hash Join  (cost=230.47..713.98 rows=101 width=488) (actual time=0.711..7.427 rows=100 loops=1)\n         Hash Cond: (t2.unique2 = t1.unique2)\n         -&gt;  Seq Scan on tenk2 t2  (cost=0.00..445.00 rows=10000 width=244) (actual time=0.007..2.583 rows=10000 loops=1)\n         -&gt;  Hash  (cost=229.20..229.20 rows=101 width=244) (actual time=0.659..0.659 rows=100 loops=1)\n               Buckets: 1024  Batches: 1  Memory Usage: 28kB\n               -&gt;  Bitmap Heap Scan on tenk1 t1  (cost=5.07..229.20 rows=101 width=244) (actual time=0.080..0.526 rows=100 loops=1)\n                     Recheck Cond: (unique1 &lt; 100)\n                     -&gt;  Bitmap Index Scan on tenk1_unique1  (cost=0.00..5.04 rows=101 width=0) (actual time=0.049..0.049 rows=100 loops=1)\n                           Index Cond: (unique1 &lt; 100)\n Planning time: 0.194 ms\n Execution time: 8.008 ms\n</code></pre></div>\n<p>Postgres builds a tree structure of plan nodes representing the different\nactions taken, with the root and each <code>-&gt;</code> pointing to one of them. In some\ncases <code>EXPLAIN ANALYZE</code> provides additional execution statistics beyond the\nexecution times and row counts, such as <code>Sort</code> and <code>Hash</code> above. Any line other\nthan the first without an <code>-&gt;</code> is such information, so the structure of the\nquery is:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>Sort\n└── Hash Join\n    ├── Seq Scan\n    └── Hash\n        └── Bitmap Heap Scan\n            └── Bitmap Index Scan\n</code></pre></div>\n<p>Each tree’s branches represent sub-actions, and you’d work inside-out to\ndetermine what’s happening “first” (though the order of nodes at the same level\ncould be different).</p>\n\n<p>The first thing done is a <code>Bitmap Index Scan</code> on the <code>tenk_unique1</code> index:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>-&gt;  Bitmap Index Scan on tenk1_unique1  (cost=0.00..5.04 rows=101 width=0) (actual time=0.049..0.049 rows=100 loops=1)\n      Index Cond: (unique1 &lt; 100)\n</code></pre></div>\n<p>This corresponds to the SQL <code>WHERE t1.unique1 &lt; 100</code>. Postgres is finding the\nlocations of the rows matching the index condition <code>unique1 &lt; 100</code>. The rows\nthemselves aren’t being returned here. The cost estimate <code>(cost=0.00..5.04\nrows=101 width=0)</code> means that Postgres expects that it will “cost” 5.04 of an <u title=\"The estimated cost is computed as (disk pages read * seq_page_cost) +\n(rows scanned * cpu_tuple_cost).\">arbitrary unit of computation</u> to find\nthese values. The 0.00 is the cost at which this node can begin working (in this\ncase, just startup time for the query). <code>rows</code> is the estimated number of rows\nthis Index Scan will return, and <code>width</code> is the estimated size in bytes of the\nreturned rows (0 because we only care about the location, not the content of the\nrows).</p>\n\n<p>Because we ran <code>EXPLAIN</code> with the <code>ANALYZE</code> option, the query was actually\nexecuted and timing information was captured. <code>(actual time=0.049..0.049\nrows=100 loops=1)</code> means that the index scan was executed 1 time (the <code>loops</code>\nvalue), that it returned 100 rows, and that the actual time was 0.. In the case\nof a node executed more than once, the actual time is an average of each\niteration and you would multiply the value by the number of loops to get real\ntime. The range values may also differ which gives an idea of min/max times\nspent. This establishes a ratio for the costs that each cost unit of <span style=\"white-space: nowrap\">0.049ms / 5.04 units ≈ 0.01ms/unit</span> for this\nquery.</p>\n\n<p>The results of the Index Scan are passed up to a <code>Bitmap Heap Scan</code> action. In\nthis node, Postgres is taking the locations of the rows in the tenk1 table,\naliased as t1, where <code>unique1 &lt; 100</code> and fetching the rows from the table\nitself.</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>-&gt;  Bitmap Heap Scan on tenk1 t1  (cost=5.07..229.20 rows=101 width=244) (actual time=0.080..0.526 rows=100 loops=1)\n      Recheck Cond: (unique1 &lt; 100)\n</code></pre></div>\n<p>We can see that the cost expectations, when multiplied by the 0.01 value we\ncalculated, would mean a rough expected time of <span style=\"white-space:\nnowrap\">(229.20 - 5.07) * 0.01 ≈ 2.24ms</span>, and we see an actual time of\n0.526ms per row, which is off by a factor of 4. This may be because the cost\nestimate is an upper bound and not all rows needed to be read, or because the\nrecheck condition is always true.</p>\n\n<p>The combination of <code>Bitmap Index Scan</code> and <code>Bitmap Heap Scan</code> is much more\nexpensive than reading the rows sequentially from the table (a <code>Seq Scan</code>), but\nbecause relatively few rows need to be visited in this case the two step process\nends up being faster. This is further sped by sorting the rows into physical\norder before fetching them, which minimizes the cost of separate fetches. The\n“bitmap” in the node names does the sorting.</p>\n\n<p>The results of the heap scan, those rows from tenk1 for which <code>unique1 &lt; 100</code> is\ntrue, are inserted into an in-memory Hash table as they are read. As we can see\nby the costs, this takes no time at all.</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>-&gt;  Hash  (cost=229.20..229.20 rows=101 width=244) (actual time=0.659..0.659 rows=100 loops=1)\n      Buckets: 1024  Batches: 1  Memory Usage: 28kB\n</code></pre></div>\n<p>The Hash node includes information about number of hash buckets and batches, as\nwell as peak memory usage. If Batches &gt; 1 there’s also disk usage involved, but\nthat is not shown. The memory usage makes sense at <span style=\"white-space:\nnowrap\">100 rows * 244 bytes = 24.4 kB</span>, which is close enough to the\n28kB for our purposes that we can assume it’s the memory taken by the Hash keys\nthemselves.</p>\n\n<p>Next, Postgres reads all 10000 rows from tenk2 (aliased as t2) and checks them\nagainst the Hash of tenk1 rows. Hash Join means that the rows of one table are\nentered into an in-memory hash (which we’ve built up to so far), after which the\nrows of another table is scanned and its values probed against the hash table\nfor matches. We see the conditions of the “match” on the second line, <code>Hash\nCond: (t2.unique2 = t1.unique2)</code>. Note that because the query is selecting all\nvalues from both tenk1 and tenk2, the width of each row doubles during the Hash\nJoin.</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>-&gt;  Hash Join  (cost=230.47..713.98 rows=101 width=488) (actual time=0.711..7.427 rows=100 loops=1)\n      Hash Cond: (t2.unique2 = t1.unique2)\n      -&gt;  Seq Scan on tenk2 t2  (cost=0.00..445.00 rows=10000 width=244) (actual time=0.007..2.583 rows=10000 loops=1)\n</code></pre></div>\n<p>Now that all rows that meet our conditions have been collected, we can sort the\nresult set by the <code>Sort Key: t1.fivethous</code>.</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>Sort  (cost=717.34..717.59 rows=101 width=488) (actual time=7.761..7.774 rows=100 loops=1)\n  Sort Key: t1.fivethous\n  Sort Method: quicksort  Memory: 77kB\n</code></pre></div>\n<p>The Sort node includes information about the algorithm used to sort,\n<code>quicksort</code>, whether the sort was done in memory or on disk (which greatly\neffects speed), and the amount of memory/disk space needed.</p>\n\n<p>Understanding how to read query plans is great for optimizing queries. For\nexample, Seq Scan nodes often indicate an opportunity for an index to be added,\nwhich is much faster to read. Familiarizing yourself with these plans will make\nyou a better database engineer. For more examples of query plans, read <a href=\"https://www.postgresql.org/docs/9.5/static/using-explain.html\">Using\n<code>EXPLAIN</code></a> from which this example was taken.</p>\n\n<p>Now that you’re able to read a query plan, <a href=\"https://thoughtbot.com/blog/advanced-postgres-performance-tips\" title=\"Advanced Postgres Performance Tips\">learn to optimize performance</a>.</p>\n\n</div>\n<aside class=\"related-articles\">\n<h2>If you enjoyed this post, you might also like:</h2>\n<ol>\n<li>\n<a href=\"/blog/ordering-within-a-sql-group-by-clause\">Finding the Oldest/Youngest Records Within a Group</a>\n</li>\n<li>\n<a href=\"/blog/postgresql-performance-considerations\">PostgreSQL Performance Considerations</a>\n</li>\n<li>\n<a href=\"/blog/postgres-index-types\">Postgres Index Types</a>\n</li>\n</ol>\n</aside>\n</article>\n\n</div>\n<section class=\"container\">\n<div id=\"promoted\">\n<div class=\"ads\">\n<img alt=\"Developer working on a Code Audit at their desk\" class=\"ads__image\" src=\"https://thoughtbot.com/blog/assets/article-ads/code-audit-29b1862f214a72e74c82707e6f8d765b62c59c735d8f2135f768729c4b9360ea.jpg\">\n<div class=\"ads__body\">\n<h3 class=\"ads__title\">\nUpgrade your codebase with a Code Audit\n</h3>\n<p>\nLearn how we can help you understand the current state of your code\nquality, speed up delivery times, improve developer happiness, and level\nup your user experience\n</p>\n<a class=\"button\" href=\"https://thoughtbot.com/services/code-audit\">Learn more about a Code Audit</a>\n</div>\n</div>\n\n\n</div>\n\n</section>\n<div class=\"global-footer\">\n<div class=\"container container-wide\">\n<nav class=\"global-footer-link-section\">\n<ul class=\"global-footer-link-list\">\n<li>\n<a href=\"https://thoughtbot.com/services\">Services\n</a></li>\n<li>\n<a href=\"https://thoughtbot.com/case-studies\">Case Studies\n</a></li>\n<li>\n<a href=\"https://thoughtbot.com/resources\">Resources\n</a></li>\n<li>\n<a href=\"https://thoughtbot.com/hire-us\">Hire Us\n</a></li>\n</ul>\n<ul class=\"global-footer-link-list\">\n<li>\n<a href=\"https://thoughtbot.com/our-company\">Our Company\n</a></li>\n<li>\n<a href=\"https://thoughtbot.com/purpose\">Purpose\n</a></li>\n<li>\n<a href=\"https://thoughtbot.com/blog\">Blog\n</a></li>\n<li>\n<a href=\"https://thoughtbot.com/jobs\">Join our team\n</a></li>\n</ul>\n<ul class=\"global-footer-link-list\">\n<li>\n<a href=\"https://twitter.com/thoughtbot\">Twitter\n</a></li>\n<li>\n<a href=\"https://github.com/thoughtbot\">GitHub\n</a></li>\n<li>\n<a href=\"https://dribbble.com/thoughtbot\">Dribbble\n</a></li>\n<li>\n<a href=\"https://www.instagram.com/thoughtbot/\">Instagram\n</a></li>\n</ul>\n</nav>\n<footer class=\"global-footer-copywright-section\">\n<p class=\"global-footer-copywright-prose\">\n© 2020\n<a href=\"https://thoughtbot.com\">thoughtbot, inc.</a>\nThe design of a robot and thoughtbot are registered trademarks of\nthoughtbot, inc.\n<a href=\"//www.iubenda.com/privacy-policy/7827608\">Privacy Policy</a>\n</p>\n</footer>\n</div>\n</div>\n\n\n  <script type=\"text/javascript\" async=\"\" src=\"https://js.hs-analytics.net/analytics/1587651000000/5257758.js\" id=\"hs-analytics\"></script><script type=\"text/javascript\" async=\"\" src=\"https://www.google-analytics.com/analytics.js\"></script><script type=\"text/javascript\" async=\"\" src=\"https://cdn.segment.com/analytics.js/v1/wperrhev8f/analytics.min.js\"></script><script>\n    !function(){var analytics=window.analytics=window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error(\"Segment snippet included twice.\");else{analytics.invoked=!0;analytics.methods=[\"trackSubmit\",\"trackClick\",\"trackLink\",\"trackForm\",\"pageview\",\"identify\",\"reset\",\"group\",\"track\",\"ready\",\"alias\",\"debug\",\"page\",\"once\",\"off\",\"on\"];analytics.factory=function(t){return function(){var e=Array.prototype.slice.call(arguments);e.unshift(t);analytics.push(e);return analytics}};for(var t=0;t<analytics.methods.length;t++){var e=analytics.methods[t];analytics[e]=analytics.factory(e)}analytics.load=function(t){var e=document.createElement(\"script\");e.type=\"text/javascript\";e.async=!0;e.src=(\"https:\"===document.location.protocol?\"https://\":\"http://\")+\"cdn.segment.com/analytics.js/v1/\"+t+\"/analytics.min.js\";var n=document.getElementsByTagName(\"script\")[0];n.parentNode.insertBefore(e,n)};analytics.SNIPPET_VERSION=\"4.0.0\";\n    analytics.load(\"wperrhev8f\");\n    analytics.page();\n    }}();\n  </script>\n\n\n\n\n","text":"Skip to main content Blog home\nAll Topics\nDesign\nWeb\niOS\nAndroid\nSearch\nWe're hiring!\nReading a Postgres EXPLAIN ANALYZE Query Plan\nCaleb Hearth\nJuly 26, 2016\nupdated on\nMarch 31, 2020\npostgres\nperformance\ndata\nsql\nThe most powerful tool at our disposal for understanding and optimizing SQL\nqueries is EXPLAIN ANALYZE, which is a Postgres command that accepts a\nstatement such as SELECT ..., UPDATE ..., or DELETE ..., executes the\nstatement, and instead of returning the data provides a query plan detailing\nwhat approach the planner took to executing the statement provided.\nHere’s a query pulled from the Postgres Using EXPLAIN page:\n<code><span class=\"k\">EXPLAIN</span> <span class=\"k\">ANALYZE</span> <span class=\"k\">SELECT</span> <span class=\"o\">*</span>\n<span class=\"k\">FROM</span> <span class=\"n\">tenk1</span> <span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">tenk2</span> <span class=\"n\">t2</span>\n<span class=\"k\">WHERE</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">unique1</span> <span class=\"o\">&lt;</span> <span class=\"mi\">100</span> <span class=\"k\">AND</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">unique2</span> <span class=\"o\">=</span> <span class=\"n\">t2</span><span class=\"p\">.</span><span class=\"n\">unique2</span>\n<span class=\"k\">ORDER</span> <span class=\"k\">BY</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">fivethous</span><span class=\"p\">;</span>\n</code>\nAnd the query plan it generates:\n<code> QUERY PLAN\n-------------------------------------------------------------------------------------------------------------------------------------------- Sort (cost=717.34..717.59 rows=101 width=488) (actual time=7.761..7.774 rows=100 loops=1) Sort Key: t1.fivethous Sort Method: quicksort Memory: 77kB -&gt; Hash Join (cost=230.47..713.98 rows=101 width=488) (actual time=0.711..7.427 rows=100 loops=1) Hash Cond: (t2.unique2 = t1.unique2) -&gt; Seq Scan on tenk2 t2 (cost=0.00..445.00 rows=10000 width=244) (actual time=0.007..2.583 rows=10000 loops=1) -&gt; Hash (cost=229.20..229.20 rows=101 width=244) (actual time=0.659..0.659 rows=100 loops=1) Buckets: 1024 Batches: 1 Memory Usage: 28kB -&gt; Bitmap Heap Scan on tenk1 t1 (cost=5.07..229.20 rows=101 width=244) (actual time=0.080..0.526 rows=100 loops=1) Recheck Cond: (unique1 &lt; 100) -&gt; Bitmap Index Scan on tenk1_unique1 (cost=0.00..5.04 rows=101 width=0) (actual time=0.049..0.049 rows=100 loops=1) Index Cond: (unique1 &lt; 100) Planning time: 0.194 ms Execution time: 8.008 ms\n</code>\nPostgres builds a tree structure of plan nodes representing the different\nactions taken, with the root and each -&gt; pointing to one of them. In some\ncases EXPLAIN ANALYZE provides additional execution statistics beyond the\nexecution times and row counts, such as Sort and Hash above. Any line other\nthan the first without an -&gt; is such information, so the structure of the\nquery is:\n<code>Sort\n└── Hash Join ├── Seq Scan └── Hash └── Bitmap Heap Scan └── Bitmap Index Scan\n</code>\nEach tree’s branches represent sub-actions, and you’d work inside-out to\ndetermine what’s happening “first” (though the order of nodes at the same level\ncould be different).\nThe first thing done is a Bitmap Index Scan on the tenk_unique1 index:\n<code>-&gt; Bitmap Index Scan on tenk1_unique1 (cost=0.00..5.04 rows=101 width=0) (actual time=0.049..0.049 rows=100 loops=1) Index Cond: (unique1 &lt; 100)\n</code>\nThis corresponds to the SQL WHERE t1.unique1 &lt; 100. Postgres is finding the\nlocations of the rows matching the index condition unique1 &lt; 100. The rows\nthemselves aren’t being returned here. The cost estimate (cost=0.00..5.04\nrows=101 width=0) means that Postgres expects that it will “cost” 5.04 of an arbitrary unit of computation to find\nthese values. The 0.00 is the cost at which this node can begin working (in this\ncase, just startup time for the query). rows is the estimated number of rows\nthis Index Scan will return, and width is the estimated size in bytes of the\nreturned rows (0 because we only care about the location, not the content of the\nrows).\nBecause we ran EXPLAIN with the ANALYZE option, the query was actually\nexecuted and timing information was captured. (actual time=0.049..0.049\nrows=100 loops=1) means that the index scan was executed 1 time (the loops\nvalue), that it returned 100 rows, and that the actual time was 0.. In the case\nof a node executed more than once, the actual time is an average of each\niteration and you would multiply the value by the number of loops to get real\ntime. The range values may also differ which gives an idea of min/max times\nspent. This establishes a ratio for the costs that each cost unit of 0.049ms / 5.04 units ≈ 0.01ms/unit for this\nquery.\nThe results of the Index Scan are passed up to a Bitmap Heap Scan action. In\nthis node, Postgres is taking the locations of the rows in the tenk1 table,\naliased as t1, where unique1 &lt; 100 and fetching the rows from the table\nitself.\n<code>-&gt; Bitmap Heap Scan on tenk1 t1 (cost=5.07..229.20 rows=101 width=244) (actual time=0.080..0.526 rows=100 loops=1) Recheck Cond: (unique1 &lt; 100)\n</code>\nWe can see that the cost expectations, when multiplied by the 0.01 value we\ncalculated, would mean a rough expected time of (229.20 - 5.07) * 0.01 ≈ 2.24ms, and we see an actual time of\n0.526ms per row, which is off by a factor of 4. This may be because the cost\nestimate is an upper bound and not all rows needed to be read, or because the\nrecheck condition is always true.\nThe combination of Bitmap Index Scan and Bitmap Heap Scan is much more\nexpensive than reading the rows sequentially from the table (a Seq Scan), but\nbecause relatively few rows need to be visited in this case the two step process\nends up being faster. This is further sped by sorting the rows into physical\norder before fetching them, which minimizes the cost of separate fetches. The\n“bitmap” in the node names does the sorting.\nThe results of the heap scan, those rows from tenk1 for which unique1 &lt; 100 is\ntrue, are inserted into an in-memory Hash table as they are read. As we can see\nby the costs, this takes no time at all.\n<code>-&gt; Hash (cost=229.20..229.20 rows=101 width=244) (actual time=0.659..0.659 rows=100 loops=1) Buckets: 1024 Batches: 1 Memory Usage: 28kB\n</code>\nThe Hash node includes information about number of hash buckets and batches, as\nwell as peak memory usage. If Batches &gt; 1 there’s also disk usage involved, but\nthat is not shown. The memory usage makes sense at 100 rows * 244 bytes = 24.4 kB, which is close enough to the\n28kB for our purposes that we can assume it’s the memory taken by the Hash keys\nthemselves.\nNext, Postgres reads all 10000 rows from tenk2 (aliased as t2) and checks them\nagainst the Hash of tenk1 rows. Hash Join means that the rows of one table are\nentered into an in-memory hash (which we’ve built up to so far), after which the\nrows of another table is scanned and its values probed against the hash table\nfor matches. We see the conditions of the “match” on the second line, Hash\nCond: (t2.unique2 = t1.unique2). Note that because the query is selecting all\nvalues from both tenk1 and tenk2, the width of each row doubles during the Hash\nJoin.\n<code>-&gt; Hash Join (cost=230.47..713.98 rows=101 width=488) (actual time=0.711..7.427 rows=100 loops=1) Hash Cond: (t2.unique2 = t1.unique2) -&gt; Seq Scan on tenk2 t2 (cost=0.00..445.00 rows=10000 width=244) (actual time=0.007..2.583 rows=10000 loops=1)\n</code>\nNow that all rows that meet our conditions have been collected, we can sort the\nresult set by the Sort Key: t1.fivethous.\n<code>Sort (cost=717.34..717.59 rows=101 width=488) (actual time=7.761..7.774 rows=100 loops=1) Sort Key: t1.fivethous Sort Method: quicksort Memory: 77kB\n</code>\nThe Sort node includes information about the algorithm used to sort,\nquicksort, whether the sort was done in memory or on disk (which greatly\neffects speed), and the amount of memory/disk space needed.\nUnderstanding how to read query plans is great for optimizing queries. For\nexample, Seq Scan nodes often indicate an opportunity for an index to be added,\nwhich is much faster to read. Familiarizing yourself with these plans will make\nyou a better database engineer. For more examples of query plans, read Using\nEXPLAIN from which this example was taken.\nNow that you’re able to read a query plan, learn to optimize performance.\nIf you enjoyed this post, you might also like:\nFinding the Oldest/Youngest Records Within a Group\nPostgreSQL Performance Considerations\nPostgres Index Types\nUpgrade your codebase with a Code Audit\nLearn how we can help you understand the current state of your code\nquality, speed up delivery times, improve developer happiness, and level\nup your user experience\nLearn more about a Code Audit\nServices\nCase Studies\nResources\nHire Us\nOur Company\nPurpose\nBlog\nJoin our team\nTwitter\nGitHub\nDribbble\nInstagram\n© 2020\nthoughtbot, inc.\nThe design of a robot and thoughtbot are registered trademarks of\nthoughtbot, inc.\nPrivacy Policy","ctext":"跳到主要内容博客主页\n全部话题\n设计\n网页\n的iOS\n安卓系统\n搜索\n我们正在招聘！\n阅读Postgres EXPLAIN ANALYZE查询计划\n迦勒·壁炉斯\n2016年7月26日\n更新于\n2020年3月31日\nPostgres的\n性能\n数据\nsql\n我们可以使用的功能最强大的工具，用于了解和优化SQL\n查询是EXPLAIN ANALYZE，它是一个Postgres命令，接受一个\n诸如SELECT ...，UPDATE ...或DELETE ...之类的语句执行\n语句，而不是返回数据，而是提供查询计划详细信息\n计划者采用何种方式执行所提供的语句。\n这是从Postgres使用说明页面提取的查询：\n<code><span class=\"k\">EXPLAIN</span> <span class=\"k\">ANALYZE</span> <span class=\"k\">SELECT</span> <span class=\"o\">*</span>\n<span class=\"k\">FROM</span> <span class=\"n\">tenk1</span> <span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">tenk2</span> <span class=\"n\">t2</span>\n<span class=\"k\">WHERE</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">unique1</span> <span class=\"o\">&lt;</span> <span class=\"mi\">100</span> <span class=\"k\">AND</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">unique2</span> <span class=\"o\">=</span> <span class=\"n\">t2</span><span class=\"p\">.</span><span class=\"n\">unique2</span>\n<span class=\"k\">ORDER</span> <span class=\"k\">BY</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">fivethous</span><span class=\"p\">;</span>\n</code>\n并生成查询计划：\n<code> QUERY PLAN\n-------------------------------------------------------------------------------------------------------------------------------------------- Sort (cost=717.34..717.59 rows=101 width=488) (actual time=7.761..7.774 rows=100 loops=1) Sort Key: t1.fivethous Sort Method: quicksort Memory: 77kB -&gt; Hash Join (cost=230.47..713.98 rows=101 width=488) (actual time=0.711..7.427 rows=100 loops=1) Hash Cond: (t2.unique2 = t1.unique2) -&gt; Seq Scan on tenk2 t2 (cost=0.00..445.00 rows=10000 width=244) (actual time=0.007..2.583 rows=10000 loops=1) -&gt; Hash (cost=229.20..229.20 rows=101 width=244) (actual time=0.659..0.659 rows=100 loops=1) Buckets: 1024 Batches: 1 Memory Usage: 28kB -&gt; Bitmap Heap Scan on tenk1 t1 (cost=5.07..229.20 rows=101 width=244) (actual time=0.080..0.526 rows=100 loops=1) Recheck Cond: (unique1 &lt; 100) -&gt; Bitmap Index Scan on tenk1_unique1 (cost=0.00..5.04 rows=101 width=0) (actual time=0.049..0.049 rows=100 loops=1) Index Cond: (unique1 &lt; 100) Planning time: 0.194 ms Execution time: 8.008 ms\n</code>\nPostgres构建表示不同节点的计划节点的树形结构\nPostgres构建表示不同节点的计划节点的树形结构...\n在EXPLAIN ANALYZE的情况下，除了\n执行时间和行计数，例如上面的Sort和Hash。 其他任何行\n执行时间和行计数，例如上面的Sort和Hash。 其他任何行...\n查询是：\n<code>Sort\n└── Hash Join ├── Seq Scan └── Hash └── Bitmap Heap Scan └── Bitmap Index Scan\n</code>\n每棵树的分支代表子操作，您可以由内而外地\n确定“第一”发生了什么（尽管节点在同一级别的顺序\n可能会有所不同）。\n首先要做的是对tenk_unique1索引进行位图索引扫描：\n<code>-&gt; Bitmap Index Scan on tenk1_unique1 (cost=0.00..5.04 rows=101 width=0) (actual time=0.049..0.049 rows=100 loops=1) Index Cond: (unique1 &lt; 100)\n</code>\n首先要做的是对tenk_unique1索引进行位图索引扫描：...\n首先要做的是对tenk_unique1索引进行位图索引扫描：......\n自己不会返回这里。 费用估算（费用= 0.00..5.04\nrows = 101 width = 0）意味着Postgres期望“花费” 5.04的任意计算单位来查找\n这些值。 0.00是该节点可以开始工作的成本（在此情况下，\n情况下，只需查询的启动时间即可）。 行是估计的行数\n此索引扫描将返回，并且width是估计的字节大小\n返回的行（0，因为我们只关心位置，而不关心\n行）。\n因为我们使用ANALYZE选项运行EXPLAIN，所以查询实际上是\n执行并捕获定时信息。 （实际时间= 0.049..0.049\nrows = 100 loops = 1）表示索引扫描已执行1次（循环\n值），则返回100行，而实际时间为0。\n一个节点被多次执行的时间，实际时间是每个节点的平均值\n迭代，您可以将值乘以循环数以获得实数\n时间。 范围值也可能有所不同，这给出了最小/最大时间的概念\n花费。 这样就确定了成本比率，为此，每个成本单位为0.049ms / 5.04单位≈0.01ms /单位\n查询。\n索引扫描的结果将传递到位图堆扫描操作。 在\n在这个节点上，Postgres正在获取tenk1表中的行的位置，\n在这个节点上，Postgres正在获取tenk1表中的行的位置，...\n本身。\n<code>-&gt; Bitmap Heap Scan on tenk1 t1 (cost=5.07..229.20 rows=101 width=244) (actual time=0.080..0.526 rows=100 loops=1) Recheck Cond: (unique1 &lt; 100)\n</code>\n我们可以看到，将成本预期值乘以0.01值后，\n计算得出，这意味着（229.20-5.07）* 0.01≈2.24ms的大致预期时间，而我们看到的实际时间为\n每行0.526ms，相差4倍。这可能是因为成本\n估计值是一个上限，并非所有行都需要读取，或者因为\n重新检查条件始终为真。\n位图索引扫描和位图堆扫描的结合更多\n比从表中顺序读取行（Seq扫描）要昂贵，但是\n因为在这种情况下两步过程需要访问的行相对较少\n最终变得更快。 通过将行分类为物理行可以进一步加速\n在提取它们之前先进行订购，这样可以最大程度地减少单独提取的成本。 的\n节点名称中的“位图”进行排序。\n节点名称中的“位图”进行排序。...\ntrue，将在读取时插入到内存中的哈希表中。 如我们所见\n从成本上来说，这根本不需要时间。\n<code>-&gt; Hash (cost=229.20..229.20 rows=101 width=244) (actual time=0.659..0.659 rows=100 loops=1) Buckets: 1024 Batches: 1 Memory Usage: 28kB\n</code>\n哈希节点包含有关哈希桶和批次数量的信息，如下所示\n哈希节点包含有关哈希桶和批次数量的信息，如下所示...\n没有显示。 内存使用量在100行* 244字节= 24.4 kB时才有意义，足够接近\n出于我们的目的，我们可以假设它是28kB，是哈希键占用的内存\n他们自己。\n接下来，Postgres从tenk2中读取所有10000行（别名为t2）并进行检查\n针对tenk1行的哈希值。 哈希联接意味着一个表的行是\n输入到内存中的哈希（到目前为止，我们已经建立了），然后\n扫描另一个表的行，并针对哈希表探查其值\n比赛。 我们在第二行“哈希”中看到“匹配”的条件\n条件：（t2.unique2 = t1.unique2）。 请注意，因为查询正在选择全部\n来自tenk1和tenk2的值，在Hash期间每一行的宽度加倍\n加入。\n<code>-&gt; Hash Join (cost=230.47..713.98 rows=101 width=488) (actual time=0.711..7.427 rows=100 loops=1) Hash Cond: (t2.unique2 = t1.unique2) -&gt; Seq Scan on tenk2 t2 (cost=0.00..445.00 rows=10000 width=244) (actual time=0.007..2.583 rows=10000 loops=1)\n</code>\n现在，已经收集了所有符合我们条件的行，我们可以对\n通过排序键设置的结果：t1.fivethous。\n<code>Sort (cost=717.34..717.59 rows=101 width=488) (actual time=7.761..7.774 rows=100 loops=1) Sort Key: t1.fivethous Sort Method: quicksort Memory: 77kB\n</code>\n排序节点包含有关用于排序的算法的信息，\n快速排序，无论排序是在内存中还是在磁盘上完成（这在很大程度上\n影响速度），以及所需的内存/磁盘空间量。\n了解如何读取查询计划对于优化查询非常有用。 对于\n例如，Seq Scan节点通常表明有机会添加索引，\n阅读起来要快得多。 熟悉这些计划将使\n您是更好的数据库工程师。 有关查询计划的更多示例，请阅读使用\n解释本示例。\n现在，您可以阅读查询计划，学习如何优化性能。\n如果您喜欢这篇文章，您可能还会喜欢：\n查找组中最早/最年轻的记录\nPostgreSQL性能注意事项\nPostgres索引类型\n使用代码审核升级代码库\n了解我们如何帮助您了解代码的当前状态\n质量，加快交付时间，提高开发人员的满意度和水平\n提升您的用户体验\n了解有关代码审核的更多信息\n服务\n实例探究\n资源资源\n雇用我们\n我们公司\n目的\n博客\n加入我们的团队\n推特\n的GitHub\n运球\nInstagram的\n© 2020\nThoughtbot公司\n机器人和思想机器人的设计是的注册商标。\nThoughtbot公司\n隐私政策\n"}

