{"ls":[{"s":"class Solution {\n    public List<List<Integer>> fourSum(int[] nums, \nint target) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def fourSum(self, nums: List[int], target: int) \n-> List[List[int]]:","lang":"Python3"},{"s":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as \n*returnColumnSizes array.\n * Note: Both returned array and *columnSizes array \nmust be malloced, assume caller calls free().\n */\nint** fourSum(int* nums, int numsSize, int target, \nint* returnSize, int** returnColumnSizes){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<IList<int>> FourSum(int[] nums, \nint target) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[][]}\n */\nvar fourSum = function(nums, target) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[][]}\ndef four_sum(nums, target)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func fourSum(_ nums: [Int], _ target: Int) -> [\n[Int]] {\n        \n    }\n}","lang":"Swift"},{"s":"func fourSum(nums []int, target int) [][]int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def fourSum(nums: Array[Int], target: Int): List\n[List[Int]] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun fourSum(nums: IntArray, target: Int): \nList<List<Int>> {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn four_sum(nums: Vec<i32>, target: i32) -> \nVec<Vec<i32>> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[][]\n     */\n    function fourSum($nums, $target) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[][]\n     */\n    function fourSum($nums, $target) {\n        \n    }\n}","lang":"PHP"}],"page":"18/1581","h":"18. 四数之和","d":"<div class=\"notranslate\"><p>给定一个包含&nbsp;<em>n</em> 个整数的数组&nbsp;<code>nums</code>&nbsp;和一个目标值&nbsp;<code>target</code>，判断&nbsp;<code>nums</code>&nbsp;中是否存在四个元素 <em>a，</em><em>b，c</em>&nbsp;和 <em>d</em>&nbsp;，使得&nbsp;<em>a</em> + <em>b</em> + <em>c</em> + <em>d</em>&nbsp;的值与&nbsp;<code>target</code>&nbsp;相等？找出所有满足条件且不重复的四元组。</p>\n\n<p><strong>注意：</strong></p>\n\n<p>答案中不可以包含重复的四元组。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。\n\n满足要求的四元组集合为：\n[\n  [-1,  0, 0, 1],\n  [-2, -1, 1, 2],\n  [-2,  0, 0, 2]\n]\n</pre>\n</div>","l":"中等","s":"# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[][]}\ndef four_sum(nums, target)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/4sum/","bb":{"x":445,"y":40,"w":116,"h":28}}

