{"ls":[{"s":"# @param {String} s\n# @param {String[]} words\n# @return {Integer}\ndef expressive_words(s, words)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func expressiveWords(_ S: String, _ words: \n[String]) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func expressiveWords(S string, words []string) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def expressiveWords(S: String, words: Array\n[String]): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun expressiveWords(S: String, words: \nArray<String>): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn expressive_words(s: String, words: \nVec<String>) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int expressiveWords(String S, String[] \nwords) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def expressiveWords(self, S, words):\n        \"\"\"\n        :type S: str\n        :type words: List[str]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def expressiveWords(self, S: str, words: List\n[str]) -> int:","lang":"Python3"},{"s":"int expressiveWords(char * S, char ** words, int \nwordsSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int ExpressiveWords(string S, string[] \nwords) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} S\n * @param {string[]} words\n * @return {number}\n */\nvar expressiveWords = function(S, words) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} s\n# @param {String[]} words\n# @return {Integer}\ndef expressive_words(s, words)\n \nend","lang":"Ruby"},{"s":"# @param {String} s\n# @param {String[]} words\n# @return {Integer}\ndef expressive_words(s, words)\n \nend","lang":"Ruby"}],"page":"809/1581","h":"809. 情感丰富的文字","d":"<div class=\"notranslate\"><p>有时候人们会用重复写一些字母来表示额外的感受，比如 <code>\"hello\" -&gt; \"heeellooo\"</code>, <code>\"hi\" -&gt; \"hiii\"</code>。我们将相邻字母都相同的一串字符定义为相同字母组，例如：\"h\", \"eee\", \"ll\", \"ooo\"。</p>\n\n<p>对于一个给定的字符串 S ，如果另一个单词能够通过将一些字母组扩张从而使其和 S 相同，我们将这个单词定义为可扩张的（stretchy）。扩张操作定义如下：选择一个字母组（包含字母&nbsp;<code>c</code>&nbsp;），然后往其中添加相同的字母&nbsp;<code>c</code>&nbsp;使其长度达到 3 或以上。</p>\n\n<p>例如，以&nbsp;\"hello\" 为例，我们可以对字母组&nbsp;\"o\" 扩张得到 \"hellooo\"，但是无法以同样的方法得到 \"helloo\" 因为字母组 \"oo\" 长度小于&nbsp;3。此外，我们可以进行另一种扩张 \"ll\" -&gt; \"lllll\" 以获得&nbsp;\"helllllooo\"。如果&nbsp;<code>S = \"helllllooo\"</code>，那么查询词&nbsp;\"hello\" 是可扩张的，因为可以对它执行这两种扩张操作使得&nbsp;<code>query = \"hello\" -&gt; \"hellooo\" -&gt;&nbsp;\"helllllooo\" = S</code>。</p>\n\n<p>输入一组查询单词，输出其中可扩张的单词数量。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong> \nS = \"heeellooo\"\nwords = [\"hello\", \"hi\", \"helo\"]\n<strong>输出：</strong>1\n<strong>解释</strong>：\n我们能通过扩张 \"hello\" 的 \"e\" 和 \"o\" 来得到 \"heeellooo\"。\n我们不能通过扩张 \"helo\" 来得到 \"heeellooo\" 因为 \"ll\" 的长度小于 3 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= len(S) &lt;= 100</code>。</li>\n\t<li><code>0 &lt;= len(words) &lt;= 100</code>。</li>\n\t<li><code>0 &lt;= len(words[i]) &lt;= 100</code>。</li>\n\t<li><code>S</code>&nbsp;和所有在&nbsp;<code>words</code>&nbsp;中的单词都只由小写字母组成。</li>\n</ul>\n</div>","l":"中等","s":"class Solution {","lang":"PHP","href":"https://leetcode-cn.com/problems/expressive-words/","bb":{"x":445,"y":40,"w":116,"h":28}}

