{"ls":[{"s":"class Solution {\n    public boolean find132pattern(int[] nums) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def find132pattern(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def find132pattern(self, nums: List[int]) -> \nbool:","lang":"Python3"},{"s":"bool find132pattern(int* nums, int numsSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public bool Find132pattern(int[] nums) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar find132pattern = function(nums) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums\n# @return {Boolean}\ndef find132pattern(nums)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func find132pattern(_ nums: [Int]) -> Bool {\n        \n    }\n}","lang":"Swift"},{"s":"func find132pattern(nums []int) bool {\n \n}","lang":"Go"},{"s":"object Solution {\n    def find132pattern(nums: Array[Int]): Boolean = \n{\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun find132pattern(nums: IntArray): Boolean {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn find132pattern(nums: Vec<i32>) -> bool {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function find132pattern($nums) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function find132pattern($nums) {\n        \n    }\n}","lang":"PHP"}],"page":"456/1581","h":"456. 132模式","d":"<div class=\"notranslate\"><p>给定一个整数序列：a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub>，一个132模式的子序列&nbsp;a<sub><strong>i</strong></sub>, a<sub><strong>j</strong></sub>, a<sub><strong>k</strong></sub>&nbsp;被定义为：当 <strong>i</strong> &lt; <strong>j</strong> &lt; <strong>k</strong> 时，a<sub><strong>i</strong></sub> &lt; a<sub><strong>k</strong></sub> &lt; a<sub><strong>j</strong></sub>。设计一个算法，当给定有&nbsp;n 个数字的序列时，验证这个序列中是否含有132模式的子序列。</p>\n\n<p><strong>注意：</strong>n 的值小于15000。</p>\n\n<p><strong>示例1:</strong></p>\n\n<pre><strong>输入:</strong> [1, 2, 3, 4]\n\n<strong>输出:</strong> False\n\n<strong>解释:</strong> 序列中不存在132模式的子序列。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [3, 1, 4, 2]\n\n<strong>输出:</strong> True\n\n<strong>解释:</strong> 序列中有 1 个132模式的子序列： [1, 4, 2].\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> [-1, 3, 2, 0]\n\n<strong>输出:</strong> True\n\n<strong>解释:</strong> 序列中有 3 个132模式的的子序列: [-1, 3, 2], [-1, 3, 0] 和 [-1, 2, 0].\n</pre>\n</div>","l":"中等","s":"# @param {Integer[]} nums\n# @return {Boolean}\ndef find132pattern(nums)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/132-pattern/","bb":{"x":445,"y":40,"w":116,"h":28}}

