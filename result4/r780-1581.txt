{"ls":[{"s":"# @param {Integer} sx\n# @param {Integer} sy\n# @param {Integer} tx\n# @param {Integer} ty\n# @return {Boolean}\ndef reaching_points(sx, sy, tx, ty)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func reachingPoints(_ sx: Int, _ sy: Int, _ tx: \nInt, _ ty: Int) -> Bool {\n        \n    }\n}","lang":"Swift"},{"s":"func reachingPoints(sx int, sy int, tx int, ty int) \nbool {\n \n}","lang":"Go"},{"s":"object Solution {\n    def reachingPoints(sx: Int, sy: Int, tx: Int, \nty: Int): Boolean = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun reachingPoints(sx: Int, sy: Int, tx: Int, \nty: Int): Boolean {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn reaching_points(sx: i32, sy: i32, tx: \ni32, ty: i32) -> bool {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public boolean reachingPoints(int sx, int sy, \nint tx, int ty) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def reachingPoints(self, sx: int, sy: int, tx: \nint, ty: int) -> bool:","lang":"Python3"},{"s":"bool reachingPoints(int sx, int sy, int tx, int ty){\n \n}","lang":"C"},{"s":"public class Solution {\n    public bool ReachingPoints(int sx, int sy, int \ntx, int ty) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} sx\n * @param {number} sy\n * @param {number} tx\n * @param {number} ty\n * @return {boolean}\n */\nvar reachingPoints = function(sx, sy, tx, ty) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer} sx\n# @param {Integer} sy\n# @param {Integer} tx\n# @param {Integer} ty\n# @return {Boolean}\ndef reaching_points(sx, sy, tx, ty)\n \nend","lang":"Ruby"},{"s":"# @param {Integer} sx\n# @param {Integer} sy\n# @param {Integer} tx\n# @param {Integer} ty\n# @return {Boolean}\ndef reaching_points(sx, sy, tx, ty)\n \nend","lang":"Ruby"}],"page":"780/1581","h":"780. 到达终点","d":"<div class=\"notranslate\"><p>从点&nbsp;<code>(x, y)</code>&nbsp;可以<strong>转换</strong>到&nbsp;<code>(x, x+y)</code>&nbsp; 或者&nbsp;<code>(x+y, y)</code>。</p>\n\n<p>给定一个起点&nbsp;<code>(sx, sy)</code>&nbsp;和一个终点&nbsp;<code>(tx, ty)</code>，如果通过一系列的<strong>转换</strong>可以从起点到达终点，则返回 <code>True&nbsp;</code>，否则返回&nbsp;<code>False</code>。</p>\n\n<pre><strong>示例:</strong>\n<strong>输入:</strong> sx = 1, sy = 1, tx = 3, ty = 5\n<strong>输出:</strong> True\n<strong>解释:\n</strong>可以通过以下一系列<strong>转换</strong>从起点转换到终点：\n(1, 1) -&gt; (1, 2)\n(1, 2) -&gt; (3, 2)\n(3, 2) -&gt; (3, 5)\n\n<strong>输入:</strong> sx = 1, sy = 1, tx = 2, ty = 2\n<strong>输出:</strong> False\n\n<strong>输入:</strong> sx = 1, sy = 1, tx = 1, ty = 1\n<strong>输出:</strong> True\n\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>sx, sy, tx, ty</code>&nbsp;是范围在&nbsp;<code>[1, 10^9]</code>&nbsp;的整数。</li>\n</ul>\n</div>","l":"困难","s":"class Solution {\n \n    /**\n     * @param Integer $sx\n     * @param Integer $sy\n     * @param Integer $tx\n     * @param Integer $ty\n     * @return Boolean\n     */\n    function reachingPoints($sx, $sy, $tx, $ty) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/reaching-points/","bb":{"x":445,"y":40,"w":116,"h":28}}

