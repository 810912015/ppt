{"ls":[{"s":"class Solution {\n    public int superpalindromesInRange(String L, \nString R) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def superpalindromesInRange(self, L, R):\n        \"\"\"\n        :type L: str\n        :type R: str\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def superpalindromesInRange(self, L: str, R: \nstr) -> int:","lang":"Python3"},{"s":"int superpalindromesInRange(char * L, char * R){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int SuperpalindromesInRange(string L, \nstring R) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} L\n * @param {string} R\n * @return {number}\n */\nvar superpalindromesInRange = function(L, R) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} l\n# @param {String} r\n# @return {Integer}\ndef superpalindromes_in_range(l, r)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func superpalindromesInRange(_ L: String, _ R: \nString) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func superpalindromesInRange(L string, R string) \nint {\n \n}","lang":"Go"},{"s":"object Solution {\n    def superpalindromesInRange(L: String, R: \nString): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun superpalindromesInRange(L: String, R: \nString): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn superpalindromes_in_range(l: String, r: \nString) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param String $L\n     * @param String $R\n     * @return Integer\n     */\n    function superpalindromesInRange($L, $R) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param String $L\n     * @param String $R\n     * @return Integer\n     */\n    function superpalindromesInRange($L, $R) {\n        \n    }\n}","lang":"PHP"}],"page":"906/1581","h":"906. 超级回文数","d":"<div class=\"notranslate\"><p>如果一个正整数自身是回文数，而且它也是一个回文数的平方，那么我们称这个数为超级回文数。</p>\n\n<p>现在，给定两个正整数&nbsp;<code>L</code> 和&nbsp;<code>R</code> （以字符串形式表示），返回包含在范围 <code>[L, R]</code> 中的超级回文数的数目。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>L = \"4\", R = \"1000\"\n<strong>输出：</strong>4\n<strong>解释：\n</strong>4，9，121，以及 484 是超级回文数。\n注意 676 不是一个超级回文数： 26 * 26 = 676，但是 26 不是回文数。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= len(L) &lt;= 18</code></li>\n\t<li><code>1 &lt;= len(R) &lt;= 18</code></li>\n\t<li><code>L</code> 和&nbsp;<code>R</code>&nbsp;是表示&nbsp;<code>[1, 10^18)</code>&nbsp;范围的整数的字符串。</li>\n\t<li><code>int(L) &lt;= int(R)</code></li>\n</ol>\n\n<p>&nbsp;</p>\n</div>","l":"困难","s":"# @param {String} l","lang":"Ruby","href":"https://leetcode-cn.com/problems/super-palindromes/","bb":{"x":445,"y":40,"w":116,"h":28}}

