{"ls":[{"s":"class Solution {\n    public List<Integer> splitIntoFibonacci(String \nS) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def splitIntoFibonacci(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: List[int]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def splitIntoFibonacci(self, S: str) -> List\n[int]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, \nassume caller calls free().\n */\nint* splitIntoFibonacci(char * S, int* returnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<int> SplitIntoFibonacci(string S) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} S\n * @return {number[]}\n */\nvar splitIntoFibonacci = function(S) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} s\n# @return {Integer[]}\ndef split_into_fibonacci(s)\n \nend","lang":"Ruby"},{"s":"# @param {String} s\n# @return {Integer[]}\ndef split_into_fibonacci(s)\n \nend","lang":"Ruby"},{"s":"func splitIntoFibonacci(S string) []int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def splitIntoFibonacci(S: String): List[Int] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun splitIntoFibonacci(S: String): List<Int> {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn split_into_fibonacci(s: String) -> \nVec<i32> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param String $S\n     * @return Integer[]\n     */\n    function splitIntoFibonacci($S) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param String $S\n     * @return Integer[]\n     */\n    function splitIntoFibonacci($S) {\n        \n    }\n}","lang":"PHP"}],"page":"842/1581","h":"842. 将数组拆分成斐波那契序列","d":"<div class=\"notranslate\"><p>给定一个数字字符串 <code>S</code>，比如 <code>S = \"123456579\"</code>，我们可以将它分成斐波那契式的序列 <code>[123, 456, 579]</code>。</p>\n\n<p>形式上，斐波那契式序列是一个非负整数列表 <code>F</code>，且满足：</p>\n\n<ul>\n\t<li><code>0 &lt;= F[i] &lt;= 2^31 - 1</code>，（也就是说，每个整数都符合 32 位有符号整数类型）；</li>\n\t<li><code>F.length &gt;= 3</code>；</li>\n\t<li>对于所有的<code>0 &lt;= i &lt; F.length - 2</code>，都有 <code>F[i] + F[i+1] = F[i+2]</code> 成立。</li>\n</ul>\n\n<p>另外，请注意，将字符串拆分成小块时，每个块的数字一定不要以零开头，除非这个块是数字 0 本身。</p>\n\n<p>返回从 <code>S</code> 拆分出来的所有斐波那契式的序列块，如果不能拆分则返回 <code>[]</code>。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>\"123456579\"\n<strong>输出：</strong>[123,456,579]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入: </strong>\"11235813\"\n<strong>输出: </strong>[1,1,2,3,5,8,13]\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入: </strong>\"112358130\"\n<strong>输出: </strong>[]\n<strong>解释: </strong>这项任务无法完成。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>\"0123\"\n<strong>输出：</strong>[]\n<strong>解释：</strong>每个块的数字不能以零开头，因此 \"01\"，\"2\"，\"3\" 不是有效答案。\n</pre>\n\n<p><strong>示例 5：</strong></p>\n\n<pre><strong>输入: </strong>\"1101111\"\n<strong>输出: </strong>[110, 1, 111]\n<strong>解释: </strong>输出 [11,0,11,11] 也同样被接受。\n</pre>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length&nbsp;&lt;= 200</code></li>\n\t<li>字符串 <code>S</code> 中只含有数字。</li>\n</ol>\n</div>","l":"中等","s":"# @param {String} s","lang":"Ruby","href":"https://leetcode-cn.com/problems/split-array-into-fibonacci-sequence/","bb":{"x":445,"y":40,"w":116,"h":28}}

