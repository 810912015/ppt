{"ls":[{"s":"class Solution {\n    public int lenLongestFibSubseq(int[] A) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def lenLongestFibSubseq(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def lenLongestFibSubseq(self, A: List[int]) -> \nint:","lang":"Python3"},{"s":"int lenLongestFibSubseq(int* A, int ASize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int LenLongestFibSubseq(int[] A) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} A\n * @return {number}\n */\nvar lenLongestFibSubseq = function(A) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} a\n# @return {Integer}\ndef len_longest_fib_subseq(a)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func lenLongestFibSubseq(_ A: [Int]) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func lenLongestFibSubseq(A []int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def lenLongestFibSubseq(A: Array[Int]): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun lenLongestFibSubseq(A: IntArray): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn len_longest_fib_subseq(a: Vec<i32>) -> \ni32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $A\n     * @return Integer\n     */\n    function lenLongestFibSubseq($A) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $A\n     * @return Integer\n     */\n    function lenLongestFibSubseq($A) {\n        \n    }\n}","lang":"PHP"}],"page":"873/1581","h":"873. 最长的斐波那契子序列的长度","d":"<div class=\"notranslate\"><p>如果序列&nbsp;<code>X_1, X_2, ..., X_n</code>&nbsp;满足下列条件，就说它是&nbsp;<em>斐波那契式&nbsp;</em>的：</p>\n\n<ul>\n\t<li><code>n &gt;= 3</code></li>\n\t<li>对于所有&nbsp;<code>i + 2 &lt;= n</code>，都有&nbsp;<code>X_i + X_{i+1} = X_{i+2}</code></li>\n</ul>\n\n<p>给定一个<strong>严格递增</strong>的正整数数组形成序列，找到 <code>A</code> 中最长的斐波那契式的子序列的长度。如果一个不存在，返回&nbsp;&nbsp;0 。</p>\n\n<p><em>（回想一下，子序列是从原序列 <code>A</code>&nbsp;中派生出来的，它从 <code>A</code>&nbsp;中删掉任意数量的元素（也可以不删），而不改变其余元素的顺序。例如，&nbsp;<code>[3, 5, 8]</code>&nbsp;是&nbsp;<code>[3, 4, 5, 6, 7, 8]</code>&nbsp;的一个子序列）</em></p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入: </strong>[1,2,3,4,5,6,7,8]\n<strong>输出: </strong>5\n<strong>解释:\n</strong>最长的斐波那契式子序列为：[1,2,3,5,8] 。\n</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre><strong>输入: </strong>[1,3,7,11,12,14,18]\n<strong>输出: </strong>3\n<strong>解释</strong>:\n最长的斐波那契式子序列有：\n[1,11,12]，[3,11,14] 以及 [7,11,18] 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= A.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= A[0] &lt; A[1] &lt; ... &lt; A[A.length - 1] &lt;= 10^9</code></li>\n\t<li><em>（对于以 Java，C，C++，以及&nbsp;C# 的提交，时间限制被减少了 50%）</em></li>\n</ul>\n</div>","l":"中等","s":"# @param {Integer[]} a","lang":"Ruby","href":"https://leetcode-cn.com/problems/length-of-longest-fibonacci-subsequence/","bb":{"x":445,"y":40,"w":116,"h":28}}

