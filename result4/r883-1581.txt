{"ls":[{"s":"class Solution {\n    public int projectionArea(int[][] grid) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def projectionArea(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def projectionArea(self, grid: List[List[int]]) \n-> int:","lang":"Python3"},{"s":"int projectionArea(int** grid, int gridSize, int* \ngridColSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int ProjectionArea(int[][] grid) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar projectionArea = function(grid) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[][]} grid\n# @return {Integer}\ndef projection_area(grid)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func projectionArea(_ grid: [[Int]]) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func projectionArea(grid [][]int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def projectionArea(grid: Array[Array[Int]]): \nInt = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun projectionArea(grid: Array<IntArray>): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn projection_area(grid: Vec<Vec<i32>>) -> \ni32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function projectionArea($grid) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function projectionArea($grid) {\n        \n    }\n}","lang":"PHP"}],"page":"883/1581","h":"883. 三维形体投影面积","d":"<div class=\"notranslate\"><p>在&nbsp;<code>N&nbsp;*&nbsp;N</code>&nbsp;的网格中，我们放置了一些与 x，y，z 三轴对齐的&nbsp;<code>1 * 1 * 1</code>&nbsp;立方体。</p>\n\n<p>每个值&nbsp;<code>v = grid[i][j]</code>&nbsp;表示 <code>v</code>&nbsp;个正方体叠放在单元格&nbsp;<code>(i, j)</code>&nbsp;上。</p>\n\n<p>现在，我们查看这些立方体在 xy、yz&nbsp;和 zx&nbsp;平面上的<em>投影</em>。</p>\n\n<p>投影就像影子，将三维形体映射到一个二维平面上。</p>\n\n<p>在这里，从顶部、前面和侧面看立方体时，我们会看到“影子”。</p>\n\n<p>返回所有三个投影的总面积。</p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<ul>\n</ul>\n\n<ul>\n</ul>\n\n<ul>\n</ul>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[[2]]\n<strong>输出：</strong>5\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[[1,2],[3,4]]\n<strong>输出：</strong>17\n<strong>解释：</strong>\n这里有该形体在三个轴对齐平面上的三个投影(“阴影部分”)。\n<img style=\"height: 200px; width: 749px;\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/02/shadow.png\" alt=\"\">\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>[[1,0],[0,2]]\n<strong>输出：</strong>8\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>[[1,1,1],[1,0,1],[1,1,1]]\n<strong>输出：</strong>14\n</pre>\n\n<p><strong>示例 5：</strong></p>\n\n<pre><strong>输入：</strong>[[2,2,2],[2,1,2],[2,2,2]]\n<strong>输出：</strong>21\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= grid.length = grid[0].length&nbsp;&lt;= 50</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 50</code></li>\n</ul>\n</div>","l":"简单","s":"# @param {Integer[][]} grid","lang":"Ruby","href":"https://leetcode-cn.com/problems/projection-area-of-3d-shapes/","bb":{"x":445,"y":40,"w":116,"h":28}}

