{"ls":[{"s":"class MyLinkedList\n \n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n \n    end\n \n \n=begin\n    Get the value of the index-th node in the \nlinked list. If the index is invalid, return -1.\n    :type index: Integer\n    :rtype: Integer\n=end\n    def get(index)\n \n    end\n \n \n=begin\n    Add a node of value val before the first \nelement of the linked list. After the insertion, \nthe new node will be the first node of the linked \nlist.","lang":"Ruby"},{"s":"class MyLinkedList {\n \n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    /** Get the value of the index-th node in the \nlinked list. If the index is invalid, return -1. */\n    func get(_ index: Int) -> Int {\n        \n    }\n    \n    /** Add a node of value val before the first \nelement of the linked list. After the insertion, \nthe new node will be the first node of the linked \nlist. */\n    func addAtHead(_ val: Int) {\n        \n    }\n    \n    /** Append a node of value val to the last \nelement of the linked list. */\n    func addAtTail(_ val: Int) {\n        \n    }","lang":"Swift"},{"s":"type MyLinkedList struct {\n \n}\n \n \n/** Initialize your data structure here. */\nfunc Constructor() MyLinkedList {\n \n}\n \n \n/** Get the value of the index-th node in the \nlinked list. If the index is invalid, return -1. */\nfunc (this *MyLinkedList) Get(index int) int {\n \n}\n \n \n/** Add a node of value val before the first \nelement of the linked list. After the insertion, \nthe new node will be the first node of the linked \nlist. */\nfunc (this *MyLinkedList) AddAtHead(val int)  {\n \n}\n ","lang":"Go"},{"s":"class MyLinkedList() {\n \n    /** Initialize your data structure here. */\n \n \n    /** Get the value of the index-th node in the \nlinked list. If the index is invalid, return -1. */\n    def get(index: Int): Int = {\n \n    }\n \n    /** Add a node of value val before the first \nelement of the linked list. After the insertion, \nthe new node will be the first node of the linked \nlist. */\n    def addAtHead(`val`: Int) {\n \n    }\n \n    /** Append a node of value val to the last \nelement of the linked list. */\n    def addAtTail(`val`: Int) {\n \n    }\n \n    /** Add a node of value val before the index-th ","lang":"Scala"},{"s":"class MyLinkedList() {\n \n    /** Initialize your data structure here. */\n \n \n    /** Get the value of the index-th node in the \nlinked list. If the index is invalid, return -1. */\n    fun get(index: Int): Int {\n \n    }\n \n    /** Add a node of value val before the first \nelement of the linked list. After the insertion, \nthe new node will be the first node of the linked \nlist. */\n    fun addAtHead(`val`: Int) {\n \n    }\n \n    /** Append a node of value val to the last \nelement of the linked list. */\n    fun addAtTail(`val`: Int) {\n \n    }\n \n    /** Add a node of value val before the index-th ","lang":"Kotlin"},{"s":"struct MyLinkedList {\n \n}\n \n \n/** \n * `&self` means the method takes an immutable \nreference.\n * If you need a mutable reference, change it to `&\nmut self` instead.\n */\nimpl MyLinkedList {\n \n    /** Initialize your data structure here. */\n    fn new() -> Self {\n        \n    }\n    \n    /** Get the value of the index-th node in the \nlinked list. If the index is invalid, return -1. */\n    fn get(&self, index: i32) -> i32 {\n        \n    }\n    \n    /** Add a node of value val before the first \nelement of the linked list. After the insertion, ","lang":"Rust"},{"s":"class MyLinkedList {\n \n    /** Initialize your data structure here. */\n    public MyLinkedList() {\n \n    }\n    \n    /** Get the value of the index-th node in the \nlinked list. If the index is invalid, return -1. */\n    public int get(int index) {\n \n    }\n    \n    /** Add a node of value val before the first \nelement of the linked list. After the insertion, \nthe new node will be the first node of the linked \nlist. */\n    public void addAtHead(int val) {\n \n    }\n    \n    /** Append a node of value val to the last \nelement of the linked list. */\n    public void addAtTail(int val) {\n \n    }","lang":"Java"},{"s":"class MyLinkedList(object):\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n \n    def get(self, index):\n        \"\"\"\n        Get the value of the index-th node in the \nlinked list. If the index is invalid, return -1.\n        :type index: int\n        :rtype: int\n        \"\"\"\n        \n \n    def addAtHead(self, val):\n        \"\"\"\n        Add a node of value val before the first \nelement of the linked list. After the insertion, \nthe new node will be the first node of the linked \nlist.\n        :type val: int\n        :rtype: None\n        \"\"\"","lang":"Python"},{"s":"class MyLinkedList:\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n \n    def get(self, index: int) -> int:\n        \"\"\"\n        Get the value of the index-th node in the \nlinked list. If the index is invalid, return -1.\n        \"\"\"\n        \n \n    def addAtHead(self, val: int) -> None:\n        \"\"\"\n        Add a node of value val before the first \nelement of the linked list. After the insertion, \nthe new node will be the first node of the linked \nlist.\n        \"\"\"\n        \n \n    def addAtTail(self, val: int) -> None:\n        \"\"\"","lang":"Python3"},{"s":"typedef struct {\n    \n} MyLinkedList;\n \n/** Initialize your data structure here. */\n \nMyLinkedList* myLinkedListCreate() {\n    \n}\n \n/** Get the value of the index-th node in the \nlinked list. If the index is invalid, return -1. */\nint myLinkedListGet(MyLinkedList* obj, int index) {\n  \n}\n \n/** Add a node of value val before the first \nelement of the linked list. After the insertion, \nthe new node will be the first node of the linked \nlist. */\nvoid myLinkedListAddAtHead(MyLinkedList* obj, int \nval) {\n  \n}\n \n/** Append a node of value val to the last element ","lang":"C"},{"s":"public class MyLinkedList {\n \n    /** Initialize your data structure here. */\n    public MyLinkedList() {\n \n    }\n    \n    /** Get the value of the index-th node in the \nlinked list. If the index is invalid, return -1. */\n    public int Get(int index) {\n \n    }\n    \n    /** Add a node of value val before the first \nelement of the linked list. After the insertion, \nthe new node will be the first node of the linked \nlist. */\n    public void AddAtHead(int val) {\n \n    }\n    \n    /** Append a node of value val to the last \nelement of the linked list. */\n    public void AddAtTail(int val) {\n \n    }","lang":"C#"},{"s":"/**\n * Initialize your data structure here.\n */\nvar MyLinkedList = function() {\n \n};\n \n/**\n * Get the value of the index-th node in the linked \nlist. If the index is invalid, return -1. \n * @param {number} index\n * @return {number}\n */\nMyLinkedList.prototype.get = function(index) {\n \n};\n \n/**\n * Add a node of value val before the first element \nof the linked list. After the insertion, the new \nnode will be the first node of the linked list. \n * @param {number} val\n * @return {void}\n */\nMyLinkedList.prototype.addAtHead = function(val) {\n ","lang":"JavaScript"},{"s":"class MyLinkedList\n \n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n \n    end\n \n \n=begin\n    Get the value of the index-th node in the \nlinked list. If the index is invalid, return -1.\n    :type index: Integer\n    :rtype: Integer\n=end\n    def get(index)\n \n    end\n \n \n=begin\n    Add a node of value val before the first \nelement of the linked list. After the insertion, \nthe new node will be the first node of the linked \nlist.","lang":"Ruby"},{"s":"class MyLinkedList\n \n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n \n    end\n \n \n=begin\n    Get the value of the index-th node in the \nlinked list. If the index is invalid, return -1.\n    :type index: Integer\n    :rtype: Integer\n=end\n    def get(index)\n \n    end\n \n \n=begin\n    Add a node of value val before the first \nelement of the linked list. After the insertion, \nthe new node will be the first node of the linked \nlist.","lang":"Ruby"}],"page":"707/1581","h":"707. 设计链表","d":"<div class=\"notranslate\"><p>设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：<code>val</code>&nbsp;和&nbsp;<code>next</code>。<code>val</code>&nbsp;是当前节点的值，<code>next</code>&nbsp;是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性&nbsp;<code>prev</code>&nbsp;以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。</p>\n\n<p>在链表类中实现这些功能：</p>\n\n<ul>\n\t<li>get(index)：获取链表中第&nbsp;<code>index</code>&nbsp;个节点的值。如果索引无效，则返回<code>-1</code>。</li>\n\t<li>addAtHead(val)：在链表的第一个元素之前添加一个值为&nbsp;<code>val</code>&nbsp;的节点。插入后，新节点将成为链表的第一个节点。</li>\n\t<li>addAtTail(val)：将值为&nbsp;<code>val</code> 的节点追加到链表的最后一个元素。</li>\n\t<li>addAtIndex(index,val)：在链表中的第&nbsp;<code>index</code>&nbsp;个节点之前添加值为&nbsp;<code>val</code>&nbsp; 的节点。如果&nbsp;<code>index</code>&nbsp;等于链表的长度，则该节点将附加到链表的末尾。如果 <code>index</code> 大于链表长度，则不会插入节点。如果<code>index</code>小于0，则在头部插入节点。</li>\n\t<li>deleteAtIndex(index)：如果索引&nbsp;<code>index</code> 有效，则删除链表中的第&nbsp;<code>index</code> 个节点。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>MyLinkedList linkedList = new MyLinkedList();\nlinkedList.addAtHead(1);\nlinkedList.addAtTail(3);\nlinkedList.addAtIndex(1,2);   //链表变为1-&gt; 2-&gt; 3\nlinkedList.get(1);            //返回2\nlinkedList.deleteAtIndex(1);  //现在链表是1-&gt; 3\nlinkedList.get(1);            //返回3\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>所有<code>val</code>值都在&nbsp;<code>[1, 1000]</code>&nbsp;之内。</li>\n\t<li>操作次数将在&nbsp;&nbsp;<code>[1, 1000]</code>&nbsp;之内。</li>\n\t<li>请不要使用内置的 LinkedList 库。</li>\n</ul>\n</div>","l":"中等","s":"class MyLinkedList {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * Get the value of the index-th node in the \nlinked list. If the index is invalid, return -1.\n     * @param Integer $index\n     * @return Integer\n     */\n    function get($index) {\n        \n    }\n  \n    /**\n     * Add a node of value val before the first \nelement of the linked list. After the insertion, \nthe new node will be the first node of the linked \nlist.\n     * @param Integer $val\n     * @return NULL\n     */","lang":"PHP","href":"https://leetcode-cn.com/problems/design-linked-list/","bb":{"x":445,"y":40,"w":116,"h":28}}

