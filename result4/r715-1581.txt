{"ls":[{"s":"class RangeModule {\n \n    public RangeModule() {\n \n    }\n    \n    public void addRange(int left, int right) {\n \n    }\n    \n    public boolean queryRange(int left, int right) {\n \n    }\n    \n    public void removeRange(int left, int right) {\n \n    }\n}\n \n/**\n * Your RangeModule object will be instantiated and \ncalled as such:\n * RangeModule obj = new RangeModule();\n * obj.addRange(left,right);\n * boolean param_2 = obj.queryRange(left,right);\n * obj.removeRange(left,right);","lang":"Java"},{"s":"class RangeModule(object):\n \n    def __init__(self):\n        \n \n    def addRange(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: None\n        \"\"\"\n        \n \n    def queryRange(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: bool\n        \"\"\"\n        \n \n    def removeRange(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: None","lang":"Python"},{"s":"class RangeModule:\n \n    def __init__(self):\n        \n \n    def addRange(self, left: int, right: int) -> \nNone:\n        \n \n    def queryRange(self, left: int, right: int) -> \nbool:\n        \n \n    def removeRange(self, left: int, right: int) -> \nNone:\n        \n \n \n# Your RangeModule object will be instantiated and \ncalled as such:\n# obj = RangeModule()\n# obj.addRange(left,right)\n# param_2 = obj.queryRange(left,right)\n# obj.removeRange(left,right)","lang":"Python3"},{"s":"typedef struct {\n    \n} RangeModule;\n \n \nRangeModule* rangeModuleCreate() {\n    \n}\n \nvoid rangeModuleAddRange(RangeModule* obj, int left,\n int right) {\n  \n}\n \nbool rangeModuleQueryRange(RangeModule* obj, int \nleft, int right) {\n  \n}\n \nvoid rangeModuleRemoveRange(RangeModule* obj, int \nleft, int right) {\n  \n}\n \nvoid rangeModuleFree(RangeModule* obj) {\n    ","lang":"C"},{"s":"public class RangeModule {\n \n    public RangeModule() {\n \n    }\n    \n    public void AddRange(int left, int right) {\n \n    }\n    \n    public bool QueryRange(int left, int right) {\n \n    }\n    \n    public void RemoveRange(int left, int right) {\n \n    }\n}\n \n/**\n * Your RangeModule object will be instantiated and \ncalled as such:\n * RangeModule obj = new RangeModule();\n * obj.AddRange(left,right);\n * bool param_2 = obj.QueryRange(left,right);\n * obj.RemoveRange(left,right);","lang":"C#"},{"s":"var RangeModule = function() {\n \n};\n \n/** \n * @param {number} left \n * @param {number} right\n * @return {void}\n */\nRangeModule.prototype.addRange = function(left, \nright) {\n \n};\n \n/** \n * @param {number} left \n * @param {number} right\n * @return {boolean}\n */\nRangeModule.prototype.queryRange = function(left, \nright) {\n \n};\n \n/** \n * @param {number} left ","lang":"JavaScript"},{"s":"class RangeModule\n    def initialize()\n \n    end\n \n \n=begin\n    :type left: Integer\n    :type right: Integer\n    :rtype: Void\n=end\n    def add_range(left, right)\n \n    end\n \n \n=begin\n    :type left: Integer\n    :type right: Integer\n    :rtype: Boolean\n=end\n    def query_range(left, right)\n \n    end\n \n ","lang":"Ruby"},{"s":"class RangeModule {\n \n    init() {\n        \n    }\n    \n    func addRange(_ left: Int, _ right: Int) {\n        \n    }\n    \n    func queryRange(_ left: Int, _ right: Int) -> \nBool {\n        \n    }\n    \n    func removeRange(_ left: Int, _ right: Int) {\n        \n    }\n}\n \n/**\n * Your RangeModule object will be instantiated and \ncalled as such:\n * let obj = RangeModule()\n * obj.addRange(left, right)\n * let ret_2: Bool = obj.queryRange(left, right)","lang":"Swift"},{"s":"type RangeModule struct {\n \n}\n \n \nfunc Constructor() RangeModule {\n \n}\n \n \nfunc (this *RangeModule) AddRange(left int, right \nint)  {\n \n}\n \n \nfunc (this *RangeModule) QueryRange(left int, right \nint) bool {\n \n}\n \n \nfunc (this *RangeModule) RemoveRange(left int, \nright int)  {\n \n}","lang":"Go"},{"s":"class RangeModule() {\n \n    def addRange(left: Int, right: Int) {\n \n    }\n \n    def queryRange(left: Int, right: Int): Boolean \n= {\n \n    }\n \n    def removeRange(left: Int, right: Int) {\n \n    }\n \n}\n \n/**\n * Your RangeModule object will be instantiated and \ncalled as such:\n * var obj = new RangeModule()\n * obj.addRange(left,right)\n * var param_2 = obj.queryRange(left,right)\n * obj.removeRange(left,right)\n */","lang":"Scala"},{"s":"class RangeModule() {\n \n    fun addRange(left: Int, right: Int) {\n \n    }\n \n    fun queryRange(left: Int, right: Int): Boolean {\n \n    }\n \n    fun removeRange(left: Int, right: Int) {\n \n    }\n \n}\n \n/**\n * Your RangeModule object will be instantiated and \ncalled as such:\n * var obj = RangeModule()\n * obj.addRange(left,right)\n * var param_2 = obj.queryRange(left,right)\n * obj.removeRange(left,right)\n */","lang":"Kotlin"},{"s":"struct RangeModule {\n \n}\n \n \n/** \n * `&self` means the method takes an immutable \nreference.\n * If you need a mutable reference, change it to `&\nmut self` instead.\n */\nimpl RangeModule {\n \n    fn new() -> Self {\n        \n    }\n    \n    fn add_range(&self, left: i32, right: i32) {\n        \n    }\n    \n    fn query_range(&self, left: i32, right: i32) -> \nbool {\n        \n    }\n    ","lang":"Rust"},{"s":"class RangeModule {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $left\n     * @param Integer $right\n     * @return NULL\n     */\n    function addRange($left, $right) {\n        \n    }\n  \n    /**\n     * @param Integer $left\n     * @param Integer $right\n     * @return Boolean\n     */\n    function queryRange($left, $right) {\n        \n    }\n  \n    /**","lang":"PHP"},{"s":"class RangeModule {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $left\n     * @param Integer $right\n     * @return NULL\n     */\n    function addRange($left, $right) {\n        \n    }\n  \n    /**\n     * @param Integer $left\n     * @param Integer $right\n     * @return Boolean\n     */\n    function queryRange($left, $right) {\n        \n    }\n  \n    /**","lang":"PHP"}],"page":"715/1581","h":"715. Range 模块","d":"<div class=\"notranslate\"><p>Range 模块是跟踪数字范围的模块。你的任务是以一种有效的方式设计和实现以下接口。</p>\n\n<ul>\n\t<li><code>addRange(int left, int right)</code> 添加半开区间&nbsp;<code>[left, right)</code>，跟踪该区间中的每个实数。添加与当前跟踪的数字部分重叠的区间时，应当添加在区间&nbsp;<code>[left, right)</code>&nbsp;中尚未跟踪的任何数字到该区间中。</li>\n\t<li><code>queryRange(int left, int right)</code>&nbsp;只有在当前正在跟踪区间&nbsp;<code>[left, right)</code>&nbsp;中的每一个实数时，才返回 true。</li>\n\t<li><code>removeRange(int left, int right)</code>&nbsp;停止跟踪区间&nbsp;<code>[left, right)</code>&nbsp;中当前正在跟踪的每个实数。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>addRange(10, 20)</strong>: null\n<strong>removeRange(14, 16)</strong>: null\n<strong>queryRange(10, 14)</strong>: true （区间 [10, 14) 中的每个数都正在被跟踪）\n<strong>queryRange(13, 15)</strong>: false （未跟踪区间 [13, 15) 中像 14, 14.03, 14.17 这样的数字）\n<strong>queryRange(16, 17)</strong>: true （尽管执行了删除操作，区间 [16, 17) 中的数字 16 仍然会被跟踪）\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>半开区间&nbsp;<code>[left, right)</code>&nbsp;表示所有满足&nbsp;<code>left &lt;= x &lt; right</code>&nbsp;的实数。</li>\n\t<li>对&nbsp;<code>addRange, queryRange, removeRange</code>&nbsp;的所有调用中&nbsp;<code>0 &lt; left &lt; right &lt; 10^9</code>。</li>\n\t<li>在单个测试用例中，对&nbsp;<code>addRange</code>&nbsp;的调用总数不超过&nbsp;<code>1000</code>&nbsp;次。</li>\n\t<li>在单个测试用例中，对&nbsp; <code>queryRange</code> 的调用总数不超过 <code>5000</code> 次。</li>\n\t<li>在单个测试用例中，对 <code>removeRange</code> 的调用总数不超过&nbsp;<code>1000</code>&nbsp;次。</li>\n</ul>\n\n<p>&nbsp;</p>\n</div>","l":"困难","s":"class RangeModule","lang":"Ruby","href":"https://leetcode-cn.com/problems/range-module/","bb":{"x":445,"y":40,"w":116,"h":28}}

