{"ls":[{"s":"# @param {Integer[][]} board\n# @return {Integer}\ndef moves_to_chessboard(board)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func movesToChessboard(_ board: [[Int]]) -> Int \n{\n        \n    }\n}","lang":"Swift"},{"s":"func movesToChessboard(board [][]int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def movesToChessboard(board: Array[Array[Int]])\n: Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun movesToChessboard(board: Array<IntArray>): \nInt {\n \n    }\n}","lang":"Kotlin"},{"s":"class Solution {\n    fun movesToChessboard(board: Array<IntArray>): \nInt {\n \n    }\n}","lang":"Kotlin"},{"s":"class Solution {\n    public int movesToChessboard(int[][] board) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def movesToChessboard(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def movesToChessboard(self, board: List[List\n[int]]) -> int:","lang":"Python3"},{"s":"int movesToChessboard(int** board, int boardSize, \nint* boardColSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int MovesToChessboard(int[][] board) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} board\n * @return {number}\n */\nvar movesToChessboard = function(board) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[][]} board\n# @return {Integer}\ndef moves_to_chessboard(board)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[][]} board\n# @return {Integer}\ndef moves_to_chessboard(board)\n \nend","lang":"Ruby"}],"page":"782/1581","h":"782. 变为棋盘","d":"<div class=\"notranslate\"><p>一个 N&nbsp;x N的 <code>board</code>&nbsp;仅由&nbsp;<code>0</code>&nbsp;和&nbsp;<code>1</code>&nbsp;组成&nbsp;。每次移动，你能任意交换两列或是两行的位置。</p>\n\n<p>输出将这个矩阵变为 “棋盘” 所需的最小移动次数。“棋盘” 是指任意一格的上下左右四个方向的值均与本身不同的矩阵。如果不存在可行的变换，输出 -1。</p>\n\n<pre><strong>示例:</strong>\n<strong>输入:</strong> board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]\n<strong>输出:</strong> 2\n<strong>解释:</strong>\n一种可行的变换方式如下，从左到右：\n\n0110     1010     1010\n0110 --&gt; 1010 --&gt; 0101\n1001     0101     1010\n1001     0101     0101\n\n第一次移动交换了第一列和第二列。\n第二次移动交换了第二行和第三行。\n\n\n<strong>输入:</strong> board = [[0, 1], [1, 0]]\n<strong>输出:</strong> 0\n<strong>解释:</strong>\n注意左上角的格值为0时也是合法的棋盘，如：\n\n01\n10\n\n也是合法的棋盘.\n\n<strong>输入:</strong> board = [[1, 0], [1, 0]]\n<strong>输出:</strong> -1\n<strong>解释:</strong>\n任意的变换都不能使这个输入变为合法的棋盘。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>board</code>&nbsp;是方阵，且行列数的范围是<code>[2, 30]</code>。</li>\n\t<li><code>board[i][j]</code>&nbsp;将只包含&nbsp;<code>0</code>或&nbsp;<code>1</code>。</li>\n</ul>\n</div>","l":"困难","s":"class Solution {\n \n    /**\n     * @param Integer[][] $board\n     * @return Integer\n     */\n    function movesToChessboard($board) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/transform-to-chessboard/","bb":{"x":445,"y":40,"w":116,"h":28}}

