{"ls":[{"s":"# @param {String} p\n# @return {Integer}\ndef find_substring_in_wrapround_string(p)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func findSubstringInWraproundString(_ p: String)\n -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func findSubstringInWraproundString(p string) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def findSubstringInWraproundString(p: String): \nInt = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun findSubstringInWraproundString(p: String): \nInt {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn find_substring_in_wrapround_string(p: \nString) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int findSubstringInWraproundString\n(String p) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def findSubstringInWraproundString(self, p):\n        \"\"\"\n        :type p: str\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def findSubstringInWraproundString(self, p: str)\n -> int:","lang":"Python3"},{"s":"int findSubstringInWraproundString(char * p){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int FindSubstringInWraproundString\n(string p) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} p\n * @return {number}\n */\nvar findSubstringInWraproundString = function(p) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} p\n# @return {Integer}\ndef find_substring_in_wrapround_string(p)\n \nend","lang":"Ruby"},{"s":"# @param {String} p\n# @return {Integer}\ndef find_substring_in_wrapround_string(p)\n \nend","lang":"Ruby"}],"page":"467/1581","h":"467. 环绕字符串中唯一的子字符串","d":"<div class=\"notranslate\"><p>把字符串 <code>s</code> 看作是“abcdefghijklmnopqrstuvwxyz”的无限环绕字符串，所以&nbsp;<code>s</code> 看起来是这样的：\"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\".&nbsp;</p>\n\n<p>现在我们有了另一个字符串 <code>p</code> 。你需要的是找出 <code>s</code> 中有多少个唯一的 <code>p</code> 的非空子串，尤其是当你的输入是字符串 <code>p</code> ，你需要输出字符串&nbsp;<code>s</code> 中 <code>p</code> 的不同的非空子串的数目。&nbsp;</p>\n\n<p><strong>注意:</strong> <code>p</code>&nbsp;仅由小写的英文字母组成，p 的大小可能超过 10000。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> \"a\"\n<strong>输出:</strong> 1\n<strong>解释:</strong> 字符串 S 中只有一个\"a\"子字符。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> \"cac\"\n<strong>输出:</strong> 2\n<strong>解释:</strong> 字符串 S 中的字符串“cac”只有两个子串“a”、“c”。.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> \"zab\"\n<strong>输出:</strong> 6\n<strong>解释:</strong> 在字符串 S 中有六个子串“z”、“a”、“b”、“za”、“ab”、“zab”。.\n</pre>\n\n<p>&nbsp;</p>\n</div>","l":"中等","s":"class Solution {\n \n    /**\n     * @param String $p\n     * @return Integer\n     */\n    function findSubstringInWraproundString($p) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/unique-substrings-in-wraparound-string/","bb":{"x":445,"y":40,"w":116,"h":28}}

