{"ls":[{"s":"class Solution {\n    public List<String> letterCasePermutation\n(String S) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def letterCasePermutation(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: List[str]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def letterCasePermutation(self, S: str) -> List\n[str]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, \nassume caller calls free().\n */\nchar ** letterCasePermutation(char * S, int* \nreturnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<string> LetterCasePermutation\n(string S) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} S\n * @return {string[]}\n */\nvar letterCasePermutation = function(S) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} s\n# @return {String[]}\ndef letter_case_permutation(s)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func letterCasePermutation(_ S: String) -> \n[String] {\n        \n    }\n}","lang":"Swift"},{"s":"func letterCasePermutation(S string) []string {\n \n}","lang":"Go"},{"s":"object Solution {\n    def letterCasePermutation(S: String): List\n[String] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun letterCasePermutation(S: String): \nList<String> {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn letter_case_permutation(s: String) -> \nVec<String> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param String $S\n     * @return String[]\n     */\n    function letterCasePermutation($S) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param String $S\n     * @return String[]\n     */\n    function letterCasePermutation($S) {\n        \n    }\n}","lang":"PHP"}],"page":"784/1581","h":"784. 字母大小写全排列","d":"<div class=\"notranslate\"><p>给定一个字符串<code>S</code>，通过将字符串<code>S</code>中的每个字母转变大小写，我们可以获得一个新的字符串。返回所有可能得到的字符串集合。</p>\n\n<pre><strong>示例:</strong>\n<strong>输入:</strong> S = \"a1b2\"\n<strong>输出:</strong> [\"a1b2\", \"a1B2\", \"A1b2\", \"A1B2\"]\n\n<strong>输入:</strong> S = \"3z4\"\n<strong>输出:</strong> [\"3z4\", \"3Z4\"]\n\n<strong>输入:</strong> S = \"12345\"\n<strong>输出:</strong> [\"12345\"]\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li><code>S</code>&nbsp;的长度不超过<code>12</code>。</li>\n\t<li><code>S</code>&nbsp;仅由数字和字母组成。</li>\n</ul>\n</div>","l":"简单","s":"# @param {String} s\n# @return {String[]}\ndef letter_case_permutation(s)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/letter-case-permutation/","bb":{"x":445,"y":40,"w":116,"h":28}}

