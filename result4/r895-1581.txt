{"ls":[{"s":"class FreqStack {\n \n    public FreqStack() {\n \n    }\n    \n    public void push(int x) {\n \n    }\n    \n    public int pop() {\n \n    }\n}\n \n/**\n * Your FreqStack object will be instantiated and \ncalled as such:\n * FreqStack obj = new FreqStack();\n * obj.push(x);\n * int param_2 = obj.pop();\n */","lang":"Java"},{"s":"class FreqStack(object):\n \n    def __init__(self):\n        \n \n    def push(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: None\n        \"\"\"\n        \n \n    def pop(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n \n \n# Your FreqStack object will be instantiated and \ncalled as such:\n# obj = FreqStack()\n# obj.push(x)\n# param_2 = obj.pop()","lang":"Python"},{"s":"class FreqStack:\n \n    def __init__(self):\n        \n \n    def push(self, x: int) -> None:\n        \n \n    def pop(self) -> int:\n        \n \n \n# Your FreqStack object will be instantiated and \ncalled as such:\n# obj = FreqStack()\n# obj.push(x)\n# param_2 = obj.pop()","lang":"Python3"},{"s":"typedef struct {\n    \n} FreqStack;\n \n \nFreqStack* freqStackCreate() {\n    \n}\n \nvoid freqStackPush(FreqStack* obj, int x) {\n  \n}\n \nint freqStackPop(FreqStack* obj) {\n  \n}\n \nvoid freqStackFree(FreqStack* obj) {\n    \n}\n \n/**\n * Your FreqStack struct will be instantiated and \ncalled as such:\n * FreqStack* obj = freqStackCreate();\n * freqStackPush(obj, x);","lang":"C"},{"s":"public class FreqStack {\n \n    public FreqStack() {\n \n    }\n    \n    public void Push(int x) {\n \n    }\n    \n    public int Pop() {\n \n    }\n}\n \n/**\n * Your FreqStack object will be instantiated and \ncalled as such:\n * FreqStack obj = new FreqStack();\n * obj.Push(x);\n * int param_2 = obj.Pop();\n */","lang":"C#"},{"s":"var FreqStack = function() {\n \n};\n \n/** \n * @param {number} x\n * @return {void}\n */\nFreqStack.prototype.push = function(x) {\n \n};\n \n/**\n * @return {number}\n */\nFreqStack.prototype.pop = function() {\n \n};\n \n/**\n * Your FreqStack object will be instantiated and \ncalled as such:\n * var obj = new FreqStack()\n * obj.push(x)\n * var param_2 = obj.pop()\n */","lang":"JavaScript"},{"s":"class FreqStack\n    def initialize()\n \n    end\n \n \n=begin\n    :type x: Integer\n    :rtype: Void\n=end\n    def push(x)\n \n    end\n \n \n=begin\n    :rtype: Integer\n=end\n    def pop()\n \n    end\n \n \nend\n \n# Your FreqStack object will be instantiated and ","lang":"Ruby"},{"s":"class FreqStack {\n \n    init() {\n        \n    }\n    \n    func push(_ x: Int) {\n        \n    }\n    \n    func pop() -> Int {\n        \n    }\n}\n \n/**\n * Your FreqStack object will be instantiated and \ncalled as such:\n * let obj = FreqStack()\n * obj.push(x)\n * let ret_2: Int = obj.pop()\n */","lang":"Swift"},{"s":"type FreqStack struct {\n \n}\n \n \nfunc Constructor() FreqStack {\n \n}\n \n \nfunc (this *FreqStack) Push(x int)  {\n \n}\n \n \nfunc (this *FreqStack) Pop() int {\n \n}\n \n \n/**\n * Your FreqStack object will be instantiated and \ncalled as such:\n * obj := Constructor();\n * obj.Push(x);\n * param_2 := obj.Pop();","lang":"Go"},{"s":"class FreqStack() {\n \n    def push(x: Int) {\n \n    }\n \n    def pop(): Int = {\n \n    }\n \n}\n \n/**\n * Your FreqStack object will be instantiated and \ncalled as such:\n * var obj = new FreqStack()\n * obj.push(x)\n * var param_2 = obj.pop()\n */","lang":"Scala"},{"s":"class FreqStack() {\n \n    fun push(x: Int) {\n \n    }\n \n    fun pop(): Int {\n \n    }\n \n}\n \n/**\n * Your FreqStack object will be instantiated and \ncalled as such:\n * var obj = FreqStack()\n * obj.push(x)\n * var param_2 = obj.pop()\n */","lang":"Kotlin"},{"s":"struct FreqStack {\n \n}\n \n \n/** \n * `&self` means the method takes an immutable \nreference.\n * If you need a mutable reference, change it to `&\nmut self` instead.\n */\nimpl FreqStack {\n \n    fn new() -> Self {\n        \n    }\n    \n    fn push(&self, x: i32) {\n        \n    }\n    \n    fn pop(&self) -> i32 {\n        \n    }\n}\n ","lang":"Rust"},{"s":"class FreqStack {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $x\n     * @return NULL\n     */\n    function push($x) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function pop() {\n        \n    }\n}\n \n/**\n * Your FreqStack object will be instantiated and \ncalled as such:","lang":"PHP"},{"s":"class FreqStack {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $x\n     * @return NULL\n     */\n    function push($x) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function pop() {\n        \n    }\n}\n \n/**\n * Your FreqStack object will be instantiated and \ncalled as such:","lang":"PHP"}],"page":"895/1581","h":"895. 最大频率栈","d":"<div class=\"notranslate\"><p>实现 <code>FreqStack</code>，模拟类似栈的数据结构的操作的一个类。</p>\n\n<p><code>FreqStack</code>&nbsp;有两个函数：</p>\n\n<ul>\n\t<li><code>push(int x)</code>，将整数&nbsp;<code>x</code>&nbsp;推入栈中。</li>\n\t<li><code>pop()</code>，它<strong>移除</strong>并返回栈中出现最频繁的元素。\n\t<ul>\n\t\t<li>如果最频繁的元素不只一个，则移除并返回最接近栈顶的元素。</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>\n[\"FreqStack\",\"push\",\"push\",\"push\",\"push\",\"push\",\"push\",\"pop\",\"pop\",\"pop\",\"pop\"],\n[[],[5],[7],[5],[7],[4],[5],[],[],[],[]]\n<strong>输出：</strong>[null,null,null,null,null,null,null,5,7,5,4]\n<strong>解释：</strong>\n执行六次 .push 操作后，栈自底向上为 [5,7,5,7,4,5]。然后：\n\npop() -&gt; 返回 5，因为 5 是出现频率最高的。\n栈变成 [5,7,5,7,4]。\n\npop() -&gt; 返回 7，因为 5 和 7 都是频率最高的，但 7 最接近栈顶。\n栈变成 [5,7,5,4]。\n\npop() -&gt; 返回 5 。\n栈变成 [5,7,4]。\n\npop() -&gt; 返回 4 。\n栈变成 [5,7]。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>对&nbsp;<code>FreqStack.push(int x)</code>&nbsp;的调用中&nbsp;<code>0 &lt;= x &lt;= 10^9</code>。</li>\n\t<li>如果栈的元素数目为零，则保证不会调用&nbsp; <code>FreqStack.pop()</code>。</li>\n\t<li>单个测试样例中，对&nbsp;<code>FreqStack.push</code>&nbsp;的总调用次数不会超过&nbsp;<code>10000</code>。</li>\n\t<li>单个测试样例中，对&nbsp;<code>FreqStack.pop</code>&nbsp;的总调用次数不会超过&nbsp;<code>10000</code>。</li>\n\t<li>所有测试样例中，对&nbsp;<code>FreqStack.push</code>&nbsp;和 <code>FreqStack.pop</code>&nbsp;的总调用次数不会超过&nbsp;<code>150000</code>。</li>\n</ul>\n\n<p>&nbsp;</p>\n</div>","l":"困难","s":"","lang":"Ruby","href":"https://leetcode-cn.com/problems/maximum-frequency-stack/","bb":{"x":445,"y":40,"w":116,"h":28}}

