{"ls":[{"s":"# @param {Integer} n\n# @param {Integer[][]} flights\n# @param {Integer} src\n# @param {Integer} dst\n# @param {Integer} k\n# @return {Integer}\ndef find_cheapest_price(n, flights, src, dst, k)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func findCheapestPrice(_ n: Int, _ flights: [\n[Int]], _ src: Int, _ dst: Int, _ K: Int) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func findCheapestPrice(n int, flights [][]int, src \nint, dst int, K int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def findCheapestPrice(n: Int, flights: Array\n[Array[Int]], src: Int, dst: Int, K: Int): Int = {\n \n    }\n}","lang":"Scala"},{"s":"object Solution {\n    def findCheapestPrice(n: Int, flights: Array\n[Array[Int]], src: Int, dst: Int, K: Int): Int = {\n \n    }\n}","lang":"Scala"},{"s":"impl Solution {\n    pub fn find_cheapest_price(n: i32, flights: \nVec<Vec<i32>>, src: i32, dst: i32, k: i32) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int findCheapestPrice(int n, int[][] \nflights, int src, int dst, int K) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def findCheapestPrice(self, n, flights, src, \ndst, K):\n        \"\"\"\n        :type n: int\n        :type flights: List[List[int]]\n        :type src: int\n        :type dst: int\n        :type K: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def findCheapestPrice(self, n: int, flights: \nList[List[int]], src: int, dst: int, K: int) -> int:","lang":"Python3"},{"s":"int findCheapestPrice(int n, int** flights, int \nflightsSize, int* flightsColSize, int src, int dst, \nint K){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int FindCheapestPrice(int n, int[][] \nflights, int src, int dst, int K) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} n\n * @param {number[][]} flights\n * @param {number} src\n * @param {number} dst\n * @param {number} K\n * @return {number}\n */\nvar findCheapestPrice = function(n, flights, src, \ndst, K) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer} n\n# @param {Integer[][]} flights\n# @param {Integer} src\n# @param {Integer} dst\n# @param {Integer} k\n# @return {Integer}\ndef find_cheapest_price(n, flights, src, dst, k)\n \nend","lang":"Ruby"},{"s":"# @param {Integer} n\n# @param {Integer[][]} flights\n# @param {Integer} src\n# @param {Integer} dst\n# @param {Integer} k\n# @return {Integer}\ndef find_cheapest_price(n, flights, src, dst, k)\n \nend","lang":"Ruby"}],"page":"787/1581","h":"787. K 站中转内最便宜的航班","d":"<div class=\"notranslate\"><p>有 <code>n</code> 个城市通过 <code>m</code> 个航班连接。每个航班都从城市 <code>u</code> 开始，以价格 <code>w</code> 抵达 <code>v</code>。</p>\n\n<p>现在给定所有的城市和航班，以及出发城市 <code>src</code> 和目的地 <code>dst</code>，你的任务是找到从 <code>src</code> 到 <code>dst</code> 最多经过 <code>k</code>&nbsp;站中转的最便宜的价格。 如果没有这样的路线，则输出 <code>-1</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入:</strong> \nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\nsrc = 0, dst = 2, k = 1\n<strong>输出:</strong> 200\n<strong>解释:</strong> \n城市航班图如下\n<img style=\"height: 180px; width: 246px;\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png\" alt=\"\">\n\n从城市 0 到城市 2 在 1 站中转以内的最便宜价格是 200，如图中红色所示。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入:</strong> \nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\nsrc = 0, dst = 2, k = 0\n<strong>输出:</strong> 500\n<strong>解释:</strong> \n城市航班图如下\n<img style=\"height: 180px; width: 246px;\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png\" alt=\"\">\n\n从城市 0 到城市 2 在 0 站中转以内的最便宜价格是 500，如图中蓝色所示。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n</code> 范围是 <code>[1, 100]</code>，城市标签从 <code>0</code> 到 <code>n</code><code> - 1</code>.</li>\n\t<li>航班数量范围是 <code>[0, n * (n - 1) / 2]</code>.</li>\n\t<li>每个航班的格式 <code>(src, </code><code>dst</code><code>, price)</code>.</li>\n\t<li>每个航班的价格范围是 <code>[1, 10000]</code>.</li>\n\t<li><code>k</code> 范围是 <code>[0, n - 1]</code>.</li>\n\t<li>航班没有重复，且不存在环路</li>\n</ul>\n</div>","l":"中等","s":"class Solution {\n \n    /**\n     * @param Integer $n\n     * @param Integer[][] $flights\n     * @param Integer $src\n     * @param Integer $dst\n     * @param Integer $K\n     * @return Integer\n     */\n    function findCheapestPrice($n, $flights, $src, \n$dst, $K) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/cheapest-flights-within-k-stops/","bb":{"x":445,"y":40,"w":116,"h":28}}

