{"ls":[{"s":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode[] splitListToParts(ListNode \nroot, int k) {\n \n    }\n}","lang":"Java"},{"s":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n \nclass Solution(object):\n    def splitListToParts(self, root, k):\n        \"\"\"\n        :type root: ListNode\n        :type k: int\n        :rtype: List[ListNode]\n        \"\"\"","lang":"Python"},{"s":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n \nclass Solution:\n    def splitListToParts(self, root: ListNode, k: \nint) -> List[ListNode]:","lang":"Python3"},{"s":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n \n \n/**\n * Note: The returned array must be malloced, \nassume caller calls free().\n */\nstruct ListNode** splitListToParts(struct ListNode* \nroot, int k, int* returnSize){\n \n}","lang":"C"},{"s":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public ListNode[] SplitListToParts(ListNode \nroot, int k) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} root\n * @param {number} k\n * @return {ListNode[]}\n */\nvar splitListToParts = function(root, k) {\n \n};","lang":"JavaScript"},{"s":"# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val)\n#         @val = val\n#         @next = nil\n#     end\n# end\n \n# @param {ListNode} root\n# @param {Integer} k\n# @return {ListNode[]}\ndef split_list_to_parts(root, k)\n \nend","lang":"Ruby"},{"s":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func splitListToParts(_ root: ListNode?, _ k: \nInt) -> [ListNode?] {\n        \n    }\n}","lang":"Swift"},{"s":"/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc splitListToParts(root *ListNode, k int) []\n*ListNode {\n \n}","lang":"Go"},{"s":"/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def splitListToParts(root: ListNode, k: Int): \nArray[ListNode] = {\n \n    }\n}","lang":"Scala"},{"s":"/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun splitListToParts(root: ListNode?, k: Int): \nArray<ListNode?> {\n \n    }\n}","lang":"Kotlin"},{"s":"// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn split_list_to_parts(root: \nOption<Box<ListNode>>, k: i32) -> \nVec<Option<Box<ListNode>>> {\n        \n    }\n}","lang":"Rust"},{"s":"/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val) { $this->val = \n$val; }\n * }\n */\nclass Solution {\n \n    /**\n     * @param ListNode $root\n     * @param Integer $k\n     * @return ListNode[]\n     */\n    function splitListToParts($root, $k) {\n        \n    }\n}","lang":"PHP"},{"s":"/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val) { $this->val = \n$val; }\n * }\n */\nclass Solution {\n \n    /**\n     * @param ListNode $root\n     * @param Integer $k\n     * @return ListNode[]\n     */\n    function splitListToParts($root, $k) {\n        \n    }\n}","lang":"PHP"}],"page":"725/1581","h":"725. 分隔链表","d":"<div class=\"notranslate\"><p>给定一个头结点为 <code>root</code> 的链表, 编写一个函数以将链表分隔为 <code>k</code> 个连续的部分。</p>\n\n<p>每部分的长度应该尽可能的相等: 任意两部分的长度差距不能超过 1，也就是说可能有些部分为 null。</p>\n\n<p>这k个部分应该按照在链表中出现的顺序进行输出，并且排在前面的部分的长度应该大于或等于后面的长度。</p>\n\n<p>返回一个符合上述规则的链表的列表。</p>\n\n<p>举例： 1-&gt;2-&gt;3-&gt;4, k = 5 // 5 结果 [ [1], [2], [3], [4], null ]</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入:</strong> \nroot = [1, 2, 3], k = 5\n<strong>输出:</strong> [[1],[2],[3],[],[]]\n<strong>解释:</strong>\n输入输出各部分都应该是链表，而不是数组。\n例如, 输入的结点 root 的 val= 1, root.next.val = 2, \\root.next.next.val = 3, 且 root.next.next.next = null。\n第一个输出 output[0] 是 output[0].val = 1, output[0].next = null。\n最后一个元素 output[4] 为 null, 它代表了最后一个部分为空链表。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入:</strong> \nroot = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3\n<strong>输出:</strong> [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]\n<strong>解释:</strong>\n输入被分成了几个连续的部分，并且每部分的长度相差不超过1.前面部分的长度大于等于后面部分的长度。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li><code>root</code> 的长度范围：&nbsp;<code>[0, 1000]</code>.</li>\n\t<li>输入的每个节点的大小范围：<code>[0, 999]</code>.</li>\n\t<li><code>k</code>&nbsp;的取值范围：&nbsp;<code>[1, 50]</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n</div>","l":"中等","s":"# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val)\n#         @val = val\n#         @next = nil\n#     end\n# end\n \n# @param {ListNode} root\n# @param {Integer} k\n# @return {ListNode[]}\ndef split_list_to_parts(root, k)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/split-linked-list-in-parts/","bb":{"x":445,"y":40,"w":116,"h":28}}

