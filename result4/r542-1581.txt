{"ls":[{"s":"class Solution {\n    public int[][] updateMatrix(int[][] matrix) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def updateMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def updateMatrix(self, matrix: List[List[int]]) \n-> List[List[int]]:","lang":"Python3"},{"s":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as \n*returnColumnSizes array.\n * Note: Both returned array and *columnSizes array \nmust be malloced, assume caller calls free().\n */\nint** updateMatrix(int** matrix, int matrixSize, \nint* matrixColSize, int* returnSize, int** \nreturnColumnSizes){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int[][] UpdateMatrix(int[][] matrix) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} matrix\n * @return {number[][]}\n */\nvar updateMatrix = function(matrix) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[][]} matrix\n# @return {Integer[][]}\ndef update_matrix(matrix)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func updateMatrix(_ matrix: [[Int]]) -> [[Int]] \n{\n        \n    }\n}","lang":"Swift"},{"s":"func updateMatrix(matrix [][]int) [][]int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def updateMatrix(matrix: Array[Array[Int]]): \nArray[Array[Int]] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun updateMatrix(matrix: Array<IntArray>): \nArray<IntArray> {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn update_matrix(matrix: Vec<Vec<i32>>) -> \nVec<Vec<i32>> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[][] $matrix\n     * @return Integer[][]\n     */\n    function updateMatrix($matrix) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[][] $matrix\n     * @return Integer[][]\n     */\n    function updateMatrix($matrix) {\n        \n    }\n}","lang":"PHP"}],"page":"542/1581","h":"542. 01 矩阵","d":"<div class=\"notranslate\"><p>给定一个由 0 和 1 组成的矩阵，找出每个元素到最近的 0 的距离。</p>\n\n<p>两个相邻元素间的距离为 1 。</p>\n\n<p><strong>示例 1: </strong><br>\n输入:</p>\n\n<pre>0 0 0\n0 1 0\n0 0 0\n</pre>\n\n<p>输出:</p>\n\n<pre>0 0 0\n0 1 0\n0 0 0\n</pre>\n\n<p><strong>示例 2: </strong><br>\n输入:</p>\n\n<pre>0 0 0\n0 1 0\n1 1 1\n</pre>\n\n<p>输出:</p>\n\n<pre>0 0 0\n0 1 0\n1 2 1\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>给定矩阵的元素个数不超过 10000。</li>\n\t<li>给定矩阵中至少有一个元素是 0。</li>\n\t<li>矩阵中的元素只在四个方向上相邻: 上、下、左、右。</li>\n</ol>\n</div>","l":"中等","s":"# @param {Integer[][]} matrix","lang":"Ruby","href":"https://leetcode-cn.com/problems/01-matrix/","bb":{"x":445,"y":40,"w":116,"h":28}}

