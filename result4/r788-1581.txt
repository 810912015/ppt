{"ls":[{"s":"class Solution {\n    public int rotatedDigits(int N) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def rotatedDigits(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def rotatedDigits(self, N: int) -> int:","lang":"Python3"},{"s":"int rotatedDigits(int N){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int RotatedDigits(int N) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} N\n * @return {number}\n */\nvar rotatedDigits = function(N) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer} n\n# @return {Integer}\ndef rotated_digits(n)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func rotatedDigits(_ N: Int) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func rotatedDigits(N int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def rotatedDigits(N: Int): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun rotatedDigits(N: Int): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn rotated_digits(n: i32) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer $N\n     * @return Integer\n     */\n    function rotatedDigits($N) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer $N\n     * @return Integer\n     */\n    function rotatedDigits($N) {\n        \n    }\n}","lang":"PHP"}],"page":"788/1581","h":"788. 旋转数字","d":"<div class=\"notranslate\"><p>我们称一个数 X 为好数, 如果它的每位数字逐个地被旋转 180 度后，我们仍可以得到一个有效的，且和 X 不同的数。要求每位数字都要被旋转。</p>\n\n<p>如果一个数的每位数字被旋转以后仍然还是一个数字，&nbsp;则这个数是有效的。0, 1, 和 8 被旋转后仍然是它们自己；2 和 5 可以互相旋转成对方（在这种情况下，它们以不同的方向旋转，换句话说，2 和 5 互为镜像）；6 和 9 同理，除了这些以外其他的数字旋转以后都不再是有效的数字。</p>\n\n<p>现在我们有一个正整数&nbsp;<code>N</code>, 计算从&nbsp;<code>1</code> 到&nbsp;<code>N</code> 中有多少个数&nbsp;X 是好数？</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入:</strong> 10\n<strong>输出:</strong> 4\n<strong>解释:</strong> \n在[1, 10]中有四个好数： 2, 5, 6, 9。\n注意 1 和 10 不是好数, 因为他们在旋转之后不变。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>N&nbsp;的取值范围是&nbsp;<code>[1, 10000]</code>。</li>\n</ul>\n</div>","l":"简单","s":"# @param {Integer} n\n# @return {Integer}\ndef rotated_digits(n)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/rotated-digits/","bb":{"x":445,"y":40,"w":116,"h":28}}

