{"ls":[{"s":"# @param {Integer[]} nums\n# @return {Void} Do not return anything, modify \nnums in-place instead.\ndef wiggle_sort(nums)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func wiggleSort(_ nums: inout [Int]) {\n        \n    }\n}","lang":"Swift"},{"s":"func wiggleSort(nums []int)  {\n \n}","lang":"Go"},{"s":"object Solution {\n    def wiggleSort(nums: Array[Int]): Unit = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun wiggleSort(nums: IntArray): Unit {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn wiggle_sort(nums: &mut Vec<i32>) {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public void wiggleSort(int[] nums) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def wiggleSort(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify \nnums in-place instead.\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def wiggleSort(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums \nin-place instead.\n        \"\"\"","lang":"Python3"},{"s":"void wiggleSort(int* nums, int numsSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public void WiggleSort(int[] nums) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify \nnums in-place instead.\n */\nvar wiggleSort = function(nums) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums\n# @return {Void} Do not return anything, modify \nnums in-place instead.\ndef wiggle_sort(nums)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[]} nums\n# @return {Void} Do not return anything, modify \nnums in-place instead.\ndef wiggle_sort(nums)\n \nend","lang":"Ruby"}],"page":"324/1581","h":"324. 摆动排序 II","d":"<div class=\"notranslate\"><p>给定一个无序的数组&nbsp;<code>nums</code>，将它重新排列成&nbsp;<code>nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]...</code>&nbsp;的顺序。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入: </strong><code>nums = [1, 5, 1, 1, 6, 4]</code>\n<strong>输出: </strong>一个可能的答案是 <code>[1, 4, 1, 5, 1, 6]</code></pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong><code>nums = [1, 3, 2, 2, 3, 1]</code>\n<strong>输出:</strong> 一个可能的答案是 <code>[2, 3, 1, 3, 1, 2]</code></pre>\n\n<p><strong>说明:</strong><br>\n你可以假设所有输入都会得到有效的结果。</p>\n\n<p><strong>进阶:</strong><br>\n你能用&nbsp;O(n) 时间复杂度和 / 或原地 O(1) 额外空间来实现吗？</p>\n</div>","l":"中等","s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @return NULL\n     */\n    function wiggleSort(&$nums) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/wiggle-sort-ii/","bb":{"x":445,"y":40,"w":116,"h":28}}

