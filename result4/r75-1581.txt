{"ls":[{"s":"class Solution {\n    public void sortColors(int[] nums) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify \nnums in-place instead.\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def sortColors(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums \nin-place instead.\n        \"\"\"","lang":"Python3"},{"s":"void sortColors(int* nums, int numsSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public void SortColors(int[] nums) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify \nnums in-place instead.\n */\nvar sortColors = function(nums) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums\n# @return {Void} Do not return anything, modify \nnums in-place instead.\ndef sort_colors(nums)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func sortColors(_ nums: inout [Int]) {\n        \n    }\n}","lang":"Swift"},{"s":"func sortColors(nums []int)  {\n \n}","lang":"Go"},{"s":"object Solution {\n    def sortColors(nums: Array[Int]): Unit = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun sortColors(nums: IntArray): Unit {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn sort_colors(nums: &mut Vec<i32>) {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @return NULL\n     */\n    function sortColors(&$nums) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @return NULL\n     */\n    function sortColors(&$nums) {\n        \n    }\n}","lang":"PHP"}],"page":"75/1581","h":"75. 颜色分类","d":"<div class=\"notranslate\"><p>给定一个包含红色、白色和蓝色，一共&nbsp;<em>n </em>个元素的数组，<strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地</a></strong>对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p>\n\n<p>此题中，我们使用整数 0、&nbsp;1 和 2 分别表示红色、白色和蓝色。</p>\n\n<p><strong>注意:</strong><br>\n不能使用代码库中的排序函数来解决这道题。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [2,0,2,1,1,0]\n<strong>输出:</strong> [0,0,1,1,2,2]</pre>\n\n<p><strong>进阶：</strong></p>\n\n<ul>\n\t<li>一个直观的解决方案是使用计数排序的两趟扫描算法。<br>\n\t首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。</li>\n\t<li>你能想出一个仅使用常数空间的一趟扫描算法吗？</li>\n</ul>\n</div>","l":"中等","s":"# @param {Integer[]} nums","lang":"Ruby","href":"https://leetcode-cn.com/problems/sort-colors/","bb":{"x":445,"y":40,"w":116,"h":28}}

