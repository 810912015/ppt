{"ls":[{"s":"class Solution {\n \n    public Solution(int N, int[] blacklist) {\n \n    }\n    \n    public int pick() {\n \n    }\n}\n \n/**\n * Your Solution object will be instantiated and \ncalled as such:\n * Solution obj = new Solution(N, blacklist);\n * int param_1 = obj.pick();\n */","lang":"Java"},{"s":"class Solution(object):\n \n    def __init__(self, N, blacklist):\n        \"\"\"\n        :type N: int\n        :type blacklist: List[int]\n        \"\"\"\n        \n \n    def pick(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n \n \n# Your Solution object will be instantiated and \ncalled as such:\n# obj = Solution(N, blacklist)\n# param_1 = obj.pick()","lang":"Python"},{"s":"class Solution:\n \n    def __init__(self, N: int, blacklist: List[int])\n:\n        \n \n    def pick(self) -> int:\n        \n \n \n# Your Solution object will be instantiated and \ncalled as such:\n# obj = Solution(N, blacklist)\n# param_1 = obj.pick()","lang":"Python3"},{"s":"typedef struct {\n    \n} Solution;\n \n \nSolution* solutionCreate(int N, int* blacklist, int \nblacklistSize) {\n    \n}\n \nint solutionPick(Solution* obj) {\n  \n}\n \nvoid solutionFree(Solution* obj) {\n    \n}\n \n/**\n * Your Solution struct will be instantiated and \ncalled as such:\n * Solution* obj = solutionCreate(N, blacklist, \nblacklistSize);\n * int param_1 = solutionPick(obj);\n \n * solutionFree(obj);","lang":"C"},{"s":"public class Solution {\n \n    public Solution(int N, int[] blacklist) {\n \n    }\n    \n    public int Pick() {\n \n    }\n}\n \n/**\n * Your Solution object will be instantiated and \ncalled as such:\n * Solution obj = new Solution(N, blacklist);\n * int param_1 = obj.Pick();\n */","lang":"C#"},{"s":"/**\n * @param {number} N\n * @param {number[]} blacklist\n */\nvar Solution = function(N, blacklist) {\n \n};\n \n/**\n * @return {number}\n */\nSolution.prototype.pick = function() {\n \n};\n \n/**\n * Your Solution object will be instantiated and \ncalled as such:\n * var obj = new Solution(N, blacklist)\n * var param_1 = obj.pick()\n */","lang":"JavaScript"},{"s":"class Solution\n \n=begin\n    :type n: Integer\n    :type blacklist: Integer[]\n=end\n    def initialize(n, blacklist)\n \n    end\n \n \n=begin\n    :rtype: Integer\n=end\n    def pick()\n \n    end\n \n \nend\n \n# Your Solution object will be instantiated and \ncalled as such:\n# obj = Solution.new(n, blacklist)\n# param_1 = obj.pick()","lang":"Ruby"},{"s":"class Solution {\n \n    init(_ N: Int, _ blacklist: [Int]) {\n        \n    }\n    \n    func pick() -> Int {\n        \n    }\n}\n \n/**\n * Your Solution object will be instantiated and \ncalled as such:\n * let obj = Solution(N, blacklist)\n * let ret_1: Int = obj.pick()\n */","lang":"Swift"},{"s":"type Solution struct {\n \n}\n \n \nfunc Constructor(N int, blacklist []int) Solution {\n \n}\n \n \nfunc (this *Solution) Pick() int {\n \n}\n \n \n/**\n * Your Solution object will be instantiated and \ncalled as such:\n * obj := Constructor(N, blacklist);\n * param_1 := obj.Pick();\n */","lang":"Go"},{"s":"class Solution(_N: Int, _blacklist: Array[Int]) {\n \n    def pick(): Int = {\n \n    }\n \n}\n \n/**\n * Your Solution object will be instantiated and \ncalled as such:\n * var obj = new Solution(N, blacklist)\n * var param_1 = obj.pick()\n */","lang":"Scala"},{"s":"class Solution(N: Int, blacklist: IntArray) {\n \n    fun pick(): Int {\n \n    }\n \n}\n \n/**\n * Your Solution object will be instantiated and \ncalled as such:\n * var obj = Solution(N, blacklist)\n * var param_1 = obj.pick()\n */","lang":"Kotlin"},{"s":"struct Solution {\n \n}\n \n \n/** \n * `&self` means the method takes an immutable \nreference.\n * If you need a mutable reference, change it to `&\nmut self` instead.\n */\nimpl Solution {\n \n    fn new(N: i32, blacklist: Vec<i32>) -> Self {\n        \n    }\n    \n    fn pick(&self) -> i32 {\n        \n    }\n}\n \n/**\n * Your Solution object will be instantiated and \ncalled as such:\n * let obj = Solution::new(N, blacklist);","lang":"Rust"},{"s":"class Solution {\n    /**\n     * @param Integer $N\n     * @param Integer[] $blacklist\n     */\n    function __construct($N, $blacklist) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function pick() {\n        \n    }\n}\n \n/**\n * Your Solution object will be instantiated and \ncalled as such:\n * $obj = Solution($N, $blacklist);\n * $ret_1 = $obj->pick();\n */","lang":"PHP"},{"s":"class Solution {\n    /**\n     * @param Integer $N\n     * @param Integer[] $blacklist\n     */\n    function __construct($N, $blacklist) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function pick() {\n        \n    }\n}\n \n/**\n * Your Solution object will be instantiated and \ncalled as such:\n * $obj = Solution($N, $blacklist);\n * $ret_1 = $obj->pick();\n */","lang":"PHP"}],"page":"710/1581","h":"710. 黑名单中的随机数","d":"<div class=\"notranslate\"><p>给定一个包含 [0，n ) 中独特的整数的黑名单 B，写一个函数从 [ 0，n ) 中返回一个<strong>不在</strong> B 中的随机整数。</p>\n\n<p>对它进行优化使其尽量少调用系统方法 <code>Math.random()</code> 。</p>\n\n<p><strong>提示:</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 1000000000</code></li>\n\t<li><code>0 &lt;= B.length &lt; min(100000, N)</code></li>\n\t<li><code>[0, N)</code>&nbsp;不包含&nbsp;N，详细参见&nbsp;<a href=\"https://en.wikipedia.org/wiki/Interval_(mathematics)\">interval notation</a>&nbsp;。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: \n</strong>[\"Solution\",\"pick\",\"pick\",\"pick\"]\n[[1,[]],[],[],[]]\n<strong>输出: </strong>[null,0,0,0]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: \n</strong>[\"Solution\",\"pick\",\"pick\",\"pick\"]\n[[2,[]],[],[],[]]\n<strong>输出: </strong>[null,1,1,1]\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入: \n</strong>[\"Solution\",\"pick\",\"pick\",\"pick\"]\n[[3,[1]],[],[],[]]\n<strong>Output: </strong>[null,0,0,2]\n</pre>\n\n<p><strong>示例 4:</strong></p>\n\n<pre><strong>输入: \n</strong>[\"Solution\",\"pick\",\"pick\",\"pick\"]\n[[4,[2]],[],[],[]]\n<strong>输出: </strong>[null,1,3,1]\n</pre>\n\n<p><strong>输入语法说明：</strong></p>\n\n<p>输入是两个列表：调用成员函数名和调用的参数。<code>Solution</code>的构造函数有两个参数，<code>N</code>&nbsp;和黑名单&nbsp;<code>B</code>。<code>pick</code>&nbsp;没有参数，输入参数是一个列表，即使参数为空，也会输入一个 [] 空列表。</p>\n</div>","l":"困难","s":"class Solution\n \n=begin\n    :type n: Integer\n    :type blacklist: Integer[]\n=end\n    def initialize(n, blacklist)\n \n    end\n \n \n=begin\n    :rtype: Integer\n=end\n    def pick()\n \n    end\n \n \nend\n \n# Your Solution object will be instantiated and \ncalled as such:\n# obj = Solution.new(n, blacklist)\n# param_1 = obj.pick()","lang":"Ruby","href":"https://leetcode-cn.com/problems/random-pick-with-blacklist/","bb":{"x":445,"y":40,"w":116,"h":28}}

