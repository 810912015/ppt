{"ls":[{"s":"class Solution {\n    public boolean canCross(int[] stones) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def canCross(self, stones: List[int]) -> bool:","lang":"Python3"},{"s":"bool canCross(int* stones, int stonesSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public bool CanCross(int[] stones) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} stones\n * @return {boolean}\n */\nvar canCross = function(stones) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} stones\n# @return {Boolean}\ndef can_cross(stones)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func canCross(_ stones: [Int]) -> Bool {\n        \n    }\n}","lang":"Swift"},{"s":"func canCross(stones []int) bool {\n \n}","lang":"Go"},{"s":"object Solution {\n    def canCross(stones: Array[Int]): Boolean = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun canCross(stones: IntArray): Boolean {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn can_cross(stones: Vec<i32>) -> bool {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $stones\n     * @return Boolean\n     */\n    function canCross($stones) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $stones\n     * @return Boolean\n     */\n    function canCross($stones) {\n        \n    }\n}","lang":"PHP"}],"page":"403/1581","h":"403. 青蛙过河","d":"<div class=\"notranslate\"><p>一只青蛙想要过河。 假定河流被等分为&nbsp;x<em>&nbsp;</em>个单元格，并且在每一个单元格内都有可能放有一石子（也有可能没有）。 青蛙可以跳上石头，但是不可以跳入水中。</p>\n\n<p>给定石子的位置列表（用单元格序号升序表示），&nbsp;<strong>请判定青蛙能否成功过河</strong>（即能否在最后一步跳至最后一个石子上）。&nbsp;开始时，&nbsp;青蛙默认已站在第一个石子上，并可以假定它第一步只能跳跃一个单位（即只能从单元格1跳至单元格2）。</p>\n\n<p>如果青蛙上一步跳跃了&nbsp;<em>k&nbsp;</em>个单位，那么它接下来的跳跃距离只能选择为&nbsp;<em>k - 1</em>、<em>k&nbsp;</em>或&nbsp;<em>k + 1</em>个单位。&nbsp;另请注意，青蛙只能向前方（终点的方向）跳跃。</p>\n\n<p><strong>请注意：</strong></p>\n\n<ul>\n\t<li>石子的数量 ≥ 2 且&nbsp;&lt; 1100；</li>\n\t<li>每一个石子的位置序号都是一个非负整数，且其 &lt; 2<sup>31</sup>；</li>\n\t<li>第一个石子的位置永远是0。</li>\n</ul>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>[0,1,3,5,6,8,12,17]</strong>\n\n总共有8个石子。\n第一个石子处于序号为0的单元格的位置, 第二个石子处于序号为1的单元格的位置,\n第三个石子在序号为3的单元格的位置， 以此定义整个数组...\n最后一个石子处于序号为17的单元格的位置。\n\n返回 <strong>true</strong>。即青蛙可以成功过河，按照如下方案跳跃： \n跳1个单位到第2块石子, 然后跳2个单位到第3块石子, 接着 \n跳2个单位到第4块石子, 然后跳3个单位到第6块石子, \n跳4个单位到第7块石子, 最后，跳5个单位到第8个石子（即最后一块石子）。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>[0,1,2,3,4,8,9,11]</strong>\n\n返回 <strong>false。</strong>青蛙没有办法过河。 \n这是因为第5和第6个石子之间的间距太大，没有可选的方案供青蛙跳跃过去。\n</pre>\n</div>","l":"困难","s":"# @param {Integer[]} stones\n# @return {Boolean}\ndef can_cross(stones)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/frog-jump/","bb":{"x":445,"y":40,"w":116,"h":28}}

