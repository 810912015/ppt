{"ls":[{"s":"class Solution {\n    public int[] twoSum(int[] nums, int target) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def twoSum(self, nums: List[int], target: int) \n-> List[int]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, \nassume caller calls free().\n */\nint* twoSum(int* nums, int numsSize, int target, \nint* returnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int[] TwoSum(int[] nums, int target) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef two_sum(nums, target)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef two_sum(nums, target)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func twoSum(_ nums: [Int], _ target: Int) -> \n[Int] {\n        \n    }\n}","lang":"Swift"},{"s":"func twoSum(nums []int, target int) []int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def twoSum(nums: Array[Int], target: Int): Array\n[Int] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun twoSum(nums: IntArray, target: Int): \nIntArray {\n \n    }\n}","lang":"Kotlin"}],"page":"1/1581","h":"1. 两数之和","d":"<div class=\"notranslate\"><p>给定一个整数数组 <code>nums</code>&nbsp;和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那&nbsp;<strong>两个</strong>&nbsp;整数，并返回他们的数组下标。</p>\n\n<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[<strong>0</strong>] + nums[<strong>1</strong>] = 2 + 7 = 9\n所以返回 [<strong>0, 1</strong>]\n</pre>\n</div>","l":"简单","s":"class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int \ntarget) {\n        \n    }\n};","lang":"C++","href":"https://leetcode-cn.com/problems/two-sum/","bb":{"x":490,"y":50,"w":116,"h":28}}

{"ls":[{"s":"class Solution {\n    public int[] twoSum(int[] nums, int target) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def twoSum(self, nums: List[int], target: int) \n-> List[int]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, \nassume caller calls free().\n */\nint* twoSum(int* nums, int numsSize, int target, \nint* returnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int[] TwoSum(int[] nums, int target) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef two_sum(nums, target)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func twoSum(_ nums: [Int], _ target: Int) -> \n[Int] {\n        \n    }\n}","lang":"Swift"},{"s":"func twoSum(nums []int, target int) []int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def twoSum(nums: Array[Int], target: Int): Array\n[Int] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun twoSum(nums: IntArray, target: Int): \nIntArray {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> \nVec<i32> {\n \n    }\n}","lang":"Rust"}],"page":"1/1581","h":"1. 两数之和","d":"<div class=\"notranslate\"><p>给定一个整数数组 <code>nums</code>&nbsp;和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那&nbsp;<strong>两个</strong>&nbsp;整数，并返回他们的数组下标。</p>\n\n<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[<strong>0</strong>] + nums[<strong>1</strong>] = 2 + 7 = 9\n所以返回 [<strong>0, 1</strong>]\n</pre>\n</div>","l":"简单","s":"class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int \ntarget) {\n        \n    }\n};","lang":"C++","href":"https://leetcode-cn.com/problems/two-sum/","bb":{"x":490,"y":50,"w":116,"h":28}}

