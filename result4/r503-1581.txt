{"ls":[{"s":"class Solution {\n    public int[] nextGreaterElements(int[] nums) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def nextGreaterElements(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def nextGreaterElements(self, nums: List[int]) \n-> List[int]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, \nassume caller calls free().\n */\nint* nextGreaterElements(int* nums, int numsSize, \nint* returnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int[] NextGreaterElements(int[] nums) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar nextGreaterElements = function(nums) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums\n# @return {Integer[]}\ndef next_greater_elements(nums)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func nextGreaterElements(_ nums: [Int]) -> [Int]\n {\n        \n    }\n}","lang":"Swift"},{"s":"func nextGreaterElements(nums []int) []int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def nextGreaterElements(nums: Array[Int]): Array\n[Int] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun nextGreaterElements(nums: IntArray): \nIntArray {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn next_greater_elements(nums: Vec<i32>) -> \nVec<i32> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function nextGreaterElements($nums) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function nextGreaterElements($nums) {\n        \n    }\n}","lang":"PHP"}],"page":"503/1581","h":"503. 下一个更大元素 II","d":"<div class=\"notranslate\"><p>给定一个循环数组（最后一个元素的下一个元素是数组的第一个元素），输出每个元素的下一个更大元素。数字 x 的下一个更大的元素是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 -1。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,1]\n<strong>输出:</strong> [2,-1,2]\n<strong>解释:</strong> 第一个 1 的下一个更大的数是 2；\n数字 2 找不到下一个更大的数； \n第二个 1 的下一个最大的数需要循环搜索，结果也是 2。\n</pre>\n\n<p><strong>注意:</strong> 输入数组的长度不会超过 10000。</p>\n</div>","l":"中等","s":"# @param {Integer[]} nums\n# @return {Integer[]}\ndef next_greater_elements(nums)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/next-greater-element-ii/","bb":{"x":445,"y":40,"w":116,"h":28}}

