{"ls":[{"s":"# @param {String} start\n# @param {String} end\n# @param {String[]} bank\n# @return {Integer}\ndef min_mutation(start, end, bank)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func minMutation(_ start: String, _ end: String,\n _ bank: [String]) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func minMutation(start string, end string, bank []\nstring) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def minMutation(start: String, end: String, \nbank: Array[String]): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun minMutation(start: String, end: String, \nbank: Array<String>): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn min_mutation(start: String, end: String, \nbank: Vec<String>) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int minMutation(String start, String end,\n String[] bank) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def minMutation(self, start, end, bank):\n        \"\"\"\n        :type start: str\n        :type end: str\n        :type bank: List[str]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def minMutation(self, start: str, end: str, \nbank: List[str]) -> int:","lang":"Python3"},{"s":"int minMutation(char * start, char * end, char ** \nbank, int bankSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int MinMutation(string start, string end,\n string[] bank) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} start\n * @param {string} end\n * @param {string[]} bank\n * @return {number}\n */\nvar minMutation = function(start, end, bank) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} start\n# @param {String} end\n# @param {String[]} bank\n# @return {Integer}\ndef min_mutation(start, end, bank)\n \nend","lang":"Ruby"},{"s":"# @param {String} start\n# @param {String} end\n# @param {String[]} bank\n# @return {Integer}\ndef min_mutation(start, end, bank)\n \nend","lang":"Ruby"}],"page":"433/1581","h":"433. 最小基因变化","d":"<div class=\"notranslate\"><p>一条基因序列由一个带有8个字符的字符串表示，其中每个字符都属于 <code>\"A\"</code>, <code>\"C\"</code>, <code>\"G\"</code>, <code>\"T\"</code>中的任意一个。</p>\n\n<p>假设我们要调查一个基因序列的变化。<strong>一次</strong>基因变化意味着这个基因序列中的<strong>一个</strong>字符发生了变化。</p>\n\n<p>例如，基因序列由<code>\"AACCGGTT\"</code>&nbsp;变化至&nbsp;<code>\"AACCGGTA\"&nbsp;</code>即发生了一次基因变化。</p>\n\n<p>与此同时，每一次基因变化的结果，都需要是一个合法的基因串，即该结果属于一个基因库。</p>\n\n<p>现在给定3个参数 — start, end, bank，分别代表起始基因序列，目标基因序列及基因库，请找出能够使起始基因序列变化为目标基因序列所需的最少变化次数。如果无法实现目标变化，请返回 -1。</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>起始基因序列默认是合法的，但是它并不一定会出现在基因库中。</li>\n\t<li>所有的目标基因序列必须是合法的。</li>\n\t<li>假定起始基因序列与目标基因序列是不一样的。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>start: \"AACCGGTT\"\nend:   \"AACCGGTA\"\nbank: [\"AACCGGTA\"]\n\n返回值: 1\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>start: \"AACCGGTT\"\nend:   \"AAACGGTA\"\nbank: [\"AACCGGTA\", \"AACCGCTA\", \"AAACGGTA\"]\n\n返回值: 2\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>start: \"AAAAACCC\"\nend:   \"AACCCCCC\"\nbank: [\"AAAACCCC\", \"AAACCCCC\", \"AACCCCCC\"]\n\n返回值: 3\n</pre>\n</div>","l":"中等","s":"class Solution {\n \n    /**\n     * @param String $start\n     * @param String $end\n     * @param String[] $bank\n     * @return Integer\n     */\n    function minMutation($start, $end, $bank) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/minimum-genetic-mutation/","bb":{"x":445,"y":40,"w":116,"h":28}}

