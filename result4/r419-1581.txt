{"ls":[{"s":"# @param {Character[][]} board\n# @return {Integer}\ndef count_battleships(board)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func countBattleships(_ board: [[Character]]) \n-> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func countBattleships(board [][]byte) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def countBattleships(board: Array[Array[Char]])\n: Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun countBattleships(board: Array<CharArray>): \nInt {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn count_battleships(board: Vec<Vec<char>>) \n-> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int countBattleships(char[][] board) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def countBattleships(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def countBattleships(self, board: List[List[str]\n]) -> int:","lang":"Python3"},{"s":"int countBattleships(char** board, int boardSize, \nint* boardColSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int CountBattleships(char[][] board) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {character[][]} board\n * @return {number}\n */\nvar countBattleships = function(board) {\n \n};","lang":"JavaScript"},{"s":"# @param {Character[][]} board\n# @return {Integer}\ndef count_battleships(board)\n \nend","lang":"Ruby"},{"s":"# @param {Character[][]} board\n# @return {Integer}\ndef count_battleships(board)\n \nend","lang":"Ruby"}],"page":"419/1581","h":"419. 甲板上的战舰","d":"<div class=\"notranslate\"><p>给定一个二维的甲板， 请计算其中有多少艘战舰。&nbsp;战舰用&nbsp;<code>'X'</code>表示，空位用&nbsp;<code>'.'</code>表示。&nbsp;你需要遵守以下规则：</p>\n\n<ul>\n\t<li>给你一个有效的甲板，仅由战舰或者空位组成。</li>\n\t<li>战舰只能水平或者垂直放置。换句话说,战舰只能由&nbsp;<code>1xN</code> (1 行, N 列)组成，或者&nbsp;<code>Nx1</code> (N 行, 1 列)组成，其中N可以是任意大小。</li>\n\t<li>两艘战舰之间至少有一个水平或垂直的空位分隔&nbsp;- 即没有相邻的战舰。</li>\n</ul>\n\n<p><strong>示例 :</strong></p>\n\n<pre>X..X\n...X\n...X\n</pre>\n\n<p>在上面的甲板中有2艘战舰。</p>\n\n<p><strong>无效样例 :</strong></p>\n\n<pre>...X\nXXXX\n...X\n</pre>\n\n<p>你不会收到这样的无效甲板&nbsp;- 因为战舰之间至少会有一个空位将它们分开。</p>\n\n<p><strong>进阶:</strong></p>\n\n<p>你可以用<strong>一次扫描算法</strong>，只使用<strong>O(1)额外空间，</strong>并且<strong>不修改</strong>甲板的值来解决这个问题吗？</p>\n</div>","l":"中等","s":"","lang":"PHP","href":"https://leetcode-cn.com/problems/battleships-in-a-board/","bb":{"x":445,"y":40,"w":116,"h":28}}

