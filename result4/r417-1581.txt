{"ls":[{"s":"class Solution {\n    public List<List<Integer>> pacificAtlantic(int[]\n[] matrix) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def pacificAtlantic(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def pacificAtlantic(self, matrix: List[List[int]\n]) -> List[List[int]]:","lang":"Python3"},{"s":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as \n*returnColumnSizes array.\n * Note: Both returned array and *columnSizes array \nmust be malloced, assume caller calls free().\n */\nint** pacificAtlantic(int** matrix, int matrixSize, \nint* matrixColSize, int* returnSize, int** \nreturnColumnSizes){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<IList<int>> PacificAtlantic(int[][]\n matrix) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} matrix\n * @return {number[][]}\n */\nvar pacificAtlantic = function(matrix) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[][]} matrix\n# @return {Integer[][]}\ndef pacific_atlantic(matrix)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func pacificAtlantic(_ matrix: [[Int]]) -> [\n[Int]] {\n        \n    }\n}","lang":"Swift"},{"s":"func pacificAtlantic(matrix [][]int) [][]int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def pacificAtlantic(matrix: Array[Array[Int]]): \nList[List[Int]] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun pacificAtlantic(matrix: Array<IntArray>): \nList<List<Int>> {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn pacific_atlantic(matrix: Vec<Vec<i32>>) \n-> Vec<Vec<i32>> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[][] $matrix\n     * @return Integer[][]\n     */\n    function pacificAtlantic($matrix) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[][] $matrix\n     * @return Integer[][]\n     */\n    function pacificAtlantic($matrix) {\n        \n    }\n}","lang":"PHP"}],"page":"417/1581","h":"417. 太平洋大西洋水流问题","d":"<div class=\"notranslate\"><p>给定一个 <code>m x n</code> 的非负整数矩阵来表示一片大陆上各个单元格的高度。“太平洋”处于大陆的左边界和上边界，而“大西洋”处于大陆的右边界和下边界。</p>\n\n<p>规定水流只能按照上、下、左、右四个方向流动，且只能从高到低或者在同等高度上流动。</p>\n\n<p>请找出那些水流既可以流动到“太平洋”，又能流动到“大西洋”的陆地单元的坐标。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>输出坐标的顺序不重要</li>\n\t<li><em>m</em> 和 <em>n</em> 都小于150</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<p>&nbsp;</p>\n\n<pre>给定下面的 5x5 矩阵:\n\n  太平洋 ~   ~   ~   ~   ~ \n       ~  1   2   2   3  (5) *\n       ~  3   2   3  (4) (4) *\n       ~  2   4  (5)  3   1  *\n       ~ (6) (7)  1   4   5  *\n       ~ (5)  1   1   2   4  *\n          *   *   *   *   * 大西洋\n\n返回:\n\n[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (上图中带括号的单元).\n</pre>\n\n<p>&nbsp;</p>\n</div>","l":"中等","s":"# @param {Integer[][]} matrix\n# @return {Integer[][]}\ndef pacific_atlantic(matrix)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/pacific-atlantic-water-flow/","bb":{"x":445,"y":40,"w":116,"h":28}}

