{"ls":[{"s":"class NumArray\n \n=begin\n    :type nums: Integer[]\n=end\n    def initialize(nums)\n \n    end\n \n \n=begin\n    :type i: Integer\n    :type j: Integer\n    :rtype: Integer\n=end\n    def sum_range(i, j)\n \n    end\n \n \nend\n \n# Your NumArray object will be instantiated and \ncalled as such:\n# obj = NumArray.new(nums)\n# param_1 = obj.sum_range(i, j)","lang":"Ruby"},{"s":"class NumArray {\n \n    init(_ nums: [Int]) {\n        \n    }\n    \n    func sumRange(_ i: Int, _ j: Int) -> Int {\n        \n    }\n}\n \n/**\n * Your NumArray object will be instantiated and \ncalled as such:\n * let obj = NumArray(nums)\n * let ret_1: Int = obj.sumRange(i, j)\n */","lang":"Swift"},{"s":"type NumArray struct {\n \n}\n \n \nfunc Constructor(nums []int) NumArray {\n \n}\n \n \nfunc (this *NumArray) SumRange(i int, j int) int {\n \n}\n \n \n/**\n * Your NumArray object will be instantiated and \ncalled as such:\n * obj := Constructor(nums);\n * param_1 := obj.SumRange(i,j);\n */","lang":"Go"},{"s":"class NumArray(_nums: Array[Int]) {\n \n    def sumRange(i: Int, j: Int): Int = {\n \n    }\n \n}\n \n/**\n * Your NumArray object will be instantiated and \ncalled as such:\n * var obj = new NumArray(nums)\n * var param_1 = obj.sumRange(i,j)\n */","lang":"Scala"},{"s":"class NumArray(nums: IntArray) {\n \n    fun sumRange(i: Int, j: Int): Int {\n \n    }\n \n}\n \n/**\n * Your NumArray object will be instantiated and \ncalled as such:\n * var obj = NumArray(nums)\n * var param_1 = obj.sumRange(i,j)\n */","lang":"Kotlin"},{"s":"struct NumArray {\n \n}\n \n \n/** \n * `&self` means the method takes an immutable \nreference.\n * If you need a mutable reference, change it to `&\nmut self` instead.\n */\nimpl NumArray {\n \n    fn new(nums: Vec<i32>) -> Self {\n        \n    }\n    \n    fn sum_range(&self, i: i32, j: i32) -> i32 {\n        \n    }\n}\n \n/**\n * Your NumArray object will be instantiated and \ncalled as such:\n * let obj = NumArray::new(nums);","lang":"Rust"},{"s":"class NumArray {\n \n    public NumArray(int[] nums) {\n \n    }\n    \n    public int sumRange(int i, int j) {\n \n    }\n}\n \n/**\n * Your NumArray object will be instantiated and \ncalled as such:\n * NumArray obj = new NumArray(nums);\n * int param_1 = obj.sumRange(i,j);\n */","lang":"Java"},{"s":"class NumArray(object):\n \n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        \n \n    def sumRange(self, i, j):\n        \"\"\"\n        :type i: int\n        :type j: int\n        :rtype: int\n        \"\"\"\n        \n \n \n# Your NumArray object will be instantiated and \ncalled as such:\n# obj = NumArray(nums)\n# param_1 = obj.sumRange(i,j)","lang":"Python"},{"s":"class NumArray:\n \n    def __init__(self, nums: List[int]):\n        \n \n    def sumRange(self, i: int, j: int) -> int:\n        \n \n \n# Your NumArray object will be instantiated and \ncalled as such:\n# obj = NumArray(nums)\n# param_1 = obj.sumRange(i,j)","lang":"Python3"},{"s":"typedef struct {\n    \n} NumArray;\n \n \nNumArray* numArrayCreate(int* nums, int numsSize) {\n    \n}\n \nint numArraySumRange(NumArray* obj, int i, int j) {\n  \n}\n \nvoid numArrayFree(NumArray* obj) {\n    \n}\n \n/**\n * Your NumArray struct will be instantiated and \ncalled as such:\n * NumArray* obj = numArrayCreate(nums, numsSize);\n * int param_1 = numArraySumRange(obj, i, j);\n \n * numArrayFree(obj);\n*/","lang":"C"},{"s":"public class NumArray {\n \n    public NumArray(int[] nums) {\n \n    }\n    \n    public int SumRange(int i, int j) {\n \n    }\n}\n \n/**\n * Your NumArray object will be instantiated and \ncalled as such:\n * NumArray obj = new NumArray(nums);\n * int param_1 = obj.SumRange(i,j);\n */","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n */\nvar NumArray = function(nums) {\n \n};\n \n/** \n * @param {number} i \n * @param {number} j\n * @return {number}\n */\nNumArray.prototype.sumRange = function(i, j) {\n \n};\n \n/**\n * Your NumArray object will be instantiated and \ncalled as such:\n * var obj = new NumArray(nums)\n * var param_1 = obj.sumRange(i,j)\n */","lang":"JavaScript"},{"s":"class NumArray\n \n=begin\n    :type nums: Integer[]\n=end\n    def initialize(nums)\n \n    end\n \n \n=begin\n    :type i: Integer\n    :type j: Integer\n    :rtype: Integer\n=end\n    def sum_range(i, j)\n \n    end\n \n \nend\n \n# Your NumArray object will be instantiated and \ncalled as such:\n# obj = NumArray.new(nums)\n# param_1 = obj.sum_range(i, j)","lang":"Ruby"},{"s":"class NumArray\n \n=begin\n    :type nums: Integer[]\n=end\n    def initialize(nums)\n \n    end\n \n \n=begin\n    :type i: Integer\n    :type j: Integer\n    :rtype: Integer\n=end\n    def sum_range(i, j)\n \n    end\n \n \nend\n \n# Your NumArray object will be instantiated and \ncalled as such:\n# obj = NumArray.new(nums)\n# param_1 = obj.sum_range(i, j)","lang":"Ruby"}],"page":"303/1581","h":"303. 区域和检索 - 数组不可变","d":"<div class=\"notranslate\"><p>给定一个整数数组 &nbsp;<em>nums</em>，求出数组从索引&nbsp;<em>i&nbsp;</em>到&nbsp;<em>j&nbsp;&nbsp;</em>(<em>i</em>&nbsp;≤&nbsp;<em>j</em>) 范围内元素的总和，包含&nbsp;<em>i,&nbsp; j&nbsp;</em>两点。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>给定 nums = [-2, 0, 3, -5, 2, -1]，求和函数为 sumRange()\n\nsumRange(0, 2) -&gt; 1\nsumRange(2, 5) -&gt; -1\nsumRange(0, 5) -&gt; -3</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>你可以假设数组不可变。</li>\n\t<li>会多次调用&nbsp;<em>sumRange</em>&nbsp;方法。</li>\n</ol>\n</div>","l":"简单","s":"class NumArray {\n    /**\n     * @param Integer[] $nums\n     */\n    function __construct($nums) {\n        \n    }\n  \n    /**\n     * @param Integer $i\n     * @param Integer $j\n     * @return Integer\n     */\n    function sumRange($i, $j) {\n        \n    }\n}\n \n/**\n * Your NumArray object will be instantiated and \ncalled as such:\n * $obj = NumArray($nums);\n * $ret_1 = $obj->sumRange($i, $j);\n */","lang":"PHP","href":"https://leetcode-cn.com/problems/range-sum-query-immutable/","bb":{"x":445,"y":40,"w":116,"h":28}}

