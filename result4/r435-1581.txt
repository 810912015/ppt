{"ls":[{"s":"# @param {Integer[][]} intervals\n# @return {Integer}\ndef erase_overlap_intervals(intervals)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func eraseOverlapIntervals(_ intervals: [[Int]])\n -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func eraseOverlapIntervals(intervals [][]int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def eraseOverlapIntervals(intervals: Array[Array\n[Int]]): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun eraseOverlapIntervals(intervals: \nArray<IntArray>): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn erase_overlap_intervals(intervals: \nVec<Vec<i32>>) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int eraseOverlapIntervals(int[][] \nintervals) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def eraseOverlapIntervals(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def eraseOverlapIntervals(self, intervals: List\n[List[int]]) -> int:","lang":"Python3"},{"s":"int eraseOverlapIntervals(int** intervals, int \nintervalsSize, int* intervalsColSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int EraseOverlapIntervals(int[][] \nintervals) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} intervals\n * @return {number}\n */\nvar eraseOverlapIntervals = function(intervals) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[][]} intervals\n# @return {Integer}\ndef erase_overlap_intervals(intervals)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[][]} intervals\n# @return {Integer}\ndef erase_overlap_intervals(intervals)\n \nend","lang":"Ruby"}],"page":"435/1581","h":"435. 无重叠区间","d":"<div class=\"notranslate\"><p>给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>可以认为区间的终点总是大于它的起点。</li>\n\t<li>区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [ [1,2], [2,3], [3,4], [1,3] ]\n\n<strong>输出:</strong> 1\n\n<strong>解释:</strong> 移除 [1,3] 后，剩下的区间没有重叠。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [ [1,2], [1,2], [1,2] ]\n\n<strong>输出:</strong> 2\n\n<strong>解释:</strong> 你需要移除两个 [1,2] 来使剩下的区间没有重叠。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> [ [1,2], [2,3] ]\n\n<strong>输出:</strong> 0\n\n<strong>解释:</strong> 你不需要移除任何区间，因为它们已经是无重叠的了。\n</pre>\n</div>","l":"中等","s":"class Solution {\n \n    /**\n     * @param Integer[][] $intervals\n     * @return Integer\n     */\n    function eraseOverlapIntervals($intervals) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/non-overlapping-intervals/","bb":{"x":445,"y":40,"w":116,"h":28}}

