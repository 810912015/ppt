{"ls":[{"s":"class Solution {\n    public List<List<Integer>> permute(int[] nums) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def permute(self, nums: List[int]) -> List[List\n[int]]:","lang":"Python3"},{"s":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as \n*returnColumnSizes array.\n * Note: Both returned array and *columnSizes array \nmust be malloced, assume caller calls free().\n */\nint** permute(int* nums, int numsSize, int* \nreturnSize, int** returnColumnSizes){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<IList<int>> Permute(int[] nums) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permute = function(nums) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums\n# @return {Integer[][]}\ndef permute(nums)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func permute(_ nums: [Int]) -> [[Int]] {\n        \n    }\n}","lang":"Swift"},{"s":"func permute(nums []int) [][]int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def permute(nums: Array[Int]): List[List[Int]] \n= {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun permute(nums: IntArray): List<List<Int>> {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn permute(nums: Vec<i32>) -> Vec<Vec<i32>> \n{\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function permute($nums) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function permute($nums) {\n        \n    }\n}","lang":"PHP"}],"page":"46/1581","h":"46. 全排列","d":"<div class=\"notranslate\"><p>给定一个<strong> 没有重复</strong> 数字的序列，返回其所有可能的全排列。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,3]\n<strong>输出:</strong>\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]</pre>\n</div>","l":"中等","s":"# @param {Integer[]} nums","lang":"Ruby","href":"https://leetcode-cn.com/problems/permutations/","bb":{"x":445,"y":40,"w":116,"h":28}}

