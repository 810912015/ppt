{"ls":[{"s":"class Solution {\n    public void rotate(int[][] matrix) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify \nmatrix in-place instead.\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def rotate(self, matrix: List[List[int]]) -> \nNone:\n        \"\"\"\n        Do not return anything, modify matrix \nin-place instead.\n        \"\"\"","lang":"Python3"},{"s":"void rotate(int** matrix, int matrixSize, int* \nmatrixColSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public void Rotate(int[][] matrix) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify \nmatrix in-place instead.\n */\nvar rotate = function(matrix) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[][]} matrix\n# @return {Void} Do not return anything, modify \nmatrix in-place instead.\ndef rotate(matrix)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func rotate(_ matrix: inout [[Int]]) {\n        \n    }\n}","lang":"Swift"},{"s":"func rotate(matrix [][]int)  {\n \n}","lang":"Go"},{"s":"object Solution {\n    def rotate(matrix: Array[Array[Int]]): Unit = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun rotate(matrix: Array<IntArray>): Unit {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn rotate(matrix: &mut Vec<Vec<i32>>) {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[][] $matrix\n     * @return NULL\n     */\n    function rotate(&$matrix) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[][] $matrix\n     * @return NULL\n     */\n    function rotate(&$matrix) {\n        \n    }\n}","lang":"PHP"}],"page":"48/1581","h":"48. 旋转图像","d":"<div class=\"notranslate\"><p>给定一个 <em>n&nbsp;</em>×&nbsp;<em>n</em> 的二维矩阵表示一个图像。</p>\n\n<p>将图像顺时针旋转 90 度。</p>\n\n<p><strong>说明：</strong></p>\n\n<p>你必须在<strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地</a></strong>旋转图像，这意味着你需要直接修改输入的二维矩阵。<strong>请不要</strong>使用另一个矩阵来旋转图像。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>给定 <strong>matrix</strong> = \n[\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n],\n\n<strong>原地</strong>旋转输入矩阵，使其变为:\n[\n  [7,4,1],\n  [8,5,2],\n  [9,6,3]\n]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>给定 <strong>matrix</strong> =\n[\n  [ 5, 1, 9,11],\n  [ 2, 4, 8,10],\n  [13, 3, 6, 7],\n  [15,14,12,16]\n], \n\n<strong>原地</strong>旋转输入矩阵，使其变为:\n[\n  [15,13, 2, 5],\n  [14, 3, 4, 1],\n  [12, 6, 8, 9],\n  [16, 7,10,11]\n]\n</pre>\n</div>","l":"中等","s":"# @param {Integer[][]} matrix","lang":"Ruby","href":"https://leetcode-cn.com/problems/rotate-image/","bb":{"x":445,"y":40,"w":116,"h":28}}

