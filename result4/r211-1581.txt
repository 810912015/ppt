{"ls":[{"s":"class WordDictionary {\n \n    /** Initialize your data structure here. */\n    public WordDictionary() {\n \n    }\n    \n    /** Adds a word into the data structure. */\n    public void addWord(String word) {\n \n    }\n    \n    /** Returns if the word is in the data \nstructure. A word could contain the dot character \n'.' to represent any one letter. */\n    public boolean search(String word) {\n \n    }\n}\n \n/**\n * Your WordDictionary object will be instantiated \nand called as such:\n * WordDictionary obj = new WordDictionary();\n * obj.addWord(word);\n * boolean param_2 = obj.search(word);","lang":"Java"},{"s":"class WordDictionary(object):\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n \n \n    def addWord(self, word):\n        \"\"\"\n        Adds a word into the data structure.\n        :type word: str\n        :rtype: None\n        \"\"\"\n \n \n    def search(self, word):\n        \"\"\"\n        Returns if the word is in the data \nstructure. A word could contain the dot character \n'.' to represent any one letter.\n        :type word: str\n        :rtype: bool\n        \"\"\"\n \n ","lang":"Python"},{"s":"class WordDictionary:\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n \n \n    def addWord(self, word: str) -> None:\n        \"\"\"\n        Adds a word into the data structure.\n        \"\"\"\n \n \n    def search(self, word: str) -> bool:\n        \"\"\"\n        Returns if the word is in the data \nstructure. A word could contain the dot character \n'.' to represent any one letter.\n        \"\"\"\n \n \n \n# Your WordDictionary object will be instantiated \nand called as such:\n# obj = WordDictionary()","lang":"Python3"},{"s":"typedef struct {\n    \n} WordDictionary;\n \n/** Initialize your data structure here. */\n \nWordDictionary* wordDictionaryCreate() {\n    \n}\n \n/** Adds a word into the data structure. */\nvoid wordDictionaryAddWord(WordDictionary* obj, \nchar * word) {\n  \n}\n \n/** Returns if the word is in the data structure. A \nword could contain the dot character '.' to \nrepresent any one letter. */\nbool wordDictionarySearch(WordDictionary* obj, char \n* word) {\n  \n}\n \nvoid wordDictionaryFree(WordDictionary* obj) {\n    ","lang":"C"},{"s":"public class WordDictionary {\n \n    /** Initialize your data structure here. */\n    public WordDictionary() {\n \n    }\n    \n    /** Adds a word into the data structure. */\n    public void AddWord(string word) {\n \n    }\n    \n    /** Returns if the word is in the data \nstructure. A word could contain the dot character \n'.' to represent any one letter. */\n    public bool Search(string word) {\n \n    }\n}\n \n/**\n * Your WordDictionary object will be instantiated \nand called as such:\n * WordDictionary obj = new WordDictionary();\n * obj.AddWord(word);\n * bool param_2 = obj.Search(word);","lang":"C#"},{"s":"/**\n * Initialize your data structure here.\n */\nvar WordDictionary = function() {\n \n};\n \n/**\n * Adds a word into the data structure. \n * @param {string} word\n * @return {void}\n */\nWordDictionary.prototype.addWord = function(word) {\n \n};\n \n/**\n * Returns if the word is in the data structure. A \nword could contain the dot character '.' to \nrepresent any one letter. \n * @param {string} word\n * @return {boolean}\n */\nWordDictionary.prototype.search = function(word) {\n \n};","lang":"JavaScript"},{"s":"class WordDictionary\n \n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n \n    end\n \n \n=begin\n    Adds a word into the data structure.\n    :type word: String\n    :rtype: Void\n=end\n    def add_word(word)\n \n    end\n \n \n=begin\n    Returns if the word is in the data structure. A \nword could contain the dot character '.' to \nrepresent any one letter.\n    :type word: String\n    :rtype: Boolean","lang":"Ruby"},{"s":"class WordDictionary {\n \n    /** Initialize your data structure here. */\n    init() {\n \n    }\n    \n    /** Adds a word into the data structure. */\n    func addWord(_ word: String) {\n \n    }\n    \n    /** Returns if the word is in the data \nstructure. A word could contain the dot character \n'.' to represent any one letter. */\n    func search(_ word: String) -> Bool {\n \n    }\n}\n \n/**\n * Your WordDictionary object will be instantiated \nand called as such:\n * let obj = WordDictionary()\n * obj.addWord(word)\n * let ret_2: Bool = obj.search(word)","lang":"Swift"},{"s":"type WordDictionary struct {\n \n}\n \n \n/** Initialize your data structure here. */\nfunc Constructor() WordDictionary {\n \n}\n \n \n/** Adds a word into the data structure. */\nfunc (this *WordDictionary) AddWord(word string)  {\n \n}\n \n \n/** Returns if the word is in the data structure. A \nword could contain the dot character '.' to \nrepresent any one letter. */\nfunc (this *WordDictionary) Search(word string) \nbool {\n \n}\n \n ","lang":"Go"},{"s":"class WordDictionary() {\n \n    /** Initialize your data structure here. */\n \n \n    /** Adds a word into the data structure. */\n    def addWord(word: String) {\n \n    }\n \n    /** Returns if the word is in the data \nstructure. A word could contain the dot character \n'.' to represent any one letter. */\n    def search(word: String): Boolean = {\n \n    }\n \n}\n \n/**\n * Your WordDictionary object will be instantiated \nand called as such:\n * var obj = new WordDictionary()\n * obj.addWord(word)\n * var param_2 = obj.search(word)\n */","lang":"Scala"},{"s":"class WordDictionary() {\n \n    /** Initialize your data structure here. */\n \n \n    /** Adds a word into the data structure. */\n    fun addWord(word: String) {\n \n    }\n \n    /** Returns if the word is in the data \nstructure. A word could contain the dot character \n'.' to represent any one letter. */\n    fun search(word: String): Boolean {\n \n    }\n \n}\n \n/**\n * Your WordDictionary object will be instantiated \nand called as such:\n * var obj = WordDictionary()\n * obj.addWord(word)\n * var param_2 = obj.search(word)\n */","lang":"Kotlin"},{"s":"struct WordDictionary {\n \n}\n \n \n/**\n * `&self` means the method takes an immutable \nreference.\n * If you need a mutable reference, change it to `&\nmut self` instead.\n */\nimpl WordDictionary {\n \n    /** Initialize your data structure here. */\n    fn new() -> Self {\n \n    }\n    \n    /** Adds a word into the data structure. */\n    fn add_word(&self, word: String) {\n \n    }\n    \n    /** Returns if the word is in the data \nstructure. A word could contain the dot character \n'.' to represent any one letter. */","lang":"Rust"},{"s":"class WordDictionary {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n \n    }\n \n    /**\n     * Adds a word into the data structure.\n     * @param String $word\n     * @return NULL\n     */\n    function addWord($word) {\n \n    }\n \n    /**\n     * Returns if the word is in the data \nstructure. A word could contain the dot character \n'.' to represent any one letter.\n     * @param String $word\n     * @return Boolean\n     */\n    function search($word) {\n ","lang":"PHP"},{"s":"class WordDictionary {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n \n    }\n \n    /**\n     * Adds a word into the data structure.\n     * @param String $word\n     * @return NULL\n     */\n    function addWord($word) {\n \n    }\n \n    /**\n     * Returns if the word is in the data \nstructure. A word could contain the dot character \n'.' to represent any one letter.\n     * @param String $word\n     * @return Boolean\n     */\n    function search($word) {\n ","lang":"PHP"}],"page":"211/1581","h":"211. 添加与搜索单词 - 数据结构设计","d":"<div class=\"notranslate\"><p>设计一个支持以下两种操作的数据结构：</p>\n\n<pre>void addWord(word)\nbool search(word)\n</pre>\n\n<p>search(word)&nbsp;可以搜索文字或正则表达式字符串，字符串只包含字母&nbsp;<code>.</code>&nbsp;或&nbsp;<code>a-z</code>&nbsp;。&nbsp;<code>.</code> 可以表示任何一个字母。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>addWord(\"bad\")\naddWord(\"dad\")\naddWord(\"mad\")\nsearch(\"pad\") -&gt; false\nsearch(\"bad\") -&gt; true\nsearch(\".ad\") -&gt; true\nsearch(\"b..\") -&gt; true\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<p>你可以假设所有单词都是由小写字母 <code>a-z</code>&nbsp;组成的。</p>\n</div>","l":"中等","s":"class WordDictionary\n \n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n \n    end\n \n \n=begin\n    Adds a word into the data structure.\n    :type word: String\n    :rtype: Void\n=end\n    def add_word(word)\n \n    end\n \n \n=begin\n    Returns if the word is in the data structure. A \nword could contain the dot character '.' to \nrepresent any one letter.\n    :type word: String\n    :rtype: Boolean","lang":"Ruby","href":"https://leetcode-cn.com/problems/add-and-search-word-data-structure-design/","bb":{"x":445,"y":40,"w":116,"h":28}}

