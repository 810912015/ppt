{"ls":[{"s":"class Solution {\n    public int uniqueLetterString(String s) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def uniqueLetterString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def uniqueLetterString(self, s: str) -> int:","lang":"Python3"},{"s":"int uniqueLetterString(char * s){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int UniqueLetterString(string s) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} s\n * @return {number}\n */\nvar uniqueLetterString = function(s) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} s\n# @return {Integer}\ndef unique_letter_string(s)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func uniqueLetterString(_ s: String) -> Int {\n \n    }\n}","lang":"Swift"},{"s":"func uniqueLetterString(s string) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def uniqueLetterString(s: String): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun uniqueLetterString(s: String): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn unique_letter_string(s: String) -> i32 {\n \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function uniqueLetterString($s) {\n \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function uniqueLetterString($s) {\n \n    }\n}","lang":"PHP"}],"page":"828/1581","h":"828. 统计子串中的唯一字符","d":"<div class=\"notranslate\"><p>我们定义了一个函数 <code>countUniqueChars(s)</code> 来统计字符串 <code>s</code> 中的唯一字符，并返回唯一字符的个数。</p>\n\n<p>例如：<code>s = \"LEETCODE\"</code> ，则其中 <code>\"L\"</code>, <code>\"T\"</code>,<code>\"C\"</code>,<code>\"O\"</code>,<code>\"D\"</code> 都是唯一字符，因为它们只出现一次，所以 <code>countUniqueChars(s) = 5</code> 。</p>\n\n<p>本题将会给你一个字符串 <code>s</code> ，我们需要返回 <code>countUniqueChars(t)</code> 的总和，其中 <code>t</code> 是 <code>s</code> 的子字符串。注意，某些子字符串可能是重复的，但你统计时也必须算上这些重复的子字符串（也就是说，你必须统计 <code>s</code> 的所有子字符串中的唯一字符）。</p>\n\n<p>由于答案可能非常大，请将结果 <strong>mod 10 ^ 9 + 7</strong> 后再返回。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入: </strong>\"ABC\"\n<strong>输出: </strong>10\n<strong>解释:</strong> 所有可能的子串为：\"A\",\"B\",\"C\",\"AB\",\"BC\" 和 \"ABC\"。\n     其中，每一个子串都由独特字符构成。\n     所以其长度总和为：1 + 1 + 1 + 2 + 2 + 3 = 10\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入: </strong>\"ABA\"\n<strong>输出: </strong>8\n<strong>解释: </strong>除<code>了 countUniqueChars</code>(\"ABA\") = 1 之外，其余与示例 1 相同。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>s = \"LEETCODE\"\n<strong>输出：</strong>92\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 10^4</code></li>\n\t<li><code>s</code> 只包含大写英文字符</li>\n</ul>\n</div>","l":"困难","s":"# @param {String} s\n# @return {Integer}\ndef unique_letter_string(s)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/count-unique-characters-of-all-substrings-of-a-given-string/","bb":{"x":445,"y":40,"w":116,"h":28}}

