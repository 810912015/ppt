{"ls":[{"s":"# @param {Integer[]} a\n# @param {Integer[]} b\n# @return {Integer[]}\ndef advantage_count(a, b)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func advantageCount(_ A: [Int], _ B: [Int]) -> \n[Int] {\n        \n    }\n}","lang":"Swift"},{"s":"func advantageCount(A []int, B []int) []int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def advantageCount(A: Array[Int], B: Array[Int])\n: Array[Int] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun advantageCount(A: IntArray, B: IntArray): \nIntArray {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn advantage_count(a: Vec<i32>, b: Vec<i32>)\n -> Vec<i32> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int[] advantageCount(int[] A, int[] B) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def advantageCount(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: List[int]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def advantageCount(self, A: List[int], B: List\n[int]) -> List[int]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, \nassume caller calls free().\n */\nint* advantageCount(int* A, int ASize, int* B, int \nBSize, int* returnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int[] AdvantageCount(int[] A, int[] B) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} A\n * @param {number[]} B\n * @return {number[]}\n */\nvar advantageCount = function(A, B) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} a\n# @param {Integer[]} b\n# @return {Integer[]}\ndef advantage_count(a, b)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[]} a\n# @param {Integer[]} b\n# @return {Integer[]}\ndef advantage_count(a, b)\n \nend","lang":"Ruby"}],"page":"870/1581","h":"870. 优势洗牌","d":"<div class=\"notranslate\"><p>给定两个大小相等的数组&nbsp;<code>A</code>&nbsp;和&nbsp;<code>B</code>，A 相对于 B 的<em>优势</em>可以用满足&nbsp;<code>A[i] &gt; B[i]</code>&nbsp;的索引 <code>i</code>&nbsp;的数目来描述。</p>\n\n<p>返回&nbsp;<code>A</code>&nbsp;的<strong>任意</strong>排列，使其相对于 <code>B</code>&nbsp;的优势最大化。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>A = [2,7,11,15], B = [1,10,4,11]\n<strong>输出：</strong>[2,11,7,15]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>A = [12,24,8,32], B = [13,25,32,11]\n<strong>输出：</strong>[24,32,8,12]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length = B.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10^9</code></li>\n\t<li><code>0 &lt;= B[i] &lt;= 10^9</code></li>\n</ol>\n</div>","l":"中等","s":"class Solution {","lang":"PHP","href":"https://leetcode-cn.com/problems/advantage-shuffle/","bb":{"x":445,"y":40,"w":116,"h":28}}

