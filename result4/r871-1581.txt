{"ls":[{"s":"class Solution {\n    public int minRefuelStops(int target, int \nstartFuel, int[][] stations) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def minRefuelStops(self, target, startFuel, \nstations):\n        \"\"\"\n        :type target: int\n        :type startFuel: int\n        :type stations: List[List[int]]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def minRefuelStops(self, target: int, \nstartFuel: int, stations: List[List[int]]) -> int:","lang":"Python3"},{"s":"int minRefuelStops(int target, int startFuel, int** \nstations, int stationsSize, int* stationsColSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int MinRefuelStops(int target, int \nstartFuel, int[][] stations) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} target\n * @param {number} startFuel\n * @param {number[][]} stations\n * @return {number}\n */\nvar minRefuelStops = function(target, startFuel, \nstations) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer} target\n# @param {Integer} start_fuel\n# @param {Integer[][]} stations\n# @return {Integer}\ndef min_refuel_stops(target, start_fuel, stations)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func minRefuelStops(_ target: Int, _ startFuel: \nInt, _ stations: [[Int]]) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func minRefuelStops(target int, startFuel int, \nstations [][]int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def minRefuelStops(target: Int, startFuel: Int, \nstations: Array[Array[Int]]): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun minRefuelStops(target: Int, startFuel: Int, \nstations: Array<IntArray>): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn min_refuel_stops(target: i32, \nstart_fuel: i32, stations: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer $target\n     * @param Integer $startFuel\n     * @param Integer[][] $stations\n     * @return Integer\n     */\n    function minRefuelStops($target, $startFuel, \n$stations) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer $target\n     * @param Integer $startFuel\n     * @param Integer[][] $stations\n     * @return Integer\n     */\n    function minRefuelStops($target, $startFuel, \n$stations) {\n        \n    }\n}","lang":"PHP"}],"page":"871/1581","h":"871. 最低加油次数","d":"<div class=\"notranslate\"><p>汽车从起点出发驶向目的地，该目的地位于出发位置东面 <code>target</code>&nbsp;英里处。</p>\n\n<p>沿途有加油站，每个&nbsp;<code>station[i]</code>&nbsp;代表一个加油站，它位于出发位置东面&nbsp;<code>station[i][0]</code>&nbsp;英里处，并且有&nbsp;<code>station[i][1]</code>&nbsp;升汽油。</p>\n\n<p>假设汽车油箱的容量是无限的，其中最初有&nbsp;<code>startFuel</code>&nbsp;升燃料。它每行驶 1 英里就会用掉 1 升汽油。</p>\n\n<p>当汽车到达加油站时，它可能停下来加油，将所有汽油从加油站转移到汽车中。</p>\n\n<p>为了到达目的地，汽车所必要的最低加油次数是多少？如果无法到达目的地，则返回 <code>-1</code> 。</p>\n\n<p>注意：如果汽车到达加油站时剩余燃料为 0，它仍然可以在那里加油。如果汽车到达目的地时剩余燃料为 0，仍然认为它已经到达目的地。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>target = 1, startFuel = 1, stations = []\n<strong>输出：</strong>0\n<strong>解释：</strong>我们可以在不加油的情况下到达目的地。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>target = 100, startFuel = 1, stations = [[10,100]]\n<strong>输出：</strong>-1\n<strong>解释：</strong>我们无法抵达目的地，甚至无法到达第一个加油站。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]\n<strong>输出：</strong>2\n<strong>解释：</strong>\n我们出发时有 10 升燃料。\n我们开车来到距起点 10 英里处的加油站，消耗 10 升燃料。将汽油从 0 升加到 60 升。\n然后，我们从 10 英里处的加油站开到 60 英里处的加油站（消耗 50 升燃料），\n并将汽油从 10 升加到 50 升。然后我们开车抵达目的地。\n我们沿途在1两个加油站停靠，所以返回 2 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= target, startFuel, stations[i][1] &lt;= 10^9</code></li>\n\t<li><code>0 &lt;= stations.length &lt;= 500</code></li>\n\t<li><code>0 &lt; stations[0][0] &lt; stations[1][0] &lt; ... &lt; stations[stations.length-1][0] &lt; target</code></li>\n</ol>\n</div>","l":"困难","s":"# @param {Integer} target\n# @param {Integer} start_fuel\n# @param {Integer[][]} stations\n# @return {Integer}\ndef min_refuel_stops(target, start_fuel, stations)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/minimum-number-of-refueling-stops/","bb":{"x":445,"y":40,"w":116,"h":28}}

