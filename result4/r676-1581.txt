{"ls":[{"s":"class MagicDictionary\n \n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n \n    end\n \n \n=begin\n    Build a dictionary through a list of words\n    :type dict: String[]\n    :rtype: Void\n=end\n    def build_dict(dict)\n \n    end\n \n \n=begin\n    Returns if there is any word in the trie that \nequals to the given word after modifying exactly \none character\n    :type word: String\n    :rtype: Boolean","lang":"Ruby"},{"s":"class MagicDictionary {\n \n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    /** Build a dictionary through a list of words \n*/\n    func buildDict(_ dict: [String]) {\n        \n    }\n    \n    /** Returns if there is any word in the trie \nthat equals to the given word after modifying \nexactly one character */\n    func search(_ word: String) -> Bool {\n        \n    }\n}\n \n/**\n * Your MagicDictionary object will be instantiated \nand called as such:\n * let obj = MagicDictionary()\n * obj.buildDict(dict)","lang":"Swift"},{"s":"type MagicDictionary struct {\n \n}\n \n \n/** Initialize your data structure here. */\nfunc Constructor() MagicDictionary {\n \n}\n \n \n/** Build a dictionary through a list of words */\nfunc (this *MagicDictionary) BuildDict(dict []\nstring)  {\n \n}\n \n \n/** Returns if there is any word in the trie that \nequals to the given word after modifying exactly \none character */\nfunc (this *MagicDictionary) Search(word string) \nbool {\n \n}\n ","lang":"Go"},{"s":"class MagicDictionary() {\n \n    /** Initialize your data structure here. */\n \n \n    /** Build a dictionary through a list of words \n*/\n    def buildDict(dict: Array[String]) {\n \n    }\n \n    /** Returns if there is any word in the trie \nthat equals to the given word after modifying \nexactly one character */\n    def search(word: String): Boolean = {\n \n    }\n \n}\n \n/**\n * Your MagicDictionary object will be instantiated \nand called as such:\n * var obj = new MagicDictionary()\n * obj.buildDict(dict)\n * var param_2 = obj.search(word)","lang":"Scala"},{"s":"class MagicDictionary() {\n \n    /** Initialize your data structure here. */\n \n \n    /** Build a dictionary through a list of words \n*/\n    fun buildDict(dict: Array<String>) {\n \n    }\n \n    /** Returns if there is any word in the trie \nthat equals to the given word after modifying \nexactly one character */\n    fun search(word: String): Boolean {\n \n    }\n \n}\n \n/**\n * Your MagicDictionary object will be instantiated \nand called as such:\n * var obj = MagicDictionary()\n * obj.buildDict(dict)\n * var param_2 = obj.search(word)","lang":"Kotlin"},{"s":"struct MagicDictionary {\n \n}\n \n \n/** \n * `&self` means the method takes an immutable \nreference.\n * If you need a mutable reference, change it to `&\nmut self` instead.\n */\nimpl MagicDictionary {\n \n    /** Initialize your data structure here. */\n    fn new() -> Self {\n        \n    }\n    \n    /** Build a dictionary through a list of words \n*/\n    fn build_dict(&self, dict: Vec<String>) {\n        \n    }\n    \n    /** Returns if there is any word in the trie \nthat equals to the given word after modifying ","lang":"Rust"},{"s":"class MagicDictionary {\n \n    /** Initialize your data structure here. */\n    public MagicDictionary() {\n \n    }\n    \n    /** Build a dictionary through a list of words \n*/\n    public void buildDict(String[] dict) {\n \n    }\n    \n    /** Returns if there is any word in the trie \nthat equals to the given word after modifying \nexactly one character */\n    public boolean search(String word) {\n \n    }\n}\n \n/**\n * Your MagicDictionary object will be instantiated \nand called as such:\n * MagicDictionary obj = new MagicDictionary();\n * obj.buildDict(dict);","lang":"Java"},{"s":"class MagicDictionary(object):\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n \n    def buildDict(self, dict):\n        \"\"\"\n        Build a dictionary through a list of words\n        :type dict: List[str]\n        :rtype: None\n        \"\"\"\n        \n \n    def search(self, word):\n        \"\"\"\n        Returns if there is any word in the trie \nthat equals to the given word after modifying \nexactly one character\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n ","lang":"Python"},{"s":"class MagicDictionary:\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n \n    def buildDict(self, dict: List[str]) -> None:\n        \"\"\"\n        Build a dictionary through a list of words\n        \"\"\"\n        \n \n    def search(self, word: str) -> bool:\n        \"\"\"\n        Returns if there is any word in the trie \nthat equals to the given word after modifying \nexactly one character\n        \"\"\"\n        \n \n \n# Your MagicDictionary object will be instantiated \nand called as such:\n# obj = MagicDictionary()","lang":"Python3"},{"s":"typedef struct {\n    \n} MagicDictionary;\n \n/** Initialize your data structure here. */\n \nMagicDictionary* magicDictionaryCreate() {\n    \n}\n \n/** Build a dictionary through a list of words */\nvoid magicDictionaryBuildDict(MagicDictionary* obj, \nchar ** dict, int dictSize) {\n  \n}\n \n/** Returns if there is any word in the trie that \nequals to the given word after modifying exactly \none character */\nbool magicDictionarySearch(MagicDictionary* obj, \nchar * word) {\n  \n}\n \nvoid magicDictionaryFree(MagicDictionary* obj) {\n    ","lang":"C"},{"s":"public class MagicDictionary {\n \n    /** Initialize your data structure here. */\n    public MagicDictionary() {\n \n    }\n    \n    /** Build a dictionary through a list of words \n*/\n    public void BuildDict(string[] dict) {\n \n    }\n    \n    /** Returns if there is any word in the trie \nthat equals to the given word after modifying \nexactly one character */\n    public bool Search(string word) {\n \n    }\n}\n \n/**\n * Your MagicDictionary object will be instantiated \nand called as such:\n * MagicDictionary obj = new MagicDictionary();\n * obj.BuildDict(dict);","lang":"C#"},{"s":"/**\n * Initialize your data structure here.\n */\nvar MagicDictionary = function() {\n \n};\n \n/**\n * Build a dictionary through a list of words \n * @param {string[]} dict\n * @return {void}\n */\nMagicDictionary.prototype.buildDict = function(dict)\n {\n \n};\n \n/**\n * Returns if there is any word in the trie that \nequals to the given word after modifying exactly \none character \n * @param {string} word\n * @return {boolean}\n */\nMagicDictionary.prototype.search = function(word) {\n ","lang":"JavaScript"},{"s":"class MagicDictionary\n \n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n \n    end\n \n \n=begin\n    Build a dictionary through a list of words\n    :type dict: String[]\n    :rtype: Void\n=end\n    def build_dict(dict)\n \n    end\n \n \n=begin\n    Returns if there is any word in the trie that \nequals to the given word after modifying exactly \none character\n    :type word: String\n    :rtype: Boolean","lang":"Ruby"},{"s":"class MagicDictionary\n \n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n \n    end\n \n \n=begin\n    Build a dictionary through a list of words\n    :type dict: String[]\n    :rtype: Void\n=end\n    def build_dict(dict)\n \n    end\n \n \n=begin\n    Returns if there is any word in the trie that \nequals to the given word after modifying exactly \none character\n    :type word: String\n    :rtype: Boolean","lang":"Ruby"}],"page":"676/1581","h":"676. 实现一个魔法字典","d":"<div class=\"notranslate\"><p>实现一个带有<code>buildDict</code>, 以及&nbsp;<code>search</code>方法的魔法字典。</p>\n\n<p>对于<code>buildDict</code>方法，你将被给定一串不重复的单词来构建一个字典。</p>\n\n<p>对于<code>search</code>方法，你将被给定一个单词，并且判定能否只将这个单词中<strong>一个</strong>字母换成另一个字母，使得所形成的新单词存在于你构建的字典中。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>Input: buildDict([\"hello\", \"leetcode\"]), Output: Null\nInput: search(\"hello\"), Output: False\nInput: search(\"hhllo\"), Output: True\nInput: search(\"hell\"), Output: False\nInput: search(\"leetcoded\"), Output: False\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>你可以假设所有输入都是小写字母&nbsp;<code>a-z</code>。</li>\n\t<li>为了便于竞赛，测试所用的数据量很小。你可以在竞赛结束后，考虑更高效的算法。</li>\n\t<li>请记住<strong>重置</strong>MagicDictionary类中声明的类变量，因为静态/类变量会在多个测试用例中保留。 请参阅<a href=\"http://leetcode.com/faq/#different-output\">这里</a>了解更多详情。</li>\n</ol>\n</div>","l":"中等","s":"class MagicDictionary {","lang":"PHP","href":"https://leetcode-cn.com/problems/implement-magic-dictionary/","bb":{"x":445,"y":40,"w":116,"h":28}}

