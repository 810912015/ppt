{"ls":[{"s":"# @param {String} s\n# @param {String} t\n# @return {Integer}\ndef num_distinct(s, t)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func numDistinct(_ s: String, _ t: String) -> \nInt {\n        \n    }\n}","lang":"Swift"},{"s":"func numDistinct(s string, t string) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def numDistinct(s: String, t: String): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun numDistinct(s: String, t: String): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn num_distinct(s: String, t: String) -> \ni32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int numDistinct(String s, String t) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def numDistinct(self, s: str, t: str) -> int:","lang":"Python3"},{"s":"int numDistinct(char * s, char * t){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int NumDistinct(string s, string t) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} s\n * @param {string} t\n * @return {number}\n */\nvar numDistinct = function(s, t) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} s\n# @param {String} t\n# @return {Integer}\ndef num_distinct(s, t)\n \nend","lang":"Ruby"},{"s":"# @param {String} s\n# @param {String} t\n# @return {Integer}\ndef num_distinct(s, t)\n \nend","lang":"Ruby"}],"page":"115/1581","h":"115. 不同的子序列","d":"<div class=\"notranslate\"><p>给定一个字符串&nbsp;<strong>S&nbsp;</strong>和一个字符串&nbsp;<strong>T</strong>，计算在 <strong>S</strong> 的子序列中 <strong>T</strong> 出现的个数。</p>\n\n<p>一个字符串的一个子序列是指，通过删除一些（也可以不删除）字符且不干扰剩余字符相对位置所组成的新字符串。（例如，<code>\"ACE\"</code>&nbsp;是&nbsp;<code>\"ABCDE\"</code>&nbsp;的一个子序列，而&nbsp;<code>\"AEC\"</code>&nbsp;不是）</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入: </strong>S = <code>\"rabbbit\"</code>, T = <code>\"rabbit\"\n<strong>输出:</strong>&nbsp;3\n</code><strong>解释:\n</strong>\n如下图所示, 有 3 种可以从 S 中得到 <code>\"rabbit\" 的方案</code>。\n(上箭头符号 ^ 表示选取的字母)\n\n<code>rabbbit</code>\n^^^^ ^^\n<code>rabbbit</code>\n^^ ^^^^\n<code>rabbbit</code>\n^^^ ^^^\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入: </strong>S = <code>\"babgbag\"</code>, T = <code>\"bag\"\n<strong>输出:</strong>&nbsp;5\n</code><strong>解释:\n</strong>\n如下图所示, 有 5 种可以从 S 中得到 <code>\"bag\" 的方案</code>。 \n(上箭头符号 ^ 表示选取的字母)\n\n<code>babgbag</code>\n^^ ^\n<code>babgbag</code>\n^^    ^\n<code>babgbag</code>\n^    ^^\n<code>babgbag</code>\n  ^  ^^\n<code>babgbag</code>\n    ^^^</pre>\n</div>","l":"困难","s":"class Solution {","lang":"PHP","href":"https://leetcode-cn.com/problems/distinct-subsequences/","bb":{"x":445,"y":40,"w":116,"h":28}}

