{"ls":[{"s":"class RandomizedCollection {\n \n    /** Initialize your data structure here. */\n    public RandomizedCollection() {\n \n    }\n    \n    /** Inserts a value to the collection. Returns \ntrue if the collection did not already contain the \nspecified element. */\n    public boolean insert(int val) {\n \n    }\n    \n    /** Removes a value from the collection. \nReturns true if the collection contained the \nspecified element. */\n    public boolean remove(int val) {\n \n    }\n    \n    /** Get a random element from the collection. */\n    public int getRandom() {\n \n    }\n}","lang":"Java"},{"s":"class RandomizedCollection(object):\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n \n    def insert(self, val):\n        \"\"\"\n        Inserts a value to the collection. Returns \ntrue if the collection did not already contain the \nspecified element.\n        :type val: int\n        :rtype: bool\n        \"\"\"\n        \n \n    def remove(self, val):\n        \"\"\"\n        Removes a value from the collection. \nReturns true if the collection contained the \nspecified element.\n        :type val: int\n        :rtype: bool\n        \"\"\"","lang":"Python"},{"s":"class RandomizedCollection:\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n \n    def insert(self, val: int) -> bool:\n        \"\"\"\n        Inserts a value to the collection. Returns \ntrue if the collection did not already contain the \nspecified element.\n        \"\"\"\n        \n \n    def remove(self, val: int) -> bool:\n        \"\"\"\n        Removes a value from the collection. \nReturns true if the collection contained the \nspecified element.\n        \"\"\"\n        \n \n    def getRandom(self) -> int:\n        \"\"\"","lang":"Python3"},{"s":"typedef struct {\n    \n} RandomizedCollection;\n \n/** Initialize your data structure here. */\n \nRandomizedCollection* randomizedCollectionCreate() {\n    \n}\n \n/** Inserts a value to the collection. Returns true \nif the collection did not already contain the \nspecified element. */\nbool randomizedCollectionInsert\n(RandomizedCollection* obj, int val) {\n  \n}\n \n/** Removes a value from the collection. Returns \ntrue if the collection contained the specified \nelement. */\nbool randomizedCollectionRemove\n(RandomizedCollection* obj, int val) {\n  \n}\n ","lang":"C"},{"s":"public class RandomizedCollection {\n \n    /** Initialize your data structure here. */\n    public RandomizedCollection() {\n \n    }\n    \n    /** Inserts a value to the collection. Returns \ntrue if the collection did not already contain the \nspecified element. */\n    public bool Insert(int val) {\n \n    }\n    \n    /** Removes a value from the collection. \nReturns true if the collection contained the \nspecified element. */\n    public bool Remove(int val) {\n \n    }\n    \n    /** Get a random element from the collection. */\n    public int GetRandom() {\n \n    }\n}","lang":"C#"},{"s":"/**\n * Initialize your data structure here.\n */\nvar RandomizedCollection = function() {\n \n};\n \n/**\n * Inserts a value to the collection. Returns true \nif the collection did not already contain the \nspecified element. \n * @param {number} val\n * @return {boolean}\n */\nRandomizedCollection.prototype.insert = function\n(val) {\n \n};\n \n/**\n * Removes a value from the collection. Returns \ntrue if the collection contained the specified \nelement. \n * @param {number} val\n * @return {boolean}\n */","lang":"JavaScript"},{"s":"class RandomizedCollection\n \n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n \n    end\n \n \n=begin\n    Inserts a value to the collection. Returns true \nif the collection did not already contain the \nspecified element.\n    :type val: Integer\n    :rtype: Boolean\n=end\n    def insert(val)\n \n    end\n \n \n=begin\n    Removes a value from the collection. Returns \ntrue if the collection contained the specified \nelement.","lang":"Ruby"},{"s":"class RandomizedCollection {\n \n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    /** Inserts a value to the collection. Returns \ntrue if the collection did not already contain the \nspecified element. */\n    func insert(_ val: Int) -> Bool {\n        \n    }\n    \n    /** Removes a value from the collection. \nReturns true if the collection contained the \nspecified element. */\n    func remove(_ val: Int) -> Bool {\n        \n    }\n    \n    /** Get a random element from the collection. */\n    func getRandom() -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"type RandomizedCollection struct {\n \n}\n \n \n/** Initialize your data structure here. */\nfunc Constructor() RandomizedCollection {\n \n}\n \n \n/** Inserts a value to the collection. Returns true \nif the collection did not already contain the \nspecified element. */\nfunc (this *RandomizedCollection) Insert(val int) \nbool {\n \n}\n \n \n/** Removes a value from the collection. Returns \ntrue if the collection contained the specified \nelement. */\nfunc (this *RandomizedCollection) Remove(val int) \nbool {\n ","lang":"Go"},{"s":"class RandomizedCollection() {\n \n    /** Initialize your data structure here. */\n \n \n    /** Inserts a value to the collection. Returns \ntrue if the collection did not already contain the \nspecified element. */\n    def insert(`val`: Int): Boolean = {\n \n    }\n \n    /** Removes a value from the collection. \nReturns true if the collection contained the \nspecified element. */\n    def remove(`val`: Int): Boolean = {\n \n    }\n \n    /** Get a random element from the collection. */\n    def getRandom(): Int = {\n \n    }\n \n}\n ","lang":"Scala"},{"s":"class RandomizedCollection() {\n \n    /** Initialize your data structure here. */\n \n \n    /** Inserts a value to the collection. Returns \ntrue if the collection did not already contain the \nspecified element. */\n    fun insert(`val`: Int): Boolean {\n \n    }\n \n    /** Removes a value from the collection. \nReturns true if the collection contained the \nspecified element. */\n    fun remove(`val`: Int): Boolean {\n \n    }\n \n    /** Get a random element from the collection. */\n    fun getRandom(): Int {\n \n    }\n \n}\n ","lang":"Kotlin"},{"s":"struct RandomizedCollection {\n \n}\n \n \n/** \n * `&self` means the method takes an immutable \nreference.\n * If you need a mutable reference, change it to `&\nmut self` instead.\n */\nimpl RandomizedCollection {\n \n    /** Initialize your data structure here. */\n    fn new() -> Self {\n        \n    }\n    \n    /** Inserts a value to the collection. Returns \ntrue if the collection did not already contain the \nspecified element. */\n    fn insert(&self, val: i32) -> bool {\n        \n    }\n    \n    /** Removes a value from the collection. ","lang":"Rust"},{"s":"class RandomizedCollection {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * Inserts a value to the collection. Returns \ntrue if the collection did not already contain the \nspecified element.\n     * @param Integer $val\n     * @return Boolean\n     */\n    function insert($val) {\n        \n    }\n  \n    /**\n     * Removes a value from the collection. Returns \ntrue if the collection contained the specified \nelement.\n     * @param Integer $val\n     * @return Boolean\n     */","lang":"PHP"},{"s":"class RandomizedCollection {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * Inserts a value to the collection. Returns \ntrue if the collection did not already contain the \nspecified element.\n     * @param Integer $val\n     * @return Boolean\n     */\n    function insert($val) {\n        \n    }\n  \n    /**\n     * Removes a value from the collection. Returns \ntrue if the collection contained the specified \nelement.\n     * @param Integer $val\n     * @return Boolean\n     */","lang":"PHP"}],"page":"381/1581","h":"381. O(1) 时间插入、删除和获取随机元素 - 允许重复","d":"<div class=\"notranslate\"><p>设计一个支持在<em>平均&nbsp;</em>时间复杂度&nbsp;<strong>O(1)&nbsp;</strong>下<strong>，&nbsp;</strong>执行以下操作的数据结构。</p>\n\n<p><strong>注意: 允许出现重复元素。</strong></p>\n\n<ol>\n\t<li><code>insert(val)</code>：向集合中插入元素 val。</li>\n\t<li><code>remove(val)</code>：当 val 存在时，从集合中移除一个 val。</li>\n\t<li><code>getRandom</code>：从现有集合中随机获取一个元素。每个元素被返回的概率应该与其在集合中的数量呈线性相关。</li>\n</ol>\n\n<p><strong>示例:</strong></p>\n\n<pre>// 初始化一个空的集合。\nRandomizedCollection collection = new RandomizedCollection();\n\n// 向集合中插入 1 。返回 true 表示集合不包含 1 。\ncollection.insert(1);\n\n// 向集合中插入另一个 1 。返回 false 表示集合包含 1 。集合现在包含 [1,1] 。\ncollection.insert(1);\n\n// 向集合中插入 2 ，返回 true 。集合现在包含 [1,1,2] 。\ncollection.insert(2);\n\n// getRandom 应当有 2/3 的概率返回 1 ，1/3 的概率返回 2 。\ncollection.getRandom();\n\n// 从集合中删除 1 ，返回 true 。集合现在包含 [1,2] 。\ncollection.remove(1);\n\n// getRandom 应有相同概率返回 1 和 2 。\ncollection.getRandom();\n</pre>\n</div>","l":"困难","s":"class RandomizedCollection\n \n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n \n    end\n \n \n=begin\n    Inserts a value to the collection. Returns true \nif the collection did not already contain the \nspecified element.\n    :type val: Integer\n    :rtype: Boolean\n=end\n    def insert(val)\n \n    end\n \n \n=begin\n    Removes a value from the collection. Returns \ntrue if the collection contained the specified \nelement.","lang":"Ruby","href":"https://leetcode-cn.com/problems/insert-delete-getrandom-o1-duplicates-allowed/","bb":{"x":445,"y":40,"w":116,"h":28}}

