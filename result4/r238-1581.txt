{"ls":[{"s":"class Solution {\n    public int[] productExceptSelf(int[] nums) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def productExceptSelf(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def productExceptSelf(self, nums: List[int]) -> \nList[int]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, \nassume caller calls free().\n */\nint* productExceptSelf(int* nums, int numsSize, \nint* returnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int[] ProductExceptSelf(int[] nums) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar productExceptSelf = function(nums) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums\n# @return {Integer[]}\ndef product_except_self(nums)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func productExceptSelf(_ nums: [Int]) -> [Int] {\n        \n    }\n}","lang":"Swift"},{"s":"func productExceptSelf(nums []int) []int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def productExceptSelf(nums: Array[Int]): Array\n[Int] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun productExceptSelf(nums: IntArray): IntArray \n{\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn product_except_self(nums: Vec<i32>) -> \nVec<i32> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function productExceptSelf($nums) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function productExceptSelf($nums) {\n        \n    }\n}","lang":"PHP"}],"page":"238/1581","h":"238. 除自身以外数组的乘积","d":"<div class=\"notranslate\"><p>给你一个长度为&nbsp;<em>n</em>&nbsp;的整数数组&nbsp;<code>nums</code>，其中&nbsp;<em>n</em> &gt; 1，返回输出数组&nbsp;<code>output</code>&nbsp;，其中 <code>output[i]</code>&nbsp;等于&nbsp;<code>nums</code>&nbsp;中除&nbsp;<code>nums[i]</code>&nbsp;之外其余各元素的乘积。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> <code>[1,2,3,4]</code>\n<strong>输出:</strong> <code>[24,12,8,6]</code></pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong>题目数据保证数组之中任意元素的全部前缀元素和后缀（甚至是整个数组）的乘积都在 32 位整数范围内。</p>\n\n<p><strong>说明: </strong>请<strong>不要使用除法，</strong>且在&nbsp;O(<em>n</em>) 时间复杂度内完成此题。</p>\n\n<p><strong>进阶：</strong><br>\n你可以在常数空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组<strong>不被视为</strong>额外空间。）</p>\n</div>","l":"中等","s":"# @param {Integer[]} nums\n# @return {Integer[]}\ndef product_except_self(nums)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/product-of-array-except-self/","bb":{"x":445,"y":40,"w":116,"h":28}}

