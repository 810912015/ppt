{"ls":[{"s":"# @param {String[]} tokens\n# @return {Integer}\ndef eval_rpn(tokens)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func evalRPN(_ tokens: [String]) -> Int {\n \n    }\n}","lang":"Swift"},{"s":"func evalRPN(tokens []string) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def evalRPN(tokens: Array[String]): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun evalRPN(tokens: Array<String>): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn eval_rpn(tokens: Vec<String>) -> i32 {\n \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int evalRPN(String[] tokens) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def evalRPN(self, tokens: List[str]) -> int:","lang":"Python3"},{"s":"int evalRPN(char ** tokens, int tokensSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int EvalRPN(string[] tokens) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string[]} tokens\n * @return {number}\n */\nvar evalRPN = function(tokens) {\n \n};","lang":"JavaScript"},{"s":"# @param {String[]} tokens\n# @return {Integer}\ndef eval_rpn(tokens)\n \nend","lang":"Ruby"},{"s":"# @param {String[]} tokens\n# @return {Integer}\ndef eval_rpn(tokens)\n \nend","lang":"Ruby"}],"page":"150/1581","h":"150. 逆波兰表达式求值","d":"<div class=\"notranslate\"><p>根据<a href=\"https://baike.baidu.com/item/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/128437\">逆波兰表示法</a>，求表达式的值。</p>\n\n<p>有效的运算符包括&nbsp;<code>+</code>,&nbsp;<code>-</code>,&nbsp;<code>*</code>,&nbsp;<code>/</code>&nbsp;。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>整数除法只保留整数部分。</li>\n\t<li>给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。</li>\n</ul>\n\n<p><strong>示例&nbsp;1：</strong></p>\n\n<pre><strong>输入:</strong> [\"2\", \"1\", \"+\", \"3\", \"*\"]\n<strong>输出:</strong> 9\n<strong>解释:</strong> ((2 + 1) * 3) = 9\n</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre><strong>输入:</strong> [\"4\", \"13\", \"5\", \"/\", \"+\"]\n<strong>输出:</strong> 6\n<strong>解释:</strong> (4 + (13 / 5)) = 6\n</pre>\n\n<p><strong>示例&nbsp;3：</strong></p>\n\n<pre><strong>输入:</strong> [\"10\", \"6\", \"9\", \"3\", \"+\", \"-11\", \"*\", \"/\", \"*\", \"17\", \"+\", \"5\", \"+\"]\n<strong>输出:</strong> 22\n<strong>解释:</strong> \n  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22</pre>\n</div>","l":"中等","s":"class Solution {","lang":"PHP","href":"https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/","bb":{"x":445,"y":40,"w":116,"h":28}}

