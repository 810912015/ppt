{"ls":[{"s":"# @param {Integer} max_choosable_integer\n# @param {Integer} desired_total\n# @return {Boolean}\ndef can_i_win(max_choosable_integer, desired_total)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func canIWin(_ maxChoosableInteger: Int, _ \ndesiredTotal: Int) -> Bool {\n        \n    }\n}","lang":"Swift"},{"s":"func canIWin(maxChoosableInteger int, desiredTotal \nint) bool {\n \n}","lang":"Go"},{"s":"object Solution {\n    def canIWin(maxChoosableInteger: Int, \ndesiredTotal: Int): Boolean = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun canIWin(maxChoosableInteger: Int, \ndesiredTotal: Int): Boolean {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn can_i_win(max_choosable_integer: i32, \ndesired_total: i32) -> bool {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public boolean canIWin(int maxChoosableInteger, \nint desiredTotal) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def canIWin(self, maxChoosableInteger, \ndesiredTotal):\n        \"\"\"\n        :type maxChoosableInteger: int\n        :type desiredTotal: int\n        :rtype: bool\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def canIWin(self, maxChoosableInteger: int, \ndesiredTotal: int) -> bool:","lang":"Python3"},{"s":"bool canIWin(int maxChoosableInteger, int \ndesiredTotal){\n \n}","lang":"C"},{"s":"public class Solution {\n    public bool CanIWin(int maxChoosableInteger, \nint desiredTotal) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} maxChoosableInteger\n * @param {number} desiredTotal\n * @return {boolean}\n */\nvar canIWin = function(maxChoosableInteger, \ndesiredTotal) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer} max_choosable_integer\n# @param {Integer} desired_total\n# @return {Boolean}\ndef can_i_win(max_choosable_integer, desired_total)\n \nend","lang":"Ruby"},{"s":"# @param {Integer} max_choosable_integer\n# @param {Integer} desired_total\n# @return {Boolean}\ndef can_i_win(max_choosable_integer, desired_total)\n \nend","lang":"Ruby"}],"page":"464/1581","h":"464. 我能赢吗","d":"<div class=\"notranslate\"><p>在 \"100 game\" 这个游戏中，两名玩家轮流选择从 1 到 10 的任意整数，累计整数和，先使得累计整数和达到 100 的玩家，即为胜者。</p>\n\n<p>如果我们将游戏规则改为 “玩家不能重复使用整数” 呢？</p>\n\n<p>例如，两个玩家可以轮流从公共整数池中抽取从 1 到 15 的整数（不放回），直到累计整数和 &gt;= 100。</p>\n\n<p>给定一个整数&nbsp;<code>maxChoosableInteger</code>&nbsp;（整数池中可选择的最大数）和另一个整数&nbsp;<code>desiredTotal</code>（累计和），判断先出手的玩家是否能稳赢（假设两位玩家游戏时都表现最佳）？</p>\n\n<p>你可以假设&nbsp;<code>maxChoosableInteger</code>&nbsp;不会大于 20，&nbsp;<code>desiredTotal</code>&nbsp;不会大于 300。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>\nmaxChoosableInteger = 10\ndesiredTotal = 11\n\n<strong>输出：</strong>\nfalse\n\n<strong>解释：\n</strong>无论第一个玩家选择哪个整数，他都会失败。\n第一个玩家可以选择从 1 到 10 的整数。\n如果第一个玩家选择 1，那么第二个玩家只能选择从 2 到 10 的整数。\n第二个玩家可以通过选择整数 10（那么累积和为 11 &gt;= desiredTotal），从而取得胜利.\n同样地，第一个玩家选择任意其他整数，第二个玩家都会赢。\n</pre>\n</div>","l":"中等","s":"class Solution {\n \n    /**\n     * @param Integer $maxChoosableInteger\n     * @param Integer $desiredTotal\n     * @return Boolean\n     */\n    function canIWin($maxChoosableInteger, \n$desiredTotal) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/can-i-win/","bb":{"x":445,"y":40,"w":116,"h":28}}

