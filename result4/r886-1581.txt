{"ls":[{"s":"# @param {Integer} n\n# @param {Integer[][]} dislikes\n# @return {Boolean}\ndef possible_bipartition(n, dislikes)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func possibleBipartition(_ N: Int, _ dislikes: [\n[Int]]) -> Bool {\n        \n    }\n}","lang":"Swift"},{"s":"func possibleBipartition(N int, dislikes [][]int) \nbool {\n \n}","lang":"Go"},{"s":"object Solution {\n    def possibleBipartition(N: Int, dislikes: Array\n[Array[Int]]): Boolean = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun possibleBipartition(N: Int, dislikes: \nArray<IntArray>): Boolean {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn possible_bipartition(n: i32, dislikes: \nVec<Vec<i32>>) -> bool {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public boolean possibleBipartition(int N, int[]\n[] dislikes) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def possibleBipartition(self, N, dislikes):\n        \"\"\"\n        :type N: int\n        :type dislikes: List[List[int]]\n        :rtype: bool\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def possibleBipartition(self, N: int, dislikes: \nList[List[int]]) -> bool:","lang":"Python3"},{"s":"bool possibleBipartition(int N, int** dislikes, int \ndislikesSize, int* dislikesColSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public bool PossibleBipartition(int N, int[][] \ndislikes) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} N\n * @param {number[][]} dislikes\n * @return {boolean}\n */\nvar possibleBipartition = function(N, dislikes) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer} n\n# @param {Integer[][]} dislikes\n# @return {Boolean}\ndef possible_bipartition(n, dislikes)\n \nend","lang":"Ruby"},{"s":"# @param {Integer} n\n# @param {Integer[][]} dislikes\n# @return {Boolean}\ndef possible_bipartition(n, dislikes)\n \nend","lang":"Ruby"}],"page":"886/1581","h":"886. 可能的二分法","d":"<div class=\"notranslate\"><p>给定一组&nbsp;<code>N</code>&nbsp;人（编号为&nbsp;<code>1, 2, ..., N</code>），&nbsp;我们想把每个人分进<strong>任意</strong>大小的两组。</p>\n\n<p>每个人都可能不喜欢其他人，那么他们不应该属于同一组。</p>\n\n<p>形式上，如果 <code>dislikes[i] = [a, b]</code>，表示不允许将编号为 <code>a</code> 和 <code>b</code> 的人归入同一组。</p>\n\n<p>当可以用这种方法将每个人分进两组时，返回 <code>true</code>；否则返回 <code>false</code>。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>N = 4, dislikes = [[1,2],[1,3],[2,4]]\n<strong>输出：</strong>true\n<strong>解释：</strong>group1 [1,4], group2 [2,3]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>N = 3, dislikes = [[1,2],[1,3],[2,3]]\n<strong>输出：</strong>false\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>N = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]\n<strong>输出：</strong>false\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 2000</code></li>\n\t<li><code>0 &lt;= dislikes.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= dislikes[i][j] &lt;= N</code></li>\n\t<li><code>dislikes[i][0] &lt; dislikes[i][1]</code></li>\n\t<li>对于&nbsp;<code>dislikes[i] == dislikes[j]</code>&nbsp;不存在&nbsp;<code>i != j</code>&nbsp;</li>\n</ol>\n</div>","l":"中等","s":"","lang":"PHP","href":"https://leetcode-cn.com/problems/possible-bipartition/","bb":{"x":445,"y":40,"w":116,"h":28}}

