{"ls":[{"s":"# @param {Integer[][]} grid\n# @return {Integer}\ndef min_path_sum(grid)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func minPathSum(_ grid: [[Int]]) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func minPathSum(grid [][]int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def minPathSum(grid: Array[Array[Int]]): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun minPathSum(grid: Array<IntArray>): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn min_path_sum(grid: Vec<Vec<i32>>) -> i32 \n{\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int minPathSum(int[][] grid) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def minPathSum(self, grid: List[List[int]]) -> \nint:","lang":"Python3"},{"s":"int minPathSum(int** grid, int gridSize, int* \ngridColSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int MinPathSum(int[][] grid) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minPathSum = function(grid) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[][]} grid\n# @return {Integer}\ndef min_path_sum(grid)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[][]} grid\n# @return {Integer}\ndef min_path_sum(grid)\n \nend","lang":"Ruby"}],"page":"64/1581","h":"64. 最小路径和","d":"<div class=\"notranslate\"><p>给定一个包含非负整数的 <em>m</em>&nbsp;x&nbsp;<em>n</em>&nbsp;网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p>\n\n<p><strong>说明：</strong>每次只能向下或者向右移动一步。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>\n[\n&nbsp; [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\n<strong>输出:</strong> 7\n<strong>解释:</strong> 因为路径 1→3→1→1→1 的总和最小。\n</pre>\n</div>","l":"中等","s":"class Solution {","lang":"PHP","href":"https://leetcode-cn.com/problems/minimum-path-sum/","bb":{"x":445,"y":40,"w":116,"h":28}}

