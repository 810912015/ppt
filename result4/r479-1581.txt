{"ls":[{"s":"class Solution {\n    public int largestPalindrome(int n) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def largestPalindrome(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def largestPalindrome(self, n: int) -> int:","lang":"Python3"},{"s":"int largestPalindrome(int n){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int LargestPalindrome(int n) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} n\n * @return {number}\n */\nvar largestPalindrome = function(n) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer} n\n# @return {Integer}\ndef largest_palindrome(n)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func largestPalindrome(_ n: Int) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func largestPalindrome(n int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def largestPalindrome(n: Int): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun largestPalindrome(n: Int): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn largest_palindrome(n: i32) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function largestPalindrome($n) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function largestPalindrome($n) {\n        \n    }\n}","lang":"PHP"}],"page":"479/1581","h":"479. 最大回文数乘积","d":"<div class=\"notranslate\"><p>你需要找到由两个 n 位数的乘积组成的最大回文数。</p>\n\n<p>由于结果会很大，你只需返回最大回文数 mod 1337得到的结果。</p>\n\n<p><strong>示例:</strong></p>\n\n<p>输入: 2</p>\n\n<p>输出: 987</p>\n\n<p>解释: 99 x 91 = 9009, 9009 % 1337 = 987</p>\n\n<p><strong>说明:</strong></p>\n\n<p>n 的取值范围为&nbsp;[1,8]。</p>\n</div>","l":"困难","s":"# @param {Integer} n","lang":"Ruby","href":"https://leetcode-cn.com/problems/largest-palindrome-product/","bb":{"x":445,"y":40,"w":116,"h":28}}

