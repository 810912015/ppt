{"ls":[{"s":"class Solution {\n    public int numRescueBoats(int[] people, int \nlimit) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def numRescueBoats(self, people, limit):\n        \"\"\"\n        :type people: List[int]\n        :type limit: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def numRescueBoats(self, people: List[int], \nlimit: int) -> int:","lang":"Python3"},{"s":"int numRescueBoats(int* people, int peopleSize, int \nlimit){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int NumRescueBoats(int[] people, int \nlimit) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} people\n * @param {number} limit\n * @return {number}\n */\nvar numRescueBoats = function(people, limit) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} people\n# @param {Integer} limit\n# @return {Integer}\ndef num_rescue_boats(people, limit)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func numRescueBoats(_ people: [Int], _ limit: \nInt) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"class Solution {\n    func numRescueBoats(_ people: [Int], _ limit: \nInt) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"object Solution {\n    def numRescueBoats(people: Array[Int], limit: \nInt): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun numRescueBoats(people: IntArray, limit: Int)\n: Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn num_rescue_boats(people: Vec<i32>, \nlimit: i32) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $people\n     * @param Integer $limit\n     * @return Integer\n     */\n    function numRescueBoats($people, $limit) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $people\n     * @param Integer $limit\n     * @return Integer\n     */\n    function numRescueBoats($people, $limit) {\n        \n    }\n}","lang":"PHP"}],"page":"881/1581","h":"881. 救生艇","d":"<div class=\"notranslate\"><p>第&nbsp;<code>i</code>&nbsp;个人的体重为&nbsp;<code>people[i]</code>，每艘船可以承载的最大重量为&nbsp;<code>limit</code>。</p>\n\n<p>每艘船最多可同时载两人，但条件是这些人的重量之和最多为&nbsp;<code>limit</code>。</p>\n\n<p>返回载到每一个人所需的最小船数。(保证每个人都能被船载)。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>people = [1,2], limit = 3\n<strong>输出：</strong>1\n<strong>解释：</strong>1 艘船载 (1, 2)\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>people = [3,2,2,1], limit = 3\n<strong>输出：</strong>3\n<strong>解释：</strong>3 艘船分别载 (1, 2), (2) 和 (3)\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>people = [3,5,3,4], limit = 5\n<strong>输出：</strong>4\n<strong>解释：</strong>4 艘船分别载 (3), (3), (4), (5)</pre>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;people.length &lt;= 50000</code></li>\n\t<li><code>1 &lt;= people[i] &lt;=&nbsp;limit &lt;= 30000</code></li>\n</ul>\n</div>","l":"中等","s":"# @param {Integer[]} people","lang":"Ruby","href":"https://leetcode-cn.com/problems/boats-to-save-people/","bb":{"x":445,"y":40,"w":116,"h":28}}

