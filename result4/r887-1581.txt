{"ls":[{"s":"class Solution {\n    public int superEggDrop(int K, int N) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def superEggDrop(self, K, N):\n        \"\"\"\n        :type K: int\n        :type N: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def superEggDrop(self, K: int, N: int) -> int:","lang":"Python3"},{"s":"int superEggDrop(int K, int N){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int SuperEggDrop(int K, int N) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} K\n * @param {number} N\n * @return {number}\n */\nvar superEggDrop = function(K, N) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer} k\n# @param {Integer} n\n# @return {Integer}\ndef super_egg_drop(k, n)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func superEggDrop(_ K: Int, _ N: Int) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func superEggDrop(K int, N int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def superEggDrop(K: Int, N: Int): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun superEggDrop(K: Int, N: Int): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn super_egg_drop(k: i32, n: i32) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer $K\n     * @param Integer $N\n     * @return Integer\n     */\n    function superEggDrop($K, $N) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer $K\n     * @param Integer $N\n     * @return Integer\n     */\n    function superEggDrop($K, $N) {\n        \n    }\n}","lang":"PHP"}],"page":"887/1581","h":"887. 鸡蛋掉落","d":"<div class=\"notranslate\"><p>你将获得&nbsp;<code>K</code>&nbsp;个鸡蛋，并可以使用一栋从&nbsp;<code>1</code>&nbsp;到&nbsp;<code>N</code>&nbsp;&nbsp;共有 <code>N</code>&nbsp;层楼的建筑。</p>\n\n<p>每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。</p>\n\n<p>你知道存在楼层&nbsp;<code>F</code> ，满足&nbsp;<code>0 &lt;= F &lt;= N</code> 任何从高于 <code>F</code>&nbsp;的楼层落下的鸡蛋都会碎，从&nbsp;<code>F</code>&nbsp;楼层或比它低的楼层落下的鸡蛋都不会破。</p>\n\n<p>每次<em>移动</em>，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层&nbsp;<code>X</code>&nbsp;扔下（满足&nbsp;<code>1 &lt;= X &lt;= N</code>）。</p>\n\n<p>你的目标是<strong>确切地</strong>知道 <code>F</code> 的值是多少。</p>\n\n<p>无论 <code>F</code> 的初始值如何，你确定 <code>F</code> 的值的最小移动次数是多少？</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>K = 1, N = 2\n<strong>输出：</strong>2\n<strong>解释：</strong>\n鸡蛋从 1 楼掉落。如果它碎了，我们肯定知道 F = 0 。\n否则，鸡蛋从 2 楼掉落。如果它碎了，我们肯定知道 F = 1 。\n如果它没碎，那么我们肯定知道 F = 2 。\n因此，在最坏的情况下我们需要移动 2 次以确定 F 是多少。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>K = 2, N = 6\n<strong>输出：</strong>3\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>K = 3, N = 14\n<strong>输出：</strong>4\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= K &lt;= 100</code></li>\n\t<li><code>1 &lt;= N &lt;= 10000</code></li>\n</ol>\n</div>","l":"困难","s":"# @param {Integer} k","lang":"Ruby","href":"https://leetcode-cn.com/problems/super-egg-drop/","bb":{"x":445,"y":40,"w":116,"h":28}}

