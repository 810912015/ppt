{"ls":[{"s":"class Solution {\n    public int numTilings(int N) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def numTilings(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def numTilings(self, N: int) -> int:","lang":"Python3"},{"s":"int numTilings(int N){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int NumTilings(int N) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} N\n * @return {number}\n */\nvar numTilings = function(N) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer} n\n# @return {Integer}\ndef num_tilings(n)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func numTilings(_ N: Int) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func numTilings(N int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def numTilings(N: Int): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun numTilings(N: Int): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn num_tilings(n: i32) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer $N\n     * @return Integer\n     */\n    function numTilings($N) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer $N\n     * @return Integer\n     */\n    function numTilings($N) {\n        \n    }\n}","lang":"PHP"}],"page":"790/1581","h":"790. 多米诺和托米诺平铺","d":"<div class=\"notranslate\"><p>有两种形状的瓷砖：一种是&nbsp;2x1 的多米诺形，另一种是形如&nbsp;\"L\" 的托米诺形。两种形状都可以旋转。</p>\n\n<pre>XX  &lt;- 多米诺\n\nXX  &lt;- \"L\" 托米诺\nX\n</pre>\n\n<p>给定&nbsp;N 的值，有多少种方法可以平铺&nbsp;2 x N 的面板？<strong>返回值 mod 10^9 + 7</strong>。</p>\n\n<p>（平铺指的是每个正方形都必须有瓷砖覆盖。两个平铺不同，当且仅当面板上有四个方向上的相邻单元中的两个，使得恰好有一个平铺有一个瓷砖占据两个正方形。）</p>\n\n<pre><strong>示例:</strong>\n<strong>输入:</strong> 3\n<strong>输出:</strong> 5\n<strong>解释:</strong> \n下面列出了五种不同的方法，不同字母代表不同瓷砖：\nXYZ XXZ XYY XXY XYY\nXYZ YYZ XZZ XYY XXY</pre>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>N&nbsp; 的范围是&nbsp;<code>[1, 1000]</code></li>\n</ul>\n\n<p>&nbsp;</p>\n</div>","l":"中等","s":"# @param {Integer} n\n# @return {Integer}\ndef num_tilings(n)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/domino-and-tromino-tiling/","bb":{"x":445,"y":40,"w":116,"h":28}}

