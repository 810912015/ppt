{"ls":[{"s":"# @param {Integer[][]} m\n# @return {Integer}\ndef find_circle_num(m)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func findCircleNum(_ M: [[Int]]) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func findCircleNum(M [][]int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def findCircleNum(M: Array[Array[Int]]): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun findCircleNum(M: Array<IntArray>): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn find_circle_num(m: Vec<Vec<i32>>) -> i32 \n{\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int findCircleNum(int[][] M) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def findCircleNum(self, M):\n        \"\"\"\n        :type M: List[List[int]]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def findCircleNum(self, M: List[List[int]]) -> \nint:","lang":"Python3"},{"s":"int findCircleNum(int** M, int MSize, int* MColSize)\n{\n \n}","lang":"C"},{"s":"public class Solution {\n    public int FindCircleNum(int[][] M) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} M\n * @return {number}\n */\nvar findCircleNum = function(M) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[][]} m\n# @return {Integer}\ndef find_circle_num(m)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[][]} m\n# @return {Integer}\ndef find_circle_num(m)\n \nend","lang":"Ruby"}],"page":"547/1581","h":"547. 朋友圈","d":"<div class=\"notranslate\"><p>班上有&nbsp;<strong>N&nbsp;</strong>名学生。其中有些人是朋友，有些则不是。他们的友谊具有是传递性。如果已知 A 是 B&nbsp;的朋友，B 是 C&nbsp;的朋友，那么我们可以认为 A 也是 C&nbsp;的朋友。所谓的朋友圈，是指所有朋友的集合。</p>\n\n<p>给定一个&nbsp;<strong>N * N&nbsp;</strong>的矩阵&nbsp;<strong>M</strong>，表示班级中学生之间的朋友关系。如果M[i][j] = 1，表示已知第 i 个和 j 个学生<strong>互为</strong>朋友关系，否则为不知道。你必须输出所有学生中的已知的朋友圈总数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> \n[[1,1,0],\n [1,1,0],\n [0,0,1]]\n<strong>输出:</strong> 2 \n<strong>说明：</strong>已知学生0和学生1互为朋友，他们在一个朋友圈。\n第2个学生自己在一个朋友圈。所以返回2。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> \n[[1,1,0],\n [1,1,1],\n [0,1,1]]\n<strong>输出:</strong> 1\n<strong>说明：</strong>已知学生0和学生1互为朋友，学生1和学生2互为朋友，所以学生0和学生2也是朋友，所以他们三个在一个朋友圈，返回1。\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li>N 在[1,200]的范围内。</li>\n\t<li>对于所有学生，有M[i][i] = 1。</li>\n\t<li>如果有M[i][j] = 1，则有M[j][i] = 1。</li>\n</ol>\n</div>","l":"中等","s":"class Solution {\n \n    /**\n     * @param Integer[][] $M\n     * @return Integer\n     */\n    function findCircleNum($M) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/friend-circles/","bb":{"x":445,"y":40,"w":116,"h":28}}

