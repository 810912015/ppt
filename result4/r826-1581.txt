{"ls":[{"s":"class Solution {\n    public int maxProfitAssignment(int[] difficulty,\n int[] profit, int[] worker) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def maxProfitAssignment(self, difficulty, \nprofit, worker):\n        \"\"\"\n        :type difficulty: List[int]\n        :type profit: List[int]\n        :type worker: List[int]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def maxProfitAssignment(self, difficulty: List\n[int], profit: List[int], worker: List[int]) -> int:","lang":"Python3"},{"s":"int maxProfitAssignment(int* difficulty, int \ndifficultySize, int* profit, int profitSize, int* \nworker, int workerSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int MaxProfitAssignment(int[] difficulty,\n int[] profit, int[] worker) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} difficulty\n * @param {number[]} profit\n * @param {number[]} worker\n * @return {number}\n */\nvar maxProfitAssignment = function(difficulty, \nprofit, worker) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} difficulty\n# @param {Integer[]} profit\n# @param {Integer[]} worker\n# @return {Integer}\ndef max_profit_assignment(difficulty, profit, \nworker)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func maxProfitAssignment(_ difficulty: [Int], _ \nprofit: [Int], _ worker: [Int]) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func maxProfitAssignment(difficulty []int, profit []\nint, worker []int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def maxProfitAssignment(difficulty: Array[Int], \nprofit: Array[Int], worker: Array[Int]): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun maxProfitAssignment(difficulty: IntArray, \nprofit: IntArray, worker: IntArray): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn max_profit_assignment(difficulty: \nVec<i32>, profit: Vec<i32>, worker: Vec<i32>) -> \ni32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $difficulty\n     * @param Integer[] $profit\n     * @param Integer[] $worker\n     * @return Integer\n     */\n    function maxProfitAssignment($difficulty, \n$profit, $worker) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $difficulty\n     * @param Integer[] $profit\n     * @param Integer[] $worker\n     * @return Integer\n     */\n    function maxProfitAssignment($difficulty, \n$profit, $worker) {\n        \n    }\n}","lang":"PHP"}],"page":"826/1581","h":"826. 安排工作以达到最大收益","d":"<div class=\"notranslate\"><p>有一些工作：<code>difficulty[i]&nbsp;</code>表示第<code>i</code>个工作的难度，<code>profit[i]</code>表示第<code>i</code>个工作的收益。</p>\n\n<p>现在我们有一些工人。<code>worker[i]</code>是第<code>i</code>个工人的能力，即该工人只能完成难度小于等于<code>worker[i]</code>的工作。</p>\n\n<p>每一个工人都最多只能安排一个工作，但是一个工作可以完成多次。</p>\n\n<p>举个例子，如果3个工人都尝试完成一份报酬为1的同样工作，那么总收益为 $3。如果一个工人不能完成任何工作，他的收益为 $0 。</p>\n\n<p>我们能得到的最大收益是多少？</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入: </strong>difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]\n<strong>输出: </strong>100 \n<strong>解释: </strong>工人被分配的工作难度是 [4,4,6,6] ，分别获得 [20,20,30,30] 的收益。</pre>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= difficulty.length = profit.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= worker.length &lt;= 10000</code></li>\n\t<li><code>difficulty[i], profit[i], worker[i]</code>&nbsp; 的范围是&nbsp;<code>[1, 10^5]</code></li>\n</ul>\n</div>","l":"中等","s":"","lang":"Ruby","href":"https://leetcode-cn.com/problems/most-profit-assigning-work/","bb":{"x":445,"y":40,"w":116,"h":28}}

