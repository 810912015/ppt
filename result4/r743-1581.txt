{"ls":[{"s":"class Solution {\n    public int networkDelayTime(int[][] times, int \nN, int K) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def networkDelayTime(self, times, N, K):\n        \"\"\"\n        :type times: List[List[int]]\n        :type N: int\n        :type K: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def networkDelayTime(self, times: List[List[int]\n], N: int, K: int) -> int:","lang":"Python3"},{"s":"int networkDelayTime(int** times, int timesSize, \nint* timesColSize, int N, int K){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int NetworkDelayTime(int[][] times, int \nN, int K) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} times\n * @param {number} N\n * @param {number} K\n * @return {number}\n */\nvar networkDelayTime = function(times, N, K) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[][]} times\n# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef network_delay_time(times, n, k)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func networkDelayTime(_ times: [[Int]], _ N: \nInt, _ K: Int) -> Int {\n \n    }\n}","lang":"Swift"},{"s":"func networkDelayTime(times [][]int, N int, K int) \nint {\n \n}","lang":"Go"},{"s":"object Solution {\n    def networkDelayTime(times: Array[Array[Int]], \nN: Int, K: Int): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun networkDelayTime(times: Array<IntArray>, N: \nInt, K: Int): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn network_delay_time(times: Vec<Vec<i32>>, \nn: i32, k: i32) -> i32 {\n \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[][] $times\n     * @param Integer $N\n     * @param Integer $K\n     * @return Integer\n     */\n    function networkDelayTime($times, $N, $K) {\n \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[][] $times\n     * @param Integer $N\n     * @param Integer $K\n     * @return Integer\n     */\n    function networkDelayTime($times, $N, $K) {\n \n    }\n}","lang":"PHP"}],"page":"743/1581","h":"743. 网络延迟时间","d":"<div class=\"notranslate\"><p>有&nbsp;<code>N</code>&nbsp;个网络节点，标记为&nbsp;<code>1</code>&nbsp;到&nbsp;<code>N</code>。</p>\n\n<p>给定一个列表&nbsp;<code>times</code>，表示信号经过<strong>有向</strong>边的传递时间。&nbsp;<code>times[i] = (u, v, w)</code>，其中&nbsp;<code>u</code>&nbsp;是源节点，<code>v</code>&nbsp;是目标节点， <code>w</code>&nbsp;是一个信号从源节点传递到目标节点的时间。</p>\n\n<p>现在，我们从某个节点&nbsp;<code>K</code>&nbsp;发出一个信号。需要多久才能使所有节点都收到信号？如果不能使所有节点收到信号，返回&nbsp;<code>-1</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<p><img style=\"height: 220px; width: 200px;\" src=\"https://assets.leetcode.com/uploads/2019/05/23/931_example_1.png\" alt=\"\"></p>\n\n<pre><strong>输入：</strong>times = [[2,1,1],[2,3,1],[3,4,1]], N = 4, K = 2\n<strong>输出：</strong>2\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li><code>N</code>&nbsp;的范围在&nbsp;<code>[1, 100]</code>&nbsp;之间。</li>\n\t<li><code>K</code>&nbsp;的范围在&nbsp;<code>[1, N]</code>&nbsp;之间。</li>\n\t<li><code>times</code>&nbsp;的长度在&nbsp;<code>[1, 6000]</code>&nbsp;之间。</li>\n\t<li>所有的边&nbsp;<code>times[i] = (u, v, w)</code>&nbsp;都有&nbsp;<code>1 &lt;= u, v &lt;= N</code>&nbsp;且&nbsp;<code>0 &lt;= w &lt;= 100</code>。</li>\n</ol>\n</div>","l":"中等","s":"# @param {Integer[][]} times\n# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef network_delay_time(times, n, k)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/network-delay-time/","bb":{"x":445,"y":40,"w":116,"h":28}}

