{"ls":[{"s":"# @param {Integer[]} nums\n# @param {Integer} lower\n# @param {Integer} upper\n# @return {Integer}\ndef count_range_sum(nums, lower, upper)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func countRangeSum(_ nums: [Int], _ lower: Int, \n_ upper: Int) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func countRangeSum(nums []int, lower int, upper int)\n int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def countRangeSum(nums: Array[Int], lower: Int, \nupper: Int): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun countRangeSum(nums: IntArray, lower: Int, \nupper: Int): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn count_range_sum(nums: Vec<i32>, lower: \ni32, upper: i32) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int countRangeSum(int[] nums, int lower, \nint upper) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def countRangeSum(self, nums: List[int], lower: \nint, upper: int) -> int:","lang":"Python3"},{"s":"int countRangeSum(int* nums, int numsSize, int \nlower, int upper){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int CountRangeSum(int[] nums, int lower, \nint upper) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @param {number} lower\n * @param {number} upper\n * @return {number}\n */\nvar countRangeSum = function(nums, lower, upper) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums\n# @param {Integer} lower\n# @param {Integer} upper\n# @return {Integer}\ndef count_range_sum(nums, lower, upper)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[]} nums\n# @param {Integer} lower\n# @param {Integer} upper\n# @return {Integer}\ndef count_range_sum(nums, lower, upper)\n \nend","lang":"Ruby"}],"page":"327/1581","h":"327. 区间和的个数","d":"<div class=\"notranslate\"><p>给定一个整数数组&nbsp;<code>nums</code>，返回区间和在&nbsp;<code>[lower, upper]</code>&nbsp;之间的个数，包含&nbsp;<code>lower</code>&nbsp;和&nbsp;<code>upper</code>。<br>\n区间和&nbsp;<code>S(i, j)</code>&nbsp;表示在&nbsp;<code>nums</code>&nbsp;中，位置从&nbsp;<code>i</code>&nbsp;到&nbsp;<code>j</code>&nbsp;的元素之和，包含&nbsp;<code>i</code>&nbsp;和&nbsp;<code>j</code>&nbsp;(<code>i</code> ≤ <code>j</code>)。</p>\n\n<p><strong>说明:</strong><br>\n最直观的算法复杂度是&nbsp;<em>O</em>(<em>n</em><sup>2</sup>) ，请在此基础上优化你的算法。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入: </strong><em>nums</em> = <code>[-2,5,-1]</code>, <em>lower</em> = <code>-2</code>, <em>upper</em> = <code>2</code>,\n<strong>输出: </strong>3 \n<strong>解释: </strong>3个区间分别是: <code>[0,0]</code>, <code>[2,2]</code>, <code>[0,2]，</code>它们表示的和分别为: <code>-2, -1, 2。</code>\n</pre>\n</div>","l":"困难","s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @param Integer $lower\n     * @param Integer $upper\n     * @return Integer\n     */\n    function countRangeSum($nums, $lower, $upper) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/count-of-range-sum/","bb":{"x":445,"y":40,"w":116,"h":28}}

