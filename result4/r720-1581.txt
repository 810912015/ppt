{"ls":[{"s":"class Solution {\n    public String longestWord(String[] words) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def longestWord(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: str\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def longestWord(self, words: List[str]) -> str:","lang":"Python3"},{"s":"char * longestWord(char ** words, int wordsSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public string LongestWord(string[] words) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string[]} words\n * @return {string}\n */\nvar longestWord = function(words) {\n \n};","lang":"JavaScript"},{"s":"# @param {String[]} words\n# @return {String}\ndef longest_word(words)\n \nend","lang":"Ruby"},{"s":"# @param {String[]} words\n# @return {String}\ndef longest_word(words)\n \nend","lang":"Ruby"},{"s":"func longestWord(words []string) string {\n \n}","lang":"Go"},{"s":"object Solution {\n    def longestWord(words: Array[String]): String = \n{\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun longestWord(words: Array<String>): String {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn longest_word(words: Vec<String>) -> \nString {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param String[] $words\n     * @return String\n     */\n    function longestWord($words) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param String[] $words\n     * @return String\n     */\n    function longestWord($words) {\n        \n    }\n}","lang":"PHP"}],"page":"720/1581","h":"720. 词典中最长的单词","d":"<div class=\"notranslate\"><p>给出一个字符串数组<code>words</code>组成的一本英语词典。从中找出最长的一个单词，该单词是由<code>words</code>词典中其他单词逐步添加一个字母组成。若其中有多个可行的答案，则返回答案中字典序最小的单词。</p>\n\n<p>若无答案，则返回空字符串。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> \nwords = [\"w\",\"wo\",\"wor\",\"worl\", \"world\"]\n<strong>输出:</strong> \"world\"\n<strong>解释:</strong> \n单词\"world\"可由\"w\", \"wo\", \"wor\", 和 \"worl\"添加一个字母组成。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> \nwords = [\"a\", \"banana\", \"app\", \"appl\", \"ap\", \"apply\", \"apple\"]\n<strong>输出:</strong> \"apple\"\n<strong>解释:</strong> \n\"apply\"和\"apple\"都能由词典中的单词组成。但是\"apple\"得字典序小于\"apply\"。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li>所有输入的字符串都只包含小写字母。</li>\n\t<li><code>words</code>数组长度范围为<code>[1,1000]</code>。</li>\n\t<li><code>words[i]</code>的长度范围为<code>[1,30]</code>。</li>\n</ul>\n</div>","l":"简单","s":"# @param {String[]} words\n# @return {String}\ndef longest_word(words)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/longest-word-in-dictionary/","bb":{"x":445,"y":40,"w":116,"h":28}}

