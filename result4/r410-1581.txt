{"ls":[{"s":"class Solution {\n    public int splitArray(int[] nums, int m) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def splitArray(self, nums, m):\n        \"\"\"\n        :type nums: List[int]\n        :type m: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def splitArray(self, nums: List[int], m: int) \n-> int:","lang":"Python3"},{"s":"int splitArray(int* nums, int numsSize, int m){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int SplitArray(int[] nums, int m) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @param {number} m\n * @return {number}\n */\nvar splitArray = function(nums, m) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums\n# @param {Integer} m\n# @return {Integer}\ndef split_array(nums, m)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func splitArray(_ nums: [Int], _ m: Int) -> Int \n{\n        \n    }\n}","lang":"Swift"},{"s":"func splitArray(nums []int, m int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def splitArray(nums: Array[Int], m: Int): Int = \n{\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun splitArray(nums: IntArray, m: Int): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn split_array(nums: Vec<i32>, m: i32) -> \ni32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @param Integer $m\n     * @return Integer\n     */\n    function splitArray($nums, $m) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @param Integer $m\n     * @return Integer\n     */\n    function splitArray($nums, $m) {\n        \n    }\n}","lang":"PHP"}],"page":"410/1581","h":"410. 分割数组的最大值","d":"<div class=\"notranslate\"><p>给定一个非负整数数组和一个整数&nbsp;<em>m</em>，你需要将这个数组分成&nbsp;<em>m&nbsp;</em>个非空的连续子数组。设计一个算法使得这&nbsp;<em>m&nbsp;</em>个子数组各自和的最大值最小。</p>\n\n<p><strong>注意:</strong><br>\n数组长度&nbsp;<em>n&nbsp;</em>满足以下条件:</p>\n\n<ul>\n\t<li>1 ≤ <em>n</em> ≤ 1000</li>\n\t<li>1 ≤ <em>m</em> ≤ min(50, <em>n</em>)</li>\n</ul>\n\n<p><strong>示例: </strong></p>\n\n<pre>输入:\n<strong>nums</strong> = [7,2,5,10,8]\n<strong>m</strong> = 2\n\n输出:\n18\n\n解释:\n一共有四种方法将<strong>nums</strong>分割为2个子数组。\n其中最好的方式是将其分为<strong>[7,2,5]</strong> 和 <strong>[10,8]</strong>，\n因为此时这两个子数组各自的和的最大值为18，在所有情况中最小。\n</pre>\n</div>","l":"困难","s":"# @param {Integer[]} nums\n# @param {Integer} m\n# @return {Integer}\ndef split_array(nums, m)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/split-array-largest-sum/","bb":{"x":445,"y":40,"w":116,"h":28}}

