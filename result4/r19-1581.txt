{"ls":[{"s":"# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val)\n#         @val = val\n#         @next = nil\n#     end\n# end\n \n# @param {ListNode} head\n# @param {Integer} n\n# @return {ListNode}\ndef remove_nth_from_end(head, n)\n \nend","lang":"Ruby"},{"s":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func removeNthFromEnd(_ head: ListNode?, _ n: \nInt) -> ListNode? {\n        \n    }\n}","lang":"Swift"},{"s":"/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc removeNthFromEnd(head *ListNode, n int) \n*ListNode {\n \n}","lang":"Go"},{"s":"/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def removeNthFromEnd(head: ListNode, n: Int): \nListNode = {\n \n    }\n}","lang":"Scala"},{"s":"/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun removeNthFromEnd(head: ListNode?, n: Int): \nListNode? {\n \n    }\n}","lang":"Kotlin"},{"s":"// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn remove_nth_from_end(head: \nOption<Box<ListNode>>, n: i32) -> \nOption<Box<ListNode>> {\n        \n    }\n}","lang":"Rust"},{"s":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, \nint n) {\n \n    }\n}","lang":"Java"},{"s":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n \nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"","lang":"Python"},{"s":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n \nclass Solution:\n    def removeNthFromEnd(self, head: ListNode, n: \nint) -> ListNode:","lang":"Python3"},{"s":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n \n \nstruct ListNode* removeNthFromEnd(struct ListNode* \nhead, int n){\n \n}","lang":"C"},{"s":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public ListNode RemoveNthFromEnd(ListNode head, \nint n) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */\nvar removeNthFromEnd = function(head, n) {\n \n};","lang":"JavaScript"},{"s":"# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val)\n#         @val = val\n#         @next = nil\n#     end\n# end\n \n# @param {ListNode} head\n# @param {Integer} n\n# @return {ListNode}\ndef remove_nth_from_end(head, n)\n \nend","lang":"Ruby"},{"s":"# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val)\n#         @val = val\n#         @next = nil\n#     end\n# end\n \n# @param {ListNode} head\n# @param {Integer} n\n# @return {ListNode}\ndef remove_nth_from_end(head, n)\n \nend","lang":"Ruby"}],"page":"19/1581","h":"19. 删除链表的倒数第N个节点","d":"<div class=\"notranslate\"><p>给定一个链表，删除链表的倒数第&nbsp;<em>n&nbsp;</em>个节点，并且返回链表的头结点。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>给定一个链表: <strong>1-&gt;2-&gt;3-&gt;4-&gt;5</strong>, 和 <strong><em>n</em> = 2</strong>.\n\n当删除了倒数第二个节点后，链表变为 <strong>1-&gt;2-&gt;3-&gt;5</strong>.\n</pre>\n\n<p><strong>说明：</strong></p>\n\n<p>给定的 <em>n</em>&nbsp;保证是有效的。</p>\n\n<p><strong>进阶：</strong></p>\n\n<p>你能尝试使用一趟扫描实现吗？</p>\n</div>","l":"中等","s":"/**","lang":"PHP","href":"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/","bb":{"x":445,"y":40,"w":116,"h":28}}

