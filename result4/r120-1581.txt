{"ls":[{"s":"# @param {Integer[][]} triangle\n# @return {Integer}\ndef minimum_total(triangle)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func minimumTotal(_ triangle: [[Int]]) -> Int {\n \n    }\n}","lang":"Swift"},{"s":"func minimumTotal(triangle [][]int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def minimumTotal(triangle: List[List[Int]]): \nInt = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun minimumTotal(triangle: List<List<Int>>): \nInt {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn minimum_total(triangle: Vec<Vec<i32>>) \n-> i32 {\n \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int minimumTotal(List<List<Integer>> \ntriangle) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def minimumTotal(self, triangle: List[List[int]]\n) -> int:","lang":"Python3"},{"s":"int minimumTotal(int** triangle, int triangleSize, \nint* triangleColSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int MinimumTotal(IList<IList<int>> \ntriangle) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} triangle\n * @return {number}\n */\nvar minimumTotal = function(triangle) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[][]} triangle\n# @return {Integer}\ndef minimum_total(triangle)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[][]} triangle\n# @return {Integer}\ndef minimum_total(triangle)\n \nend","lang":"Ruby"}],"page":"120/1581","h":"120. 三角形最小路径和","d":"<div class=\"notranslate\"><p>给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。</p>\n\n<p>例如，给定三角形：</p>\n\n<pre>[\n     [<strong>2</strong>],\n    [<strong>3</strong>,4],\n   [6,<strong>5</strong>,7],\n  [4,<strong>1</strong>,8,3]\n]\n</pre>\n\n<p>自顶向下的最小路径和为&nbsp;<code>11</code>（即，<strong>2&nbsp;</strong>+&nbsp;<strong>3</strong>&nbsp;+&nbsp;<strong>5&nbsp;</strong>+&nbsp;<strong>1</strong>&nbsp;= 11）。</p>\n\n<p><strong>说明：</strong></p>\n\n<p>如果你可以只使用 <em>O</em>(<em>n</em>)&nbsp;的额外空间（<em>n</em> 为三角形的总行数）来解决这个问题，那么你的算法会很加分。</p>\n</div>","l":"中等","s":"class Solution {","lang":"PHP","href":"https://leetcode-cn.com/problems/triangle/","bb":{"x":445,"y":40,"w":116,"h":28}}

