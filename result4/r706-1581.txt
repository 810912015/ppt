{"ls":[{"s":"class MyHashMap {\n \n    /** Initialize your data structure here. */\n    public MyHashMap() {\n \n    }\n    \n    /** value will always be non-negative. */\n    public void put(int key, int value) {\n \n    }\n    \n    /** Returns the value to which the specified \nkey is mapped, or -1 if this map contains no \nmapping for the key */\n    public int get(int key) {\n \n    }\n    \n    /** Removes the mapping of the specified value \nkey if this map contains a mapping for the key */\n    public void remove(int key) {\n \n    }\n}\n ","lang":"Java"},{"s":"class MyHashMap(object):\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n \n    def put(self, key, value):\n        \"\"\"\n        value will always be non-negative.\n        :type key: int\n        :type value: int\n        :rtype: None\n        \"\"\"\n        \n \n    def get(self, key):\n        \"\"\"\n        Returns the value to which the specified \nkey is mapped, or -1 if this map contains no \nmapping for the key\n        :type key: int\n        :rtype: int\n        \"\"\"\n        ","lang":"Python"},{"s":"class MyHashMap:\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n \n    def put(self, key: int, value: int) -> None:\n        \"\"\"\n        value will always be non-negative.\n        \"\"\"\n        \n \n    def get(self, key: int) -> int:\n        \"\"\"\n        Returns the value to which the specified \nkey is mapped, or -1 if this map contains no \nmapping for the key\n        \"\"\"\n        \n \n    def remove(self, key: int) -> None:\n        \"\"\"\n        Removes the mapping of the specified value \nkey if this map contains a mapping for the key","lang":"Python3"},{"s":"typedef struct {\n    \n} MyHashMap;\n \n/** Initialize your data structure here. */\n \nMyHashMap* myHashMapCreate() {\n    \n}\n \n/** value will always be non-negative. */\nvoid myHashMapPut(MyHashMap* obj, int key, int \nvalue) {\n  \n}\n \n/** Returns the value to which the specified key is \nmapped, or -1 if this map contains no mapping for \nthe key */\nint myHashMapGet(MyHashMap* obj, int key) {\n  \n}\n \n/** Removes the mapping of the specified value key \nif this map contains a mapping for the key */\nvoid myHashMapRemove(MyHashMap* obj, int key) {","lang":"C"},{"s":"public class MyHashMap {\n \n    /** Initialize your data structure here. */\n    public MyHashMap() {\n \n    }\n    \n    /** value will always be non-negative. */\n    public void Put(int key, int value) {\n \n    }\n    \n    /** Returns the value to which the specified \nkey is mapped, or -1 if this map contains no \nmapping for the key */\n    public int Get(int key) {\n \n    }\n    \n    /** Removes the mapping of the specified value \nkey if this map contains a mapping for the key */\n    public void Remove(int key) {\n \n    }\n}\n ","lang":"C#"},{"s":"/**\n * Initialize your data structure here.\n */\nvar MyHashMap = function() {\n \n};\n \n/**\n * value will always be non-negative. \n * @param {number} key \n * @param {number} value\n * @return {void}\n */\nMyHashMap.prototype.put = function(key, value) {\n \n};\n \n/**\n * Returns the value to which the specified key is \nmapped, or -1 if this map contains no mapping for \nthe key \n * @param {number} key\n * @return {number}\n */\nMyHashMap.prototype.get = function(key) {\n ","lang":"JavaScript"},{"s":"class MyHashMap\n \n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n \n    end\n \n \n=begin\n    value will always be non-negative.\n    :type key: Integer\n    :type value: Integer\n    :rtype: Void\n=end\n    def put(key, value)\n \n    end\n \n \n=begin\n    Returns the value to which the specified key is \nmapped, or -1 if this map contains no mapping for \nthe key\n    :type key: Integer","lang":"Ruby"},{"s":"class MyHashMap {\n \n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    /** value will always be non-negative. */\n    func put(_ key: Int, _ value: Int) {\n        \n    }\n    \n    /** Returns the value to which the specified \nkey is mapped, or -1 if this map contains no \nmapping for the key */\n    func get(_ key: Int) -> Int {\n        \n    }\n    \n    /** Removes the mapping of the specified value \nkey if this map contains a mapping for the key */\n    func remove(_ key: Int) {\n        \n    }\n}\n ","lang":"Swift"},{"s":"type MyHashMap struct {\n \n}\n \n \n/** Initialize your data structure here. */\nfunc Constructor() MyHashMap {\n \n}\n \n \n/** value will always be non-negative. */\nfunc (this *MyHashMap) Put(key int, value int)  {\n \n}\n \n \n/** Returns the value to which the specified key is \nmapped, or -1 if this map contains no mapping for \nthe key */\nfunc (this *MyHashMap) Get(key int) int {\n \n}\n \n \n/** Removes the mapping of the specified value key ","lang":"Go"},{"s":"class MyHashMap() {\n \n    /** Initialize your data structure here. */\n \n \n    /** value will always be non-negative. */\n    def put(key: Int, value: Int) {\n \n    }\n \n    /** Returns the value to which the specified \nkey is mapped, or -1 if this map contains no \nmapping for the key */\n    def get(key: Int): Int = {\n \n    }\n \n    /** Removes the mapping of the specified value \nkey if this map contains a mapping for the key */\n    def remove(key: Int) {\n \n    }\n \n}\n \n/**","lang":"Scala"},{"s":"class MyHashMap() {\n \n    /** Initialize your data structure here. */\n \n \n    /** value will always be non-negative. */\n    fun put(key: Int, value: Int) {\n \n    }\n \n    /** Returns the value to which the specified \nkey is mapped, or -1 if this map contains no \nmapping for the key */\n    fun get(key: Int): Int {\n \n    }\n \n    /** Removes the mapping of the specified value \nkey if this map contains a mapping for the key */\n    fun remove(key: Int) {\n \n    }\n \n}\n \n/**","lang":"Kotlin"},{"s":"struct MyHashMap {\n \n}\n \n \n/** \n * `&self` means the method takes an immutable \nreference.\n * If you need a mutable reference, change it to `&\nmut self` instead.\n */\nimpl MyHashMap {\n \n    /** Initialize your data structure here. */\n    fn new() -> Self {\n        \n    }\n    \n    /** value will always be non-negative. */\n    fn put(&self, key: i32, value: i32) {\n        \n    }\n    \n    /** Returns the value to which the specified \nkey is mapped, or -1 if this map contains no \nmapping for the key */","lang":"Rust"},{"s":"class MyHashMap {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * value will always be non-negative.\n     * @param Integer $key\n     * @param Integer $value\n     * @return NULL\n     */\n    function put($key, $value) {\n        \n    }\n  \n    /**\n     * Returns the value to which the specified key \nis mapped, or -1 if this map contains no mapping \nfor the key\n     * @param Integer $key\n     * @return Integer\n     */\n    function get($key) {","lang":"PHP"},{"s":"class MyHashMap {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * value will always be non-negative.\n     * @param Integer $key\n     * @param Integer $value\n     * @return NULL\n     */\n    function put($key, $value) {\n        \n    }\n  \n    /**\n     * Returns the value to which the specified key \nis mapped, or -1 if this map contains no mapping \nfor the key\n     * @param Integer $key\n     * @return Integer\n     */\n    function get($key) {","lang":"PHP"}],"page":"706/1581","h":"706. 设计哈希映射","d":"<div class=\"notranslate\"><p>不使用任何内建的哈希表库设计一个哈希映射</p>\n\n<p>具体地说，你的设计应该包含以下的功能</p>\n\n<ul>\n\t<li><code>put(key, value)</code>：向哈希映射中插入(键,值)的数值对。如果键对应的值已经存在，更新这个值。</li>\n\t<li><code>get(key)</code>：返回给定的键所对应的值，如果映射中不包含这个键，返回-1。</li>\n\t<li><code>remove(key)</code>：如果映射中存在这个键，删除这个数值对。</li>\n</ul>\n\n<p><br>\n<strong>示例：</strong></p>\n\n<pre>MyHashMap hashMap = new MyHashMap();\nhashMap.put(1, 1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\nhashMap.put(2, 2); &nbsp; &nbsp; &nbsp; &nbsp; \nhashMap.get(1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 返回 1\nhashMap.get(3); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 返回 -1 (未找到)\nhashMap.put(2, 1); &nbsp; &nbsp; &nbsp; &nbsp; // 更新已有的值\nhashMap.get(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 返回 1 \nhashMap.remove(2); &nbsp; &nbsp; &nbsp; &nbsp; // 删除键为2的数据\nhashMap.get(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 返回 -1 (未找到) \n</pre>\n\n<p><br>\n<strong>注意：</strong></p>\n\n<ul>\n\t<li>所有的值都在&nbsp;<code>[0, 1000000]</code>的范围内。</li>\n\t<li>操作的总数目在<code>[1, 10000]</code>范围内。</li>\n\t<li>不要使用内建的哈希库。</li>\n</ul>\n</div>","l":"简单","s":"class MyHashMap\n \n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n \n    end\n \n \n=begin\n    value will always be non-negative.\n    :type key: Integer\n    :type value: Integer\n    :rtype: Void\n=end\n    def put(key, value)\n \n    end\n \n \n=begin\n    Returns the value to which the specified key is \nmapped, or -1 if this map contains no mapping for \nthe key\n    :type key: Integer","lang":"Ruby","href":"https://leetcode-cn.com/problems/design-hashmap/","bb":{"x":445,"y":40,"w":116,"h":28}}

