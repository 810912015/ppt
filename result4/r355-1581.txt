{"ls":[{"s":"class Twitter\n \n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n \n    end\n \n \n=begin\n    Compose a new tweet.\n    :type user_id: Integer\n    :type tweet_id: Integer\n    :rtype: Void\n=end\n    def post_tweet(user_id, tweet_id)\n \n    end\n \n \n=begin\n    Retrieve the 10 most recent tweet ids in the \nuser's news feed. Each item in the news feed must \nbe posted by users who the user followed or by the \nuser herself. Tweets must be ordered from most ","lang":"Ruby"},{"s":"class Twitter {\n \n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    /** Compose a new tweet. */\n    func postTweet(_ userId: Int, _ tweetId: Int) {\n        \n    }\n    \n    /** Retrieve the 10 most recent tweet ids in \nthe user's news feed. Each item in the news feed \nmust be posted by users who the user followed or by \nthe user herself. Tweets must be ordered from most \nrecent to least recent. */\n    func getNewsFeed(_ userId: Int) -> [Int] {\n        \n    }\n    \n    /** Follower follows a followee. If the \noperation is invalid, it should be a no-op. */\n    func follow(_ followerId: Int, _ followeeId: \nInt) {\n        ","lang":"Swift"},{"s":"type Twitter struct {\n \n}\n \n \n/** Initialize your data structure here. */\nfunc Constructor() Twitter {\n \n}\n \n \n/** Compose a new tweet. */\nfunc (this *Twitter) PostTweet(userId int, tweetId \nint)  {\n \n}\n \n \n/** Retrieve the 10 most recent tweet ids in the \nuser's news feed. Each item in the news feed must \nbe posted by users who the user followed or by the \nuser herself. Tweets must be ordered from most \nrecent to least recent. */\nfunc (this *Twitter) GetNewsFeed(userId int) []int {\n \n}","lang":"Go"},{"s":"class Twitter() {\n \n    /** Initialize your data structure here. */\n \n \n    /** Compose a new tweet. */\n    def postTweet(userId: Int, tweetId: Int) {\n \n    }\n \n    /** Retrieve the 10 most recent tweet ids in \nthe user's news feed. Each item in the news feed \nmust be posted by users who the user followed or by \nthe user herself. Tweets must be ordered from most \nrecent to least recent. */\n    def getNewsFeed(userId: Int): List[Int] = {\n \n    }\n \n    /** Follower follows a followee. If the \noperation is invalid, it should be a no-op. */\n    def follow(followerId: Int, followeeId: Int) {\n \n    }\n \n    /** Follower unfollows a followee. If the ","lang":"Scala"},{"s":"class Twitter() {\n \n    /** Initialize your data structure here. */\n \n \n    /** Compose a new tweet. */\n    fun postTweet(userId: Int, tweetId: Int) {\n \n    }\n \n    /** Retrieve the 10 most recent tweet ids in \nthe user's news feed. Each item in the news feed \nmust be posted by users who the user followed or by \nthe user herself. Tweets must be ordered from most \nrecent to least recent. */\n    fun getNewsFeed(userId: Int): List<Int> {\n \n    }\n \n    /** Follower follows a followee. If the \noperation is invalid, it should be a no-op. */\n    fun follow(followerId: Int, followeeId: Int) {\n \n    }\n \n    /** Follower unfollows a followee. If the ","lang":"Kotlin"},{"s":"struct Twitter {\n \n}\n \n \n/** \n * `&self` means the method takes an immutable \nreference.\n * If you need a mutable reference, change it to `&\nmut self` instead.\n */\nimpl Twitter {\n \n    /** Initialize your data structure here. */\n    fn new() -> Self {\n        \n    }\n    \n    /** Compose a new tweet. */\n    fn post_tweet(&self, user_id: i32, tweet_id: \ni32) {\n        \n    }\n    \n    /** Retrieve the 10 most recent tweet ids in \nthe user's news feed. Each item in the news feed ","lang":"Rust"},{"s":"class Twitter {\n \n    /** Initialize your data structure here. */\n    public Twitter() {\n \n    }\n    \n    /** Compose a new tweet. */\n    public void postTweet(int userId, int tweetId) {\n \n    }\n    \n    /** Retrieve the 10 most recent tweet ids in \nthe user's news feed. Each item in the news feed \nmust be posted by users who the user followed or by \nthe user herself. Tweets must be ordered from most \nrecent to least recent. */\n    public List<Integer> getNewsFeed(int userId) {\n \n    }\n    \n    /** Follower follows a followee. If the \noperation is invalid, it should be a no-op. */\n    public void follow(int followerId, int \nfolloweeId) {\n ","lang":"Java"},{"s":"class Twitter(object):\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n \n    def postTweet(self, userId, tweetId):\n        \"\"\"\n        Compose a new tweet.\n        :type userId: int\n        :type tweetId: int\n        :rtype: None\n        \"\"\"\n        \n \n    def getNewsFeed(self, userId):\n        \"\"\"\n        Retrieve the 10 most recent tweet ids in \nthe user's news feed. Each item in the news feed \nmust be posted by users who the user followed or by \nthe user herself. Tweets must be ordered from most \nrecent to least recent.\n        :type userId: int\n        :rtype: List[int]","lang":"Python"},{"s":"class Twitter:\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n \n    def postTweet(self, userId: int, tweetId: int) \n-> None:\n        \"\"\"\n        Compose a new tweet.\n        \"\"\"\n        \n \n    def getNewsFeed(self, userId: int) -> List[int]:\n        \"\"\"\n        Retrieve the 10 most recent tweet ids in \nthe user's news feed. Each item in the news feed \nmust be posted by users who the user followed or by \nthe user herself. Tweets must be ordered from most \nrecent to least recent.\n        \"\"\"\n        \n \n    def follow(self, followerId: int, followeeId: ","lang":"Python3"},{"s":"typedef struct {\n    \n} Twitter;\n \n/** Initialize your data structure here. */\n \nTwitter* twitterCreate() {\n    \n}\n \n/** Compose a new tweet. */\nvoid twitterPostTweet(Twitter* obj, int userId, int \ntweetId) {\n  \n}\n \n/** Retrieve the 10 most recent tweet ids in the \nuser's news feed. Each item in the news feed must \nbe posted by users who the user followed or by the \nuser herself. Tweets must be ordered from most \nrecent to least recent. */\nint* twitterGetNewsFeed(Twitter* obj, int userId, \nint* retSize) {\n  \n}\n ","lang":"C"},{"s":"public class Twitter {\n \n    /** Initialize your data structure here. */\n    public Twitter() {\n \n    }\n    \n    /** Compose a new tweet. */\n    public void PostTweet(int userId, int tweetId) {\n \n    }\n    \n    /** Retrieve the 10 most recent tweet ids in \nthe user's news feed. Each item in the news feed \nmust be posted by users who the user followed or by \nthe user herself. Tweets must be ordered from most \nrecent to least recent. */\n    public IList<int> GetNewsFeed(int userId) {\n \n    }\n    \n    /** Follower follows a followee. If the \noperation is invalid, it should be a no-op. */\n    public void Follow(int followerId, int \nfolloweeId) {\n ","lang":"C#"},{"s":"/**\n * Initialize your data structure here.\n */\nvar Twitter = function() {\n \n};\n \n/**\n * Compose a new tweet. \n * @param {number} userId \n * @param {number} tweetId\n * @return {void}\n */\nTwitter.prototype.postTweet = function(userId, \ntweetId) {\n \n};\n \n/**\n * Retrieve the 10 most recent tweet ids in the \nuser's news feed. Each item in the news feed must \nbe posted by users who the user followed or by the \nuser herself. Tweets must be ordered from most \nrecent to least recent. \n * @param {number} userId\n * @return {number[]}","lang":"JavaScript"},{"s":"class Twitter\n \n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n \n    end\n \n \n=begin\n    Compose a new tweet.\n    :type user_id: Integer\n    :type tweet_id: Integer\n    :rtype: Void\n=end\n    def post_tweet(user_id, tweet_id)\n \n    end\n \n \n=begin\n    Retrieve the 10 most recent tweet ids in the \nuser's news feed. Each item in the news feed must \nbe posted by users who the user followed or by the \nuser herself. Tweets must be ordered from most ","lang":"Ruby"},{"s":"class Twitter\n \n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n \n    end\n \n \n=begin\n    Compose a new tweet.\n    :type user_id: Integer\n    :type tweet_id: Integer\n    :rtype: Void\n=end\n    def post_tweet(user_id, tweet_id)\n \n    end\n \n \n=begin\n    Retrieve the 10 most recent tweet ids in the \nuser's news feed. Each item in the news feed must \nbe posted by users who the user followed or by the \nuser herself. Tweets must be ordered from most ","lang":"Ruby"}],"page":"355/1581","h":"355. 设计推特","d":"<div class=\"notranslate\"><p>设计一个简化版的推特(Twitter)，可以让用户实现发送推文，关注/取消关注其他用户，能够看见关注人（包括自己）的最近十条推文。你的设计需要支持以下的几个功能：</p>\n\n<ol>\n\t<li><strong>postTweet(userId, tweetId)</strong>: 创建一条新的推文</li>\n\t<li><strong>getNewsFeed(userId)</strong>: 检索最近的十条推文。每个推文都必须是由此用户关注的人或者是用户自己发出的。推文必须按照时间顺序由最近的开始排序。</li>\n\t<li><strong>follow(followerId, followeeId)</strong>: 关注一个用户</li>\n\t<li><strong>unfollow(followerId, followeeId)</strong>: 取消关注一个用户</li>\n</ol>\n\n<p><strong>示例:</strong></p>\n\n<pre>Twitter twitter = new Twitter();\n\n// 用户1发送了一条新推文 (用户id = 1, 推文id = 5).\ntwitter.postTweet(1, 5);\n\n// 用户1的获取推文应当返回一个列表，其中包含一个id为5的推文.\ntwitter.getNewsFeed(1);\n\n// 用户1关注了用户2.\ntwitter.follow(1, 2);\n\n// 用户2发送了一个新推文 (推文id = 6).\ntwitter.postTweet(2, 6);\n\n// 用户1的获取推文应当返回一个列表，其中包含两个推文，id分别为 -&gt; [6, 5].\n// 推文id6应当在推文id5之前，因为它是在5之后发送的.\ntwitter.getNewsFeed(1);\n\n// 用户1取消关注了用户2.\ntwitter.unfollow(1, 2);\n\n// 用户1的获取推文应当返回一个列表，其中包含一个id为5的推文.\n// 因为用户1已经不再关注用户2.\ntwitter.getNewsFeed(1);\n</pre>\n</div>","l":"中等","s":"class Twitter {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * Compose a new tweet.\n     * @param Integer $userId\n     * @param Integer $tweetId\n     * @return NULL\n     */\n    function postTweet($userId, $tweetId) {\n        \n    }\n  \n    /**\n     * Retrieve the 10 most recent tweet ids in the \nuser's news feed. Each item in the news feed must \nbe posted by users who the user followed or by the \nuser herself. Tweets must be ordered from most \nrecent to least recent.\n     * @param Integer $userId\n     * @return Integer[]","lang":"PHP","href":"https://leetcode-cn.com/problems/design-twitter/","bb":{"x":445,"y":40,"w":116,"h":28}}

