{"ls":[{"s":"class Solution {\n    public int leastBricks(List<List<Integer>> wall)\n {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def leastBricks(self, wall):\n        \"\"\"\n        :type wall: List[List[int]]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def leastBricks(self, wall: List[List[int]]) -> \nint:","lang":"Python3"},{"s":"int leastBricks(int** wall, int wallSize, int* \nwallColSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int LeastBricks(IList<IList<int>> wall) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} wall\n * @return {number}\n */\nvar leastBricks = function(wall) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[][]} wall\n# @return {Integer}\ndef least_bricks(wall)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func leastBricks(_ wall: [[Int]]) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func leastBricks(wall [][]int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def leastBricks(wall: List[List[Int]]): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun leastBricks(wall: List<List<Int>>): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn least_bricks(wall: Vec<Vec<i32>>) -> i32 \n{\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[][] $wall\n     * @return Integer\n     */\n    function leastBricks($wall) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[][] $wall\n     * @return Integer\n     */\n    function leastBricks($wall) {\n        \n    }\n}","lang":"PHP"}],"page":"554/1581","h":"554. 砖墙","d":"<div class=\"notranslate\"><p>你的面前有一堵方形的、由多行砖块组成的砖墙。&nbsp;这些砖块高度相同但是宽度不同。你现在要画一条<strong>自顶向下</strong>的、穿过<strong>最少</strong>砖块的垂线。</p>\n\n<p>砖墙由行的列表表示。 每一行都是一个代表从左至右每块砖的宽度的整数列表。</p>\n\n<p>如果你画的线只是从砖块的边缘经过，就不算穿过这块砖。你需要找出怎样画才能使这条线穿过的砖块数量最少，并且返回穿过的砖块数量。</p>\n\n<p><strong>你不能沿着墙的两个垂直边缘之一画线，这样显然是没有穿过一块砖的。</strong></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入:</strong> [[1,2,2,1],\n      [3,1,2],\n      [1,3,2],\n      [2,4],\n      [3,1,2],\n      [1,3,1,1]]\n\n<strong>输出:</strong> 2\n\n<strong>解释:</strong> \n<img style=\"width: 100%; max-width: 350px\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/brick_wall.png\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>每一行砖块的宽度之和应该相等，并且不能超过 INT_MAX。</li>\n\t<li>每一行砖块的数量在&nbsp;[1,10,000] 范围内，&nbsp;墙的高度在&nbsp;[1,10,000] 范围内，&nbsp;总的砖块数量不超过 20,000。</li>\n</ol></div>","l":"中等","s":"# @param {Integer[][]} wall\n# @return {Integer}\ndef least_bricks(wall)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/brick-wall/","bb":{"x":445,"y":40,"w":116,"h":28}}

