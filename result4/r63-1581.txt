{"ls":[{"s":"class Solution {\n    public int uniquePathsWithObstacles(int[][] \nobstacleGrid) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid)\n:\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def uniquePathsWithObstacles(self, \nobstacleGrid: List[List[int]]) -> int:","lang":"Python3"},{"s":"int uniquePathsWithObstacles(int** obstacleGrid, \nint obstacleGridSize, int* obstacleGridColSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int UniquePathsWithObstacles(int[][] \nobstacleGrid) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} obstacleGrid\n * @return {number}\n */\nvar uniquePathsWithObstacles = function\n(obstacleGrid) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[][]} obstacle_grid\n# @return {Integer}\ndef unique_paths_with_obstacles(obstacle_grid)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func uniquePathsWithObstacles(_ obstacleGrid: [\n[Int]]) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func uniquePathsWithObstacles(obstacleGrid [][]int) \nint {\n \n}","lang":"Go"},{"s":"object Solution {\n    def uniquePathsWithObstacles(obstacleGrid: Array\n[Array[Int]]): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun uniquePathsWithObstacles(obstacleGrid: \nArray<IntArray>): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn unique_paths_with_obstacles\n(obstacle_grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[][] $obstacleGrid\n     * @return Integer\n     */\n    function uniquePathsWithObstacles($obstacleGrid)\n {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[][] $obstacleGrid\n     * @return Integer\n     */\n    function uniquePathsWithObstacles($obstacleGrid)\n {\n        \n    }\n}","lang":"PHP"}],"page":"63/1581","h":"63. 不同路径 II","d":"<div class=\"notranslate\"><p>一个机器人位于一个 <em>m x n </em>网格的左上角 （起始点在下图中标记为“Start” ）。</p>\n\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p>\n\n<p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p>\n\n<p><img style=\"height: 183px; width: 400px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png\"></p>\n\n<p>网格中的障碍物和空位置分别用 <code>1</code> 和 <code>0</code> 来表示。</p>\n\n<p><strong>说明：</strong><em>m</em>&nbsp;和 <em>n </em>的值均不超过 100。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:\n</strong>[\n&nbsp; [0,0,0],\n&nbsp; [0,1,0],\n&nbsp; [0,0,0]\n]\n<strong>输出:</strong> 2\n<strong>解释:</strong>\n3x3 网格的正中间有一个障碍物。\n从左上角到右下角一共有 <code>2</code> 条不同的路径：\n1. 向右 -&gt; 向右 -&gt; 向下 -&gt; 向下\n2. 向下 -&gt; 向下 -&gt; 向右 -&gt; 向右\n</pre>\n</div>","l":"中等","s":"# @param {Integer[][]} obstacle_grid","lang":"Ruby","href":"https://leetcode-cn.com/problems/unique-paths-ii/","bb":{"x":445,"y":40,"w":116,"h":28}}

