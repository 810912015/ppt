{"ls":[{"s":"class KthLargest {\n \n    public KthLargest(int k, int[] nums) {\n \n    }\n    \n    public int add(int val) {\n \n    }\n}\n \n/**\n * Your KthLargest object will be instantiated and \ncalled as such:\n * KthLargest obj = new KthLargest(k, nums);\n * int param_1 = obj.add(val);\n */","lang":"Java"},{"s":"class KthLargest(object):\n \n    def __init__(self, k, nums):\n        \"\"\"\n        :type k: int\n        :type nums: List[int]\n        \"\"\"\n        \n \n    def add(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: int\n        \"\"\"\n        \n \n \n# Your KthLargest object will be instantiated and \ncalled as such:\n# obj = KthLargest(k, nums)\n# param_1 = obj.add(val)","lang":"Python"},{"s":"class KthLargest:\n \n    def __init__(self, k: int, nums: List[int]):\n        \n \n    def add(self, val: int) -> int:\n        \n \n \n# Your KthLargest object will be instantiated and \ncalled as such:\n# obj = KthLargest(k, nums)\n# param_1 = obj.add(val)","lang":"Python3"},{"s":"typedef struct {\n    \n} KthLargest;\n \n \nKthLargest* kthLargestCreate(int k, int* nums, int \nnumsSize) {\n    \n}\n \nint kthLargestAdd(KthLargest* obj, int val) {\n  \n}\n \nvoid kthLargestFree(KthLargest* obj) {\n    \n}\n \n/**\n * Your KthLargest struct will be instantiated and \ncalled as such:\n * KthLargest* obj = kthLargestCreate(k, nums, \nnumsSize);\n * int param_1 = kthLargestAdd(obj, val);\n \n * kthLargestFree(obj);","lang":"C"},{"s":"public class KthLargest {\n \n    public KthLargest(int k, int[] nums) {\n \n    }\n    \n    public int Add(int val) {\n \n    }\n}\n \n/**\n * Your KthLargest object will be instantiated and \ncalled as such:\n * KthLargest obj = new KthLargest(k, nums);\n * int param_1 = obj.Add(val);\n */","lang":"C#"},{"s":"/**\n * @param {number} k\n * @param {number[]} nums\n */\nvar KthLargest = function(k, nums) {\n \n};\n \n/** \n * @param {number} val\n * @return {number}\n */\nKthLargest.prototype.add = function(val) {\n \n};\n \n/**\n * Your KthLargest object will be instantiated and \ncalled as such:\n * var obj = new KthLargest(k, nums)\n * var param_1 = obj.add(val)\n */","lang":"JavaScript"},{"s":"class KthLargest\n \n=begin\n    :type k: Integer\n    :type nums: Integer[]\n=end\n    def initialize(k, nums)\n \n    end\n \n \n=begin\n    :type val: Integer\n    :rtype: Integer\n=end\n    def add(val)\n \n    end\n \n \nend\n \n# Your KthLargest object will be instantiated and \ncalled as such:\n# obj = KthLargest.new(k, nums)\n# param_1 = obj.add(val)","lang":"Ruby"},{"s":"class KthLargest {\n \n    init(_ k: Int, _ nums: [Int]) {\n        \n    }\n    \n    func add(_ val: Int) -> Int {\n        \n    }\n}\n \n/**\n * Your KthLargest object will be instantiated and \ncalled as such:\n * let obj = KthLargest(k, nums)\n * let ret_1: Int = obj.add(val)\n */","lang":"Swift"},{"s":"type KthLargest struct {\n \n}\n \n \nfunc Constructor(k int, nums []int) KthLargest {\n \n}\n \n \nfunc (this *KthLargest) Add(val int) int {\n \n}\n \n \n/**\n * Your KthLargest object will be instantiated and \ncalled as such:\n * obj := Constructor(k, nums);\n * param_1 := obj.Add(val);\n */","lang":"Go"},{"s":"class KthLargest(_k: Int, _nums: Array[Int]) {\n \n    def add(`val`: Int): Int = {\n \n    }\n \n}\n \n/**\n * Your KthLargest object will be instantiated and \ncalled as such:\n * var obj = new KthLargest(k, nums)\n * var param_1 = obj.add(`val`)\n */","lang":"Scala"},{"s":"class KthLargest(k: Int, nums: IntArray) {\n \n    fun add(`val`: Int): Int {\n \n    }\n \n}\n \n/**\n * Your KthLargest object will be instantiated and \ncalled as such:\n * var obj = KthLargest(k, nums)\n * var param_1 = obj.add(`val`)\n */","lang":"Kotlin"},{"s":"struct KthLargest {\n \n}\n \n \n/** \n * `&self` means the method takes an immutable \nreference.\n * If you need a mutable reference, change it to `&\nmut self` instead.\n */\nimpl KthLargest {\n \n    fn new(k: i32, nums: Vec<i32>) -> Self {\n        \n    }\n    \n    fn add(&self, val: i32) -> i32 {\n        \n    }\n}\n \n/**\n * Your KthLargest object will be instantiated and \ncalled as such:\n * let obj = KthLargest::new(k, nums);","lang":"Rust"},{"s":"class KthLargest {\n    /**\n     * @param Integer $k\n     * @param Integer[] $nums\n     */\n    function __construct($k, $nums) {\n        \n    }\n  \n    /**\n     * @param Integer $val\n     * @return Integer\n     */\n    function add($val) {\n        \n    }\n}\n \n/**\n * Your KthLargest object will be instantiated and \ncalled as such:\n * $obj = KthLargest($k, $nums);\n * $ret_1 = $obj->add($val);\n */","lang":"PHP"},{"s":"class KthLargest {\n    /**\n     * @param Integer $k\n     * @param Integer[] $nums\n     */\n    function __construct($k, $nums) {\n        \n    }\n  \n    /**\n     * @param Integer $val\n     * @return Integer\n     */\n    function add($val) {\n        \n    }\n}\n \n/**\n * Your KthLargest object will be instantiated and \ncalled as such:\n * $obj = KthLargest($k, $nums);\n * $ret_1 = $obj->add($val);\n */","lang":"PHP"}],"page":"703/1581","h":"703. 数据流中的第K大元素","d":"<div class=\"notranslate\"><p>设计一个找到数据流中第K大元素的类（class）。注意是排序后的第K大元素，不是第K个不同的元素。</p>\n\n<p>你的&nbsp;<code>KthLargest</code>&nbsp;类需要一个同时接收整数&nbsp;<code>k</code> 和整数数组<code>nums</code>&nbsp;的构造器，它包含数据流中的初始元素。每次调用&nbsp;<code>KthLargest.add</code>，返回当前数据流中第K大的元素。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>int k = 3;\nint[] arr = [4,5,8,2];\nKthLargest kthLargest = new KthLargest(3, arr);\nkthLargest.add(3);&nbsp; &nbsp;// returns 4\nkthLargest.add(5);&nbsp; &nbsp;// returns 5\nkthLargest.add(10);&nbsp; // returns 5\nkthLargest.add(9);&nbsp; &nbsp;// returns 8\nkthLargest.add(4);&nbsp; &nbsp;// returns 8\n</pre>\n\n<p><strong>说明: </strong><br>\n你可以假设&nbsp;<code>nums</code>&nbsp;的长度≥&nbsp;<code>k-1</code>&nbsp;且<code>k</code> ≥&nbsp;1。</p>\n</div>","l":"简单","s":"class KthLargest\n \n=begin\n    :type k: Integer\n    :type nums: Integer[]\n=end\n    def initialize(k, nums)\n \n    end\n \n \n=begin\n    :type val: Integer\n    :rtype: Integer\n=end\n    def add(val)\n \n    end\n \n \nend\n \n# Your KthLargest object will be instantiated and \ncalled as such:\n# obj = KthLargest.new(k, nums)\n# param_1 = obj.add(val)","lang":"Ruby","href":"https://leetcode-cn.com/problems/kth-largest-element-in-a-stream/","bb":{"x":445,"y":40,"w":116,"h":28}}

