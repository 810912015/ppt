{"ls":[{"s":"class Solution {\n    public String fractionToDecimal(int numerator, \nint denominator) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def fractionToDecimal(self, numerator, \ndenominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def fractionToDecimal(self, numerator: int, \ndenominator: int) -> str:","lang":"Python3"},{"s":"char * fractionToDecimal(int numerator, int \ndenominator){\n \n}","lang":"C"},{"s":"public class Solution {\n    public string FractionToDecimal(int numerator, \nint denominator) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} numerator\n * @param {number} denominator\n * @return {string}\n */\nvar fractionToDecimal = function(numerator, \ndenominator) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer} numerator\n# @param {Integer} denominator\n# @return {String}\ndef fraction_to_decimal(numerator, denominator)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func fractionToDecimal(_ numerator: Int, _ \ndenominator: Int) -> String {\n \n    }\n}","lang":"Swift"},{"s":"func fractionToDecimal(numerator int, denominator \nint) string {\n \n}","lang":"Go"},{"s":"object Solution {\n    def fractionToDecimal(numerator: Int, \ndenominator: Int): String = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun fractionToDecimal(numerator: Int, \ndenominator: Int): String {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn fraction_to_decimal(numerator: i32, \ndenominator: i32) -> String {\n \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer $numerator\n     * @param Integer $denominator\n     * @return String\n     */\n    function fractionToDecimal($numerator, \n$denominator) {\n \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer $numerator\n     * @param Integer $denominator\n     * @return String\n     */\n    function fractionToDecimal($numerator, \n$denominator) {\n \n    }\n}","lang":"PHP"}],"page":"166/1581","h":"166. 分数到小数","d":"<div class=\"notranslate\"><p>给定两个整数，分别表示分数的分子&nbsp;numerator 和分母 denominator，以字符串形式返回小数。</p>\n\n<p>如果小数部分为循环小数，则将循环的部分括在括号内。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> numerator = 1, denominator = 2\n<strong>输出:</strong> \"0.5\"\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> numerator = 2, denominator = 1\n<strong>输出:</strong> \"2\"</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入:</strong> numerator = 2, denominator = 3\n<strong>输出: </strong>\"0.(6)\"\n</pre>\n</div>","l":"中等","s":"# @param {Integer} numerator","lang":"Ruby","href":"https://leetcode-cn.com/problems/fraction-to-recurring-decimal/","bb":{"x":445,"y":40,"w":116,"h":28}}

