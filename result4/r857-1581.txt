{"ls":[{"s":"# @param {Integer[]} quality\n# @param {Integer[]} wage\n# @param {Integer} k\n# @return {Float}\ndef mincost_to_hire_workers(quality, wage, k)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func mincostToHireWorkers(_ quality: [Int], _ \nwage: [Int], _ K: Int) -> Double {\n        \n    }\n}","lang":"Swift"},{"s":"func mincostToHireWorkers(quality []int, wage []int,\n K int) float64 {\n \n}","lang":"Go"},{"s":"object Solution {\n    def mincostToHireWorkers(quality: Array[Int], \nwage: Array[Int], K: Int): Double = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun mincostToHireWorkers(quality: IntArray, \nwage: IntArray, K: Int): Double {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn mincost_to_hire_workers(quality: \nVec<i32>, wage: Vec<i32>, k: i32) -> f64 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public double mincostToHireWorkers(int[] \nquality, int[] wage, int K) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def mincostToHireWorkers(self, quality, wage, K)\n:\n        \"\"\"\n        :type quality: List[int]\n        :type wage: List[int]\n        :type K: int\n        :rtype: float\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def mincostToHireWorkers(self, quality: List\n[int], wage: List[int], K: int) -> float:","lang":"Python3"},{"s":"double mincostToHireWorkers(int* quality, int \nqualitySize, int* wage, int wageSize, int K){\n \n}","lang":"C"},{"s":"public class Solution {\n    public double MincostToHireWorkers(int[] \nquality, int[] wage, int K) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} quality\n * @param {number[]} wage\n * @param {number} K\n * @return {number}\n */\nvar mincostToHireWorkers = function(quality, wage, \nK) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} quality\n# @param {Integer[]} wage\n# @param {Integer} k\n# @return {Float}\ndef mincost_to_hire_workers(quality, wage, k)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[]} quality\n# @param {Integer[]} wage\n# @param {Integer} k\n# @return {Float}\ndef mincost_to_hire_workers(quality, wage, k)\n \nend","lang":"Ruby"}],"page":"857/1581","h":"857. 雇佣 K 名工人的最低成本","d":"<div class=\"notranslate\"><p>有 <code>N</code>&nbsp;名工人。&nbsp;第&nbsp;<code>i</code>&nbsp;名工人的工作质量为&nbsp;<code>quality[i]</code>&nbsp;，其最低期望工资为&nbsp;<code>wage[i]</code>&nbsp;。</p>\n\n<p>现在我们想雇佣&nbsp;<code>K</code>&nbsp;名工人组成一个<em>工资组。</em>在雇佣&nbsp;一组 K 名工人时，我们必须按照下述规则向他们支付工资：</p>\n\n<ol>\n\t<li>对工资组中的每名工人，应当按其工作质量与同组其他工人的工作质量的比例来支付工资。</li>\n\t<li>工资组中的每名工人至少应当得到他们的最低期望工资。</li>\n</ol>\n\n<p>返回组成一个满足上述条件的工资组至少需要多少钱。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入： </strong>quality = [10,20,5], wage = [70,50,30], K = 2\n<strong>输出： </strong>105.00000\n<strong>解释：</strong> 我们向 0 号工人支付 70，向 2 号工人支付 35。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入： </strong>quality = [3,1,10,10,1], wage = [4,8,2,2,7], K = 3\n<strong>输出： </strong>30.66667\n<strong>解释： </strong>我们向 0 号工人支付 4，向 2 号和 3 号分别支付 13.33333。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= K &lt;= N &lt;= 10000</code>，其中&nbsp;<code>N = quality.length = wage.length</code></li>\n\t<li><code>1 &lt;= quality[i] &lt;= 10000</code></li>\n\t<li><code>1 &lt;= wage[i] &lt;= 10000</code></li>\n\t<li>与正确答案误差在&nbsp;<code>10^-5</code>&nbsp;之内的答案将被视为正确的。</li>\n</ol>\n</div>","l":"困难","s":"class Solution {","lang":"PHP","href":"https://leetcode-cn.com/problems/minimum-cost-to-hire-k-workers/","bb":{"x":445,"y":40,"w":116,"h":28}}

