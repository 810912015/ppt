{"ls":[{"s":"class Solution {\n    public String orderlyQueue(String S, int K) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def orderlyQueue(self, S, K):\n        \"\"\"\n        :type S: str\n        :type K: int\n        :rtype: str\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def orderlyQueue(self, S: str, K: int) -> str:","lang":"Python3"},{"s":"char * orderlyQueue(char * S, int K){\n \n}","lang":"C"},{"s":"public class Solution {\n    public string OrderlyQueue(string S, int K) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} S\n * @param {number} K\n * @return {string}\n */\nvar orderlyQueue = function(S, K) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef orderly_queue(s, k)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func orderlyQueue(_ S: String, _ K: Int) -> \nString {\n        \n    }\n}","lang":"Swift"},{"s":"func orderlyQueue(S string, K int) string {\n \n}","lang":"Go"},{"s":"object Solution {\n    def orderlyQueue(S: String, K: Int): String = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun orderlyQueue(S: String, K: Int): String {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn orderly_queue(s: String, k: i32) -> \nString {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param String $S\n     * @param Integer $K\n     * @return String\n     */\n    function orderlyQueue($S, $K) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param String $S\n     * @param Integer $K\n     * @return String\n     */\n    function orderlyQueue($S, $K) {\n        \n    }\n}","lang":"PHP"}],"page":"899/1581","h":"899. 有序队列","d":"<div class=\"notranslate\"><p>给出了一个由小写字母组成的字符串 <code>S</code>。然后，我们可以进行任意次数的<em>移动</em>。</p>\n\n<p>在每次移动中，我们选择前 <code>K</code> 个字母中的一个（从左侧开始），将其从原位置移除，并放置在字符串的末尾。</p>\n\n<p>返回我们在任意次数的移动之后可以拥有的按字典顺序排列的最小字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>S = \"cba\", K = 1\n<strong>输出：</strong>\"acb\"\n<strong>解释：</strong>\n在第一步中，我们将第一个字符（“c”）移动到最后，获得字符串 “bac”。\n在第二步中，我们将第一个字符（“b”）移动到最后，获得最终结果 “acb”。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>S = \"baaca\", K = 3\n<strong>输出：</strong>\"aaabc\"\n<strong>解释：\n</strong>在第一步中，我们将第一个字符（“b”）移动到最后，获得字符串 “aacab”。\n在第二步中，我们将第三个字符（“c”）移动到最后，获得最终结果 “aaabc”。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= K &lt;= S.length&nbsp;&lt;= 1000</code></li>\n\t<li><code>S</code>&nbsp;只由小写字母组成。</li>\n</ol>\n</div>","l":"困难","s":"# @param {String} s","lang":"Ruby","href":"https://leetcode-cn.com/problems/orderly-queue/","bb":{"x":445,"y":40,"w":116,"h":28}}

