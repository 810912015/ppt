{"ls":[{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<Double> averageOfLevels(TreeNode \nroot) {\n \n    }\n}","lang":"Java"},{"s":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n \nclass Solution(object):\n    def averageOfLevels(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[float]\n        \"\"\"","lang":"Python"},{"s":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n \nclass Solution:\n    def averageOfLevels(self, root: TreeNode) -> \nList[float]:","lang":"Python3"},{"s":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n \n \n/**\n * Note: The returned array must be malloced, \nassume caller calls free().\n */\ndouble* averageOfLevels(struct TreeNode* root, int* \nreturnSize){\n \n}","lang":"C"},{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public IList<double> AverageOfLevels(TreeNode \nroot) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar averageOfLevels = function(root) {\n \n};","lang":"JavaScript"},{"s":"# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n \n# @param {TreeNode} root\n# @return {Float[]}\ndef average_of_levels(root)\n \nend","lang":"Ruby"},{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func averageOfLevels(_ root: TreeNode?) -> \n[Double] {\n        \n    }\n}","lang":"Swift"},{"s":"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc averageOfLevels(root *TreeNode) []float64 {\n \n}","lang":"Go"},{"s":"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def averageOfLevels(root: TreeNode): Array\n[Double] = {\n \n    }\n}","lang":"Scala"},{"s":"/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun averageOfLevels(root: TreeNode?): \nDoubleArray {\n \n    }\n}","lang":"Kotlin"},{"s":"// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn average_of_levels(root: \nOption<Rc<RefCell<TreeNode>>>) -> Vec<f64> {\n        \n    }\n}","lang":"Rust"},{"s":"/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = \n$value; }\n * }\n */\nclass Solution {\n \n    /**\n     * @param TreeNode $root\n     * @return Float[]\n     */\n    function averageOfLevels($root) {\n        \n    }\n}","lang":"PHP"},{"s":"/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = \n$value; }\n * }\n */\nclass Solution {\n \n    /**\n     * @param TreeNode $root\n     * @return Float[]\n     */\n    function averageOfLevels($root) {\n        \n    }\n}","lang":"PHP"}],"page":"637/1581","h":"637. 二叉树的层平均值","d":"<div class=\"notranslate\"><p>给定一个非空二叉树, 返回一个由每层节点平均值组成的数组.</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong>\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n<strong>输出:</strong> [3, 14.5, 11]\n<strong>解释:</strong>\n第0层的平均值是 3,  第1层是 14.5, 第2层是 11. 因此返回 [3, 14.5, 11].\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li>节点值的范围在32位有符号整数范围内。</li>\n</ol>\n</div>","l":"简单","s":"# Definition for a binary tree node.","lang":"Ruby","href":"https://leetcode-cn.com/problems/average-of-levels-in-binary-tree/","bb":{"x":445,"y":40,"w":116,"h":28}}

