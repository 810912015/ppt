{"ls":[{"s":"class Solution {\n    public int findRadius(int[] houses, int[] \nheaters) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def findRadius(self, houses, heaters):\n        \"\"\"\n        :type houses: List[int]\n        :type heaters: List[int]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def findRadius(self, houses: List[int], \nheaters: List[int]) -> int:","lang":"Python3"},{"s":"int findRadius(int* houses, int housesSize, int* \nheaters, int heatersSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int FindRadius(int[] houses, int[] \nheaters) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} houses\n * @param {number[]} heaters\n * @return {number}\n */\nvar findRadius = function(houses, heaters) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} houses\n# @param {Integer[]} heaters\n# @return {Integer}\ndef find_radius(houses, heaters)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func findRadius(_ houses: [Int], _ heaters: \n[Int]) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func findRadius(houses []int, heaters []int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def findRadius(houses: Array[Int], heaters: \nArray[Int]): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun findRadius(houses: IntArray, heaters: \nIntArray): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn find_radius(houses: Vec<i32>, heaters: \nVec<i32>) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $houses\n     * @param Integer[] $heaters\n     * @return Integer\n     */\n    function findRadius($houses, $heaters) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $houses\n     * @param Integer[] $heaters\n     * @return Integer\n     */\n    function findRadius($houses, $heaters) {\n        \n    }\n}","lang":"PHP"}],"page":"475/1581","h":"475. 供暖器","d":"<div class=\"notranslate\"><p>冬季已经来临。&nbsp;你的任务是设计一个有固定加热半径的供暖器向所有房屋供暖。</p>\n\n<p>现在，给出位于一条水平线上的房屋和供暖器的位置，找到可以覆盖所有房屋的最小加热半径。</p>\n\n<p>所以，你的输入将会是房屋和供暖器的位置。你将输出供暖器的最小加热半径。</p>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>给出的房屋和供暖器的数目是非负数且不会超过 25000。</li>\n\t<li>给出的房屋和供暖器的位置均是非负数且不会超过10^9。</li>\n\t<li>只要房屋位于供暖器的半径内(包括在边缘上)，它就可以得到供暖。</li>\n\t<li>所有供暖器都遵循你的半径标准，加热的半径也一样。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,3],[2]\n<strong>输出:</strong> 1\n<strong>解释:</strong> 仅在位置2上有一个供暖器。如果我们将加热半径设为1，那么所有房屋就都能得到供暖。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,3,4],[1,4]\n<strong>输出:</strong> 1\n<strong>解释:</strong> 在位置1, 4上有两个供暖器。我们需要将加热半径设为1，这样所有房屋就都能得到供暖。\n</pre>\n</div>","l":"简单","s":"# @param {Integer[]} houses","lang":"Ruby","href":"https://leetcode-cn.com/problems/heaters/","bb":{"x":445,"y":40,"w":116,"h":28}}

