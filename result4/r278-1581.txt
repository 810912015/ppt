{"ls":[{"s":"/* The isBadVersion API is defined in the parent \nclass VersionControl.\n      boolean isBadVersion(int version); */\n \npublic class Solution extends VersionControl {\n    public int firstBadVersion(int n) {\n        \n    }\n}","lang":"Java"},{"s":"# The isBadVersion API is already defined for you.\n# @param version, an integer\n# @return a bool\n# def isBadVersion(version):\n \nclass Solution(object):\n    def firstBadVersion(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"# The isBadVersion API is already defined for you.\n# @param version, an integer\n# @return a bool\n# def isBadVersion(version):\n \nclass Solution:\n    def firstBadVersion(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"","lang":"Python3"},{"s":"// Forward declaration of isBadVersion API.\nbool isBadVersion(int version);\n \nint firstBadVersion(int n) {\n    \n}","lang":"C"},{"s":"/* The isBadVersion API is defined in the parent \nclass VersionControl.\n      bool IsBadVersion(int version); */\n \npublic class Solution : VersionControl {\n    public int FirstBadVersion(int n) {\n        \n    }\n}","lang":"C#"},{"s":"/**\n * Definition for isBadVersion()\n * \n * @param {integer} version number\n * @return {boolean} whether the version is bad\n * isBadVersion = function(version) {\n *     ...\n * };\n */\n \n/**\n * @param {function} isBadVersion()\n * @return {function}\n */\nvar solution = function(isBadVersion) {\n    /**\n     * @param {integer} n Total versions\n     * @return {integer} The first bad version\n     */\n    return function(n) {\n        \n    };\n};","lang":"JavaScript"},{"s":"/* The isBadVersion API is defined in the parent \nclass VersionControl.\n      boolean isBadVersion(int version); */\n \npublic class Solution extends VersionControl {\n    public int firstBadVersion(int n) {\n        \n    }\n}","lang":"Java"},{"s":"# The isBadVersion API is already defined for you.\n# @param version, an integer\n# @return a bool\n# def isBadVersion(version):\n \nclass Solution(object):\n    def firstBadVersion(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"# The isBadVersion API is already defined for you.\n# @param version, an integer\n# @return a bool\n# def isBadVersion(version):\n \nclass Solution:\n    def firstBadVersion(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"","lang":"Python3"},{"s":"// Forward declaration of isBadVersion API.\nbool isBadVersion(int version);\n \nint firstBadVersion(int n) {\n    \n}","lang":"C"},{"s":"/* The isBadVersion API is defined in the parent \nclass VersionControl.\n      bool IsBadVersion(int version); */\n \npublic class Solution : VersionControl {\n    public int FirstBadVersion(int n) {\n        \n    }\n}","lang":"C#"},{"s":"/**\n * Definition for isBadVersion()\n * \n * @param {integer} version number\n * @return {boolean} whether the version is bad\n * isBadVersion = function(version) {\n *     ...\n * };\n */\n \n/**\n * @param {function} isBadVersion()\n * @return {function}\n */\nvar solution = function(isBadVersion) {\n    /**\n     * @param {integer} n Total versions\n     * @return {integer} The first bad version\n     */\n    return function(n) {\n        \n    };\n};","lang":"JavaScript"},{"s":"# The is_bad_version API is already defined for you.\n# @param {Integer} version\n# @return {boolean} whether the version is bad\n# def is_bad_version(version):\n \n# @param {Integer} n\n# @return {Integer}\ndef first_bad_version(n)\n    \nend","lang":"Ruby"},{"s":"# The is_bad_version API is already defined for you.\n# @param {Integer} version\n# @return {boolean} whether the version is bad\n# def is_bad_version(version):\n \n# @param {Integer} n\n# @return {Integer}\ndef first_bad_version(n)\n    \nend","lang":"Ruby"}],"page":"278/1581","h":"278. 第一个错误的版本","d":"<div class=\"notranslate\"><p>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。</p>\n\n<p>假设你有 <code>n</code> 个版本 <code>[1, 2, ..., n]</code>，你想找出导致之后所有版本出错的第一个错误的版本。</p>\n\n<p>你可以通过调用&nbsp;<code>bool isBadVersion(version)</code>&nbsp;接口来判断版本号 <code>version</code> 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>给定 n = 5，并且 version = 4 是第一个错误的版本。\n\n<code>调用 isBadVersion(3) -&gt; false\n调用 isBadVersion(5)&nbsp;-&gt; true\n调用 isBadVersion(4)&nbsp;-&gt; true\n\n所以，4 是第一个错误的版本。&nbsp;</code></pre>\n</div>","l":"简单","s":"# The is_bad_version API is already defined for you.","lang":"Ruby","href":"https://leetcode-cn.com/problems/first-bad-version/","bb":{"x":445,"y":40,"w":116,"h":28}}

