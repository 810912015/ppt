{"ls":[{"s":"# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef search(nums, target)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func search(_ nums: [Int], _ target: Int) -> \nInt {\n        \n    }\n}","lang":"Swift"},{"s":"func search(nums []int, target int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def search(nums: Array[Int], target: Int): Int \n= {\n \n    }\n}","lang":"Scala"},{"s":"object Solution {\n    def search(nums: Array[Int], target: Int): Int \n= {\n \n    }\n}","lang":"Scala"},{"s":"impl Solution {\n    pub fn search(nums: Vec<i32>, target: i32) -> \ni32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int search(int[] nums, int target) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def search(self, nums: List[int], target: int) \n-> int:","lang":"Python3"},{"s":"int search(int* nums, int numsSize, int target){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int Search(int[] nums, int target) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function(nums, target) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef search(nums, target)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef search(nums, target)\n \nend","lang":"Ruby"}],"page":"704/1581","h":"704. 二分查找","d":"<div class=\"notranslate\"><p>给定一个&nbsp;<code>n</code>&nbsp;个元素有序的（升序）整型数组&nbsp;<code>nums</code> 和一个目标值&nbsp;<code>target</code> &nbsp;，写一个函数搜索&nbsp;<code>nums</code>&nbsp;中的 <code>target</code>，如果目标值存在返回下标，否则返回 <code>-1</code>。</p>\n\n<p><br>\n<strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> <code>nums</code> = [-1,0,3,5,9,12], <code>target</code> = 9\n<strong>输出:</strong> 4\n<strong>解释:</strong> 9 出现在 <code>nums</code> 中并且下标为 4\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> <code>nums</code> = [-1,0,3,5,9,12], <code>target</code> = 2\n<strong>输出:</strong> -1\n<strong>解释:</strong> 2 不存在 <code>nums</code> 中因此返回 -1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>你可以假设 <code>nums</code>&nbsp;中的所有元素是不重复的。</li>\n\t<li><code>n</code>&nbsp;将在&nbsp;<code>[1, 10000]</code>之间。</li>\n\t<li><code>nums</code>&nbsp;的每个元素都将在&nbsp;<code>[-9999, 9999]</code>之间。</li>\n</ol>\n</div>","l":"简单","s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function search($nums, $target) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/binary-search/","bb":{"x":445,"y":40,"w":116,"h":28}}

