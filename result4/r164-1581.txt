{"ls":[{"s":"class Solution {\n    public int maximumGap(int[] nums) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def maximumGap(self, nums: List[int]) -> int:","lang":"Python3"},{"s":"int maximumGap(int* nums, int numsSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int MaximumGap(int[] nums) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumGap = function(nums) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums\n# @return {Integer}\ndef maximum_gap(nums)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func maximumGap(_ nums: [Int]) -> Int {\n \n    }\n}","lang":"Swift"},{"s":"func maximumGap(nums []int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def maximumGap(nums: Array[Int]): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun maximumGap(nums: IntArray): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn maximum_gap(nums: Vec<i32>) -> i32 {\n \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maximumGap($nums) {\n \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maximumGap($nums) {\n \n    }\n}","lang":"PHP"}],"page":"164/1581","h":"164. 最大间距","d":"<div class=\"notranslate\"><p>给定一个无序的数组，找出数组在排序之后，相邻元素之间最大的差值。</p>\n\n<p>如果数组元素个数小于 2，则返回 0。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> [3,6,9,1]\n<strong>输出:</strong> 3\n<strong>解释:</strong> 排序后的数组是 [1,3,6,9]<strong><em>, </em></strong>其中相邻元素 (3,6) 和 (6,9) 之间都存在最大差值 3。</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> [10]\n<strong>输出:</strong> 0\n<strong>解释:</strong> 数组元素个数小于 2，因此返回 0。</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>你可以假设数组中所有元素都是非负整数，且数值在 32 位有符号整数范围内。</li>\n\t<li>请尝试在线性时间复杂度和空间复杂度的条件下解决此问题。</li>\n</ul>\n</div>","l":"困难","s":"# @param {Integer[]} nums","lang":"Ruby","href":"https://leetcode-cn.com/problems/maximum-gap/","bb":{"x":445,"y":40,"w":116,"h":28}}

