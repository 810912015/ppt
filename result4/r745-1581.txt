{"ls":[{"s":"class WordFilter {\n \n    public WordFilter(String[] words) {\n \n    }\n    \n    public int f(String prefix, String suffix) {\n \n    }\n}\n \n/**\n * Your WordFilter object will be instantiated and \ncalled as such:\n * WordFilter obj = new WordFilter(words);\n * int param_1 = obj.f(prefix,suffix);\n */","lang":"Java"},{"s":"class WordFilter(object):\n \n    def __init__(self, words):\n        \"\"\"\n        :type words: List[str]\n        \"\"\"\n        \n \n    def f(self, prefix, suffix):\n        \"\"\"\n        :type prefix: str\n        :type suffix: str\n        :rtype: int\n        \"\"\"\n        \n \n \n# Your WordFilter object will be instantiated and \ncalled as such:\n# obj = WordFilter(words)\n# param_1 = obj.f(prefix,suffix)","lang":"Python"},{"s":"class WordFilter:\n \n    def __init__(self, words: List[str]):\n        \n \n    def f(self, prefix: str, suffix: str) -> int:\n        \n \n \n# Your WordFilter object will be instantiated and \ncalled as such:\n# obj = WordFilter(words)\n# param_1 = obj.f(prefix,suffix)","lang":"Python3"},{"s":"typedef struct {\n    \n} WordFilter;\n \n \nWordFilter* wordFilterCreate(char ** words, int \nwordsSize) {\n    \n}\n \nint wordFilterF(WordFilter* obj, char * prefix, \nchar * suffix) {\n  \n}\n \nvoid wordFilterFree(WordFilter* obj) {\n    \n}\n \n/**\n * Your WordFilter struct will be instantiated and \ncalled as such:\n * WordFilter* obj = wordFilterCreate(words, \nwordsSize);\n * int param_1 = wordFilterF(obj, prefix, suffix);\n ","lang":"C"},{"s":"public class WordFilter {\n \n    public WordFilter(string[] words) {\n \n    }\n    \n    public int F(string prefix, string suffix) {\n \n    }\n}\n \n/**\n * Your WordFilter object will be instantiated and \ncalled as such:\n * WordFilter obj = new WordFilter(words);\n * int param_1 = obj.F(prefix,suffix);\n */","lang":"C#"},{"s":"/**\n * @param {string[]} words\n */\nvar WordFilter = function(words) {\n \n};\n \n/** \n * @param {string} prefix \n * @param {string} suffix\n * @return {number}\n */\nWordFilter.prototype.f = function(prefix, suffix) {\n \n};\n \n/**\n * Your WordFilter object will be instantiated and \ncalled as such:\n * var obj = new WordFilter(words)\n * var param_1 = obj.f(prefix,suffix)\n */","lang":"JavaScript"},{"s":"class WordFilter\n \n=begin\n    :type words: String[]\n=end\n    def initialize(words)\n \n    end\n \n \n=begin\n    :type prefix: String\n    :type suffix: String\n    :rtype: Integer\n=end\n    def f(prefix, suffix)\n \n    end\n \n \nend\n \n# Your WordFilter object will be instantiated and \ncalled as such:\n# obj = WordFilter.new(words)\n# param_1 = obj.f(prefix, suffix)","lang":"Ruby"},{"s":"class WordFilter {\n \n    init(_ words: [String]) {\n        \n    }\n    \n    func f(_ prefix: String, _ suffix: String) -> \nInt {\n        \n    }\n}\n \n/**\n * Your WordFilter object will be instantiated and \ncalled as such:\n * let obj = WordFilter(words)\n * let ret_1: Int = obj.f(prefix, suffix)\n */","lang":"Swift"},{"s":"type WordFilter struct {\n \n}\n \n \nfunc Constructor(words []string) WordFilter {\n \n}\n \n \nfunc (this *WordFilter) F(prefix string, suffix \nstring) int {\n \n}\n \n \n/**\n * Your WordFilter object will be instantiated and \ncalled as such:\n * obj := Constructor(words);\n * param_1 := obj.F(prefix,suffix);\n */","lang":"Go"},{"s":"class WordFilter(_words: Array[String]) {\n \n    def f(prefix: String, suffix: String): Int = {\n \n    }\n \n}\n \n/**\n * Your WordFilter object will be instantiated and \ncalled as such:\n * var obj = new WordFilter(words)\n * var param_1 = obj.f(prefix,suffix)\n */","lang":"Scala"},{"s":"class WordFilter(words: Array<String>) {\n \n    fun f(prefix: String, suffix: String): Int {\n \n    }\n \n}\n \n/**\n * Your WordFilter object will be instantiated and \ncalled as such:\n * var obj = WordFilter(words)\n * var param_1 = obj.f(prefix,suffix)\n */","lang":"Kotlin"},{"s":"struct WordFilter {\n \n}\n \n \n/** \n * `&self` means the method takes an immutable \nreference.\n * If you need a mutable reference, change it to `&\nmut self` instead.\n */\nimpl WordFilter {\n \n    fn new(words: Vec<String>) -> Self {\n        \n    }\n    \n    fn f(&self, prefix: String, suffix: String) -> \ni32 {\n        \n    }\n}\n \n/**\n * Your WordFilter object will be instantiated and \ncalled as such:","lang":"Rust"},{"s":"class WordFilter {\n    /**\n     * @param String[] $words\n     */\n    function __construct($words) {\n        \n    }\n  \n    /**\n     * @param String $prefix\n     * @param String $suffix\n     * @return Integer\n     */\n    function f($prefix, $suffix) {\n        \n    }\n}\n \n/**\n * Your WordFilter object will be instantiated and \ncalled as such:\n * $obj = WordFilter($words);\n * $ret_1 = $obj->f($prefix, $suffix);\n */","lang":"PHP"},{"s":"class WordFilter {\n    /**\n     * @param String[] $words\n     */\n    function __construct($words) {\n        \n    }\n  \n    /**\n     * @param String $prefix\n     * @param String $suffix\n     * @return Integer\n     */\n    function f($prefix, $suffix) {\n        \n    }\n}\n \n/**\n * Your WordFilter object will be instantiated and \ncalled as such:\n * $obj = WordFilter($words);\n * $ret_1 = $obj->f($prefix, $suffix);\n */","lang":"PHP"}],"page":"745/1581","h":"745. 前缀和后缀搜索","d":"<div class=\"notranslate\"><p>给定多个&nbsp;<code>words</code>，<code>words[i]</code>&nbsp;的权重为&nbsp;<code>i</code>&nbsp;。</p>\n\n<p>设计一个类&nbsp;<code>WordFilter</code>&nbsp;实现函数<code>WordFilter.f(String prefix, String suffix)</code>。这个函数将返回具有前缀&nbsp;<code>prefix</code>&nbsp;和后缀<code>suffix</code>&nbsp;的词的最大权重。如果没有这样的词，返回 -1。</p>\n\n<p><strong>例子:</strong></p>\n\n<pre><strong>输入:</strong>\nWordFilter([\"apple\"])\nWordFilter.f(\"a\", \"e\") // 返回 0\nWordFilter.f(\"b\", \"\") // 返回 -1\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li><code>words</code>的长度在<code>[1, 15000]</code>之间。</li>\n\t<li>对于每个测试用例，最多会有<code>words.length</code>次对<code>WordFilter.f</code>的调用。</li>\n\t<li><code>words[i]</code>的长度在<code>[1, 10]</code>之间。</li>\n\t<li><code>prefix, suffix</code>的长度在<code>[0, 10]</code>之前。</li>\n\t<li><code>words[i]</code>和<code>prefix, suffix</code>只包含小写字母。</li>\n</ol>\n</div>","l":"困难","s":"class WordFilter\n \n=begin\n    :type words: String[]\n=end\n    def initialize(words)\n \n    end\n \n \n=begin\n    :type prefix: String\n    :type suffix: String\n    :rtype: Integer\n=end\n    def f(prefix, suffix)\n \n    end\n \n \nend\n \n# Your WordFilter object will be instantiated and \ncalled as such:\n# obj = WordFilter.new(words)\n# param_1 = obj.f(prefix, suffix)","lang":"Ruby","href":"https://leetcode-cn.com/problems/prefix-and-suffix-search/","bb":{"x":445,"y":40,"w":116,"h":28}}

