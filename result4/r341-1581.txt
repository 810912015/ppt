{"ls":[{"s":"/**\n * // This is the interface that allows for \ncreating nested lists.\n * // You should not implement it, or speculate \nabout its implementation\n * public interface NestedInteger {\n *\n *     // @return true if this NestedInteger holds \na single integer, rather than a nested list.\n *     public boolean isInteger();\n *\n *     // @return the single integer that this \nNestedInteger holds, if it holds a single integer\n *     // Return null if this NestedInteger holds a \nnested list\n *     public Integer getInteger();\n *\n *     // @return the nested list that this \nNestedInteger holds, if it holds a nested list\n *     // Return null if this NestedInteger holds a \nsingle integer\n *     public List<NestedInteger> getList();\n * }\n */\npublic class NestedIterator implements \nIterator<Integer> {","lang":"Java"},{"s":"# \"\"\"\n# This is the interface that allows for creating \nnested lists.\n# You should not implement it, or speculate about \nits implementation\n# \"\"\"\n#class NestedInteger(object):\n#    def isInteger(self):\n#        \"\"\"\n#        @return True if this NestedInteger holds a \nsingle integer, rather than a nested list.\n#        :rtype bool\n#        \"\"\"\n#\n#    def getInteger(self):\n#        \"\"\"\n#        @return the single integer that this \nNestedInteger holds, if it holds a single integer\n#        Return None if this NestedInteger holds a \nnested list\n#        :rtype int\n#        \"\"\"\n#\n#    def getList(self):\n#        \"\"\"\n#        @return the nested list that this ","lang":"Python"},{"s":"# \"\"\"\n# This is the interface that allows for creating \nnested lists.\n# You should not implement it, or speculate about \nits implementation\n# \"\"\"\n#class NestedInteger:\n#    def isInteger(self) -> bool:\n#        \"\"\"\n#        @return True if this NestedInteger holds a \nsingle integer, rather than a nested list.\n#        \"\"\"\n#\n#    def getInteger(self) -> int:\n#        \"\"\"\n#        @return the single integer that this \nNestedInteger holds, if it holds a single integer\n#        Return None if this NestedInteger holds a \nnested list\n#        \"\"\"\n#\n#    def getList(self) -> [NestedInteger]:\n#        \"\"\"\n#        @return the nested list that this \nNestedInteger holds, if it holds a nested list\n#        Return None if this NestedInteger holds a ","lang":"Python3"},{"s":"/**\n * \n****************************************************\n*****************\n * // This is the interface that allows for \ncreating nested lists.\n * // You should not implement it, or speculate \nabout its implementation\n * \n****************************************************\n*****************\n *\n * // Return true if this NestedInteger holds a \nsingle integer, rather than a nested list.\n * bool NestedIntegerIsInteger(struct NestedInteger \n*);\n *\n * // Return the single integer that this \nNestedInteger holds, if it holds a single integer\n * // The result is undefined if this NestedInteger \nholds a nested list\n * int NestedIntegerGetInteger(struct NestedInteger \n*);\n *\n * // Return the nested list that this \nNestedInteger holds, if it holds a nested list","lang":"C"},{"s":"/**\n * // This is the interface that allows for \ncreating nested lists.\n * // You should not implement it, or speculate \nabout its implementation\n * interface NestedInteger {\n *\n *     // @return true if this NestedInteger holds \na single integer, rather than a nested list.\n *     bool IsInteger();\n *\n *     // @return the single integer that this \nNestedInteger holds, if it holds a single integer\n *     // Return null if this NestedInteger holds a \nnested list\n *     int GetInteger();\n *\n *     // @return the nested list that this \nNestedInteger holds, if it holds a nested list\n *     // Return null if this NestedInteger holds a \nsingle integer\n *     IList<NestedInteger> GetList();\n * }\n */\npublic class NestedIterator {\n ","lang":"C#"},{"s":"/**\n * // This is the interface that allows for \ncreating nested lists.\n * // You should not implement it, or speculate \nabout its implementation\n * function NestedInteger() {\n *\n *     Return true if this NestedInteger holds a \nsingle integer, rather than a nested list.\n *     @return {boolean}\n *     this.isInteger = function() {\n *         ...\n *     };\n *\n *     Return the single integer that this \nNestedInteger holds, if it holds a single integer\n *     Return null if this NestedInteger holds a \nnested list\n *     @return {integer}\n *     this.getInteger = function() {\n *         ...\n *     };\n *\n *     Return the nested list that this \nNestedInteger holds, if it holds a nested list\n *     Return null if this NestedInteger holds a ","lang":"JavaScript"},{"s":"/**\n * // This is the interface that allows for \ncreating nested lists.\n * // You should not implement it, or speculate \nabout its implementation\n * public interface NestedInteger {\n *\n *     // @return true if this NestedInteger holds \na single integer, rather than a nested list.\n *     public boolean isInteger();\n *\n *     // @return the single integer that this \nNestedInteger holds, if it holds a single integer\n *     // Return null if this NestedInteger holds a \nnested list\n *     public Integer getInteger();\n *\n *     // @return the nested list that this \nNestedInteger holds, if it holds a nested list\n *     // Return null if this NestedInteger holds a \nsingle integer\n *     public List<NestedInteger> getList();\n * }\n */\npublic class NestedIterator implements \nIterator<Integer> {","lang":"Java"},{"s":"# \"\"\"\n# This is the interface that allows for creating \nnested lists.\n# You should not implement it, or speculate about \nits implementation\n# \"\"\"\n#class NestedInteger(object):\n#    def isInteger(self):\n#        \"\"\"\n#        @return True if this NestedInteger holds a \nsingle integer, rather than a nested list.\n#        :rtype bool\n#        \"\"\"\n#\n#    def getInteger(self):\n#        \"\"\"\n#        @return the single integer that this \nNestedInteger holds, if it holds a single integer\n#        Return None if this NestedInteger holds a \nnested list\n#        :rtype int\n#        \"\"\"\n#\n#    def getList(self):\n#        \"\"\"\n#        @return the nested list that this ","lang":"Python"},{"s":"# \"\"\"\n# This is the interface that allows for creating \nnested lists.\n# You should not implement it, or speculate about \nits implementation\n# \"\"\"\n#class NestedInteger:\n#    def isInteger(self) -> bool:\n#        \"\"\"\n#        @return True if this NestedInteger holds a \nsingle integer, rather than a nested list.\n#        \"\"\"\n#\n#    def getInteger(self) -> int:\n#        \"\"\"\n#        @return the single integer that this \nNestedInteger holds, if it holds a single integer\n#        Return None if this NestedInteger holds a \nnested list\n#        \"\"\"\n#\n#    def getList(self) -> [NestedInteger]:\n#        \"\"\"\n#        @return the nested list that this \nNestedInteger holds, if it holds a nested list\n#        Return None if this NestedInteger holds a ","lang":"Python3"},{"s":"/**\n * \n****************************************************\n*****************\n * // This is the interface that allows for \ncreating nested lists.\n * // You should not implement it, or speculate \nabout its implementation\n * \n****************************************************\n*****************\n *\n * // Return true if this NestedInteger holds a \nsingle integer, rather than a nested list.\n * bool NestedIntegerIsInteger(struct NestedInteger \n*);\n *\n * // Return the single integer that this \nNestedInteger holds, if it holds a single integer\n * // The result is undefined if this NestedInteger \nholds a nested list\n * int NestedIntegerGetInteger(struct NestedInteger \n*);\n *\n * // Return the nested list that this \nNestedInteger holds, if it holds a nested list","lang":"C"},{"s":"/**\n * // This is the interface that allows for \ncreating nested lists.\n * // You should not implement it, or speculate \nabout its implementation\n * interface NestedInteger {\n *\n *     // @return true if this NestedInteger holds \na single integer, rather than a nested list.\n *     bool IsInteger();\n *\n *     // @return the single integer that this \nNestedInteger holds, if it holds a single integer\n *     // Return null if this NestedInteger holds a \nnested list\n *     int GetInteger();\n *\n *     // @return the nested list that this \nNestedInteger holds, if it holds a nested list\n *     // Return null if this NestedInteger holds a \nsingle integer\n *     IList<NestedInteger> GetList();\n * }\n */\npublic class NestedIterator {\n ","lang":"C#"},{"s":"/**\n * // This is the interface that allows for \ncreating nested lists.\n * // You should not implement it, or speculate \nabout its implementation\n * function NestedInteger() {\n *\n *     Return true if this NestedInteger holds a \nsingle integer, rather than a nested list.\n *     @return {boolean}\n *     this.isInteger = function() {\n *         ...\n *     };\n *\n *     Return the single integer that this \nNestedInteger holds, if it holds a single integer\n *     Return null if this NestedInteger holds a \nnested list\n *     @return {integer}\n *     this.getInteger = function() {\n *         ...\n *     };\n *\n *     Return the nested list that this \nNestedInteger holds, if it holds a nested list\n *     Return null if this NestedInteger holds a ","lang":"JavaScript"},{"s":"# This is the interface that allows for creating \nnested lists.\n# You should not implement it, or speculate about \nits implementation\n#\n#class NestedInteger\n#    def is_integer()\n#        \"\"\"\n#        Return true if this NestedInteger holds a \nsingle integer, rather than a nested list.\n#        @return {Boolean}\n#        \"\"\"\n#\n#    def get_integer()\n#        \"\"\"\n#        Return the single integer that this \nNestedInteger holds, if it holds a single integer\n#        Return nil if this NestedInteger holds a \nnested list\n#        @return {Integer}\n#        \"\"\"\n#\n#    def get_list()\n#        \"\"\"\n#        Return the nested list that this \nNestedInteger holds, if it holds a nested list","lang":"Ruby"},{"s":"# This is the interface that allows for creating \nnested lists.\n# You should not implement it, or speculate about \nits implementation\n#\n#class NestedInteger\n#    def is_integer()\n#        \"\"\"\n#        Return true if this NestedInteger holds a \nsingle integer, rather than a nested list.\n#        @return {Boolean}\n#        \"\"\"\n#\n#    def get_integer()\n#        \"\"\"\n#        Return the single integer that this \nNestedInteger holds, if it holds a single integer\n#        Return nil if this NestedInteger holds a \nnested list\n#        @return {Integer}\n#        \"\"\"\n#\n#    def get_list()\n#        \"\"\"\n#        Return the nested list that this \nNestedInteger holds, if it holds a nested list","lang":"Ruby"}],"page":"341/1581","h":"341. 扁平化嵌套列表迭代器","d":"<div class=\"notranslate\"><p>给你一个嵌套的整型列表。请你设计一个迭代器，使其能够遍历这个整型列表中的所有整数。</p>\n\n<p>列表中的每一项或者为一个整数，或者是另一个列表。其中列表的元素也可能是整数或是其他列表。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>[[1,1],2,[1,1]]\n<strong>输出: </strong>[1,1,2,1,1]\n<strong>解释: </strong>通过重复调用&nbsp;<em>next </em>直到&nbsp;<em>hasNex</em>t 返回 false，<em>next&nbsp;</em>返回的元素的顺序应该是: <code>[1,1,2,1,1]</code>。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>[1,[4,[6]]]\n<strong>输出: </strong>[1,4,6]\n<strong>解释: </strong>通过重复调用&nbsp;<em>next&nbsp;</em>直到&nbsp;<em>hasNex</em>t 返回 false，<em>next&nbsp;</em>返回的元素的顺序应该是: <code>[1,4,6]</code>。\n</pre>\n</div>","l":"中等","s":"# This is the interface that allows for creating ","lang":"Ruby","href":"https://leetcode-cn.com/problems/flatten-nested-list-iterator/","bb":{"x":445,"y":40,"w":116,"h":28}}

