{"ls":[{"s":"# @param {Character[]} letters\n# @param {Character} target\n# @return {Character}\ndef next_greatest_letter(letters, target)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func nextGreatestLetter(_ letters: [Character], \n_ target: Character) -> Character {\n        \n    }\n}","lang":"Swift"},{"s":"func nextGreatestLetter(letters []byte, target byte)\n byte {\n \n}","lang":"Go"},{"s":"object Solution {\n    def nextGreatestLetter(letters: Array[Char], \ntarget: Char): Char = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun nextGreatestLetter(letters: CharArray, \ntarget: Char): Char {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn next_greatest_letter(letters: Vec<char>, \ntarget: char) -> char {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public char nextGreatestLetter(char[] letters, \nchar target) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def nextGreatestLetter(self, letters, target):\n        \"\"\"\n        :type letters: List[str]\n        :type target: str\n        :rtype: str\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def nextGreatestLetter(self, letters: List[str],\n target: str) -> str:","lang":"Python3"},{"s":"char nextGreatestLetter(char* letters, int \nlettersSize, char target){\n \n}","lang":"C"},{"s":"public class Solution {\n    public char NextGreatestLetter(char[] letters, \nchar target) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {character[]} letters\n * @param {character} target\n * @return {character}\n */\nvar nextGreatestLetter = function(letters, target) {\n \n};","lang":"JavaScript"},{"s":"# @param {Character[]} letters\n# @param {Character} target\n# @return {Character}\ndef next_greatest_letter(letters, target)\n \nend","lang":"Ruby"},{"s":"# @param {Character[]} letters\n# @param {Character} target\n# @return {Character}\ndef next_greatest_letter(letters, target)\n \nend","lang":"Ruby"}],"page":"744/1581","h":"744. 寻找比目标字母大的最小字母","d":"<div class=\"notranslate\"><p>给定一个只包含小写字母的有序数组<code>letters</code>&nbsp;和一个目标字母&nbsp;<code>target</code>，寻找有序数组里面比目标字母大的最小字母。</p>\n\n<p>在比较时，数组里字母的是循环有序的。举个例子：</p>\n\n<ul>\n\t<li>如果目标字母 <code>target = 'z'</code> 并且有序数组为&nbsp;<code>letters = ['a', 'b']</code>，则答案返回&nbsp;<code>'a'</code>。</li>\n\t<li>如果目标字母 <code>target = 'n'</code> 并且有序数组为&nbsp;<code>letters = ['m', 'z', 'c', 'f', 'j']</code> ，则答案返回 <code>'z'</code> 。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入:</strong>\nletters = [\"c\", \"f\", \"j\"]\ntarget = \"a\"\n<strong>输出:</strong> \"c\"\n\n<strong>输入:</strong>\nletters = [\"c\", \"f\", \"j\"]\ntarget = \"c\"\n<strong>输出:</strong> \"f\"\n\n<strong>输入:</strong>\nletters = [\"c\", \"f\", \"j\"]\ntarget = \"d\"\n<strong>输出:</strong> \"f\"\n\n<strong>输入:</strong>\nletters = [\"c\", \"f\", \"j\"]\ntarget = \"g\"\n<strong>输出:</strong> \"j\"\n\n<strong>输入:</strong>\nletters = [\"c\", \"f\", \"j\"]\ntarget = \"j\"\n<strong>输出:</strong> \"c\"\n\n<strong>输入:</strong>\nletters = [\"c\", \"f\", \"j\"]\ntarget = \"k\"\n<strong>输出:</strong> \"c\"\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>letters</code>长度范围在<code>[2, 10000]</code>区间内。</li>\n\t<li><code>letters</code> 仅由小写字母组成，最少包含两个不同的字母。</li>\n\t<li>目标字母<code>target</code> 是一个小写字母。</li>\n</ol>\n</div>","l":"简单","s":"class Solution {\n \n    /**\n     * @param String[] $letters\n     * @param String $target\n     * @return String\n     */\n    function nextGreatestLetter($letters, $target) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/find-smallest-letter-greater-than-target/","bb":{"x":445,"y":40,"w":116,"h":28}}

