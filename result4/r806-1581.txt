{"ls":[{"s":"class Solution {\n    public int[] numberOfLines(int[] widths, String \nS) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def numberOfLines(self, widths, S):\n        \"\"\"\n        :type widths: List[int]\n        :type S: str\n        :rtype: List[int]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def numberOfLines(self, widths: List[int], S: \nstr) -> List[int]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, \nassume caller calls free().\n */\nint* numberOfLines(int* widths, int widthsSize, \nchar * S, int* returnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int[] NumberOfLines(int[] widths, string \nS) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} widths\n * @param {string} S\n * @return {number[]}\n */\nvar numberOfLines = function(widths, S) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} widths\n# @param {String} s\n# @return {Integer[]}\ndef number_of_lines(widths, s)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func numberOfLines(_ widths: [Int], _ S: String)\n -> [Int] {\n        \n    }\n}","lang":"Swift"},{"s":"func numberOfLines(widths []int, S string) []int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def numberOfLines(widths: Array[Int], S: String)\n: Array[Int] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun numberOfLines(widths: IntArray, S: String): \nIntArray {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn number_of_lines(widths: Vec<i32>, s: \nString) -> Vec<i32> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $widths\n     * @param String $S\n     * @return Integer[]\n     */\n    function numberOfLines($widths, $S) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $widths\n     * @param String $S\n     * @return Integer[]\n     */\n    function numberOfLines($widths, $S) {\n        \n    }\n}","lang":"PHP"}],"page":"806/1581","h":"806. 写字符串需要的行数","d":"<div class=\"notranslate\"><p>我们要把给定的字符串 <code>S</code>&nbsp;从左到右写到每一行上，每一行的最大宽度为100个单位，如果我们在写某个字母的时候会使这行超过了100 个单位，那么我们应该把这个字母写到下一行。我们给定了一个数组&nbsp;<code>widths</code>&nbsp;，这个数组&nbsp;widths[0] 代表 'a' 需要的单位，&nbsp;widths[1] 代表 'b' 需要的单位，...，&nbsp;widths[25] 代表 'z' 需要的单位。</p>\n\n<p>现在回答两个问题：至少多少行能放下<code>S</code>，以及最后一行使用的宽度是多少个单位？将你的答案作为长度为2的整数列表返回。</p>\n\n<pre><strong>示例 1:</strong>\n<strong>输入:</strong> \nwidths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\nS = \"abcdefghijklmnopqrstuvwxyz\"\n<strong>输出:</strong> [3, 60]\n<strong>解释: \n</strong>所有的字符拥有相同的占用单位10。所以书写所有的26个字母，\n我们需要2个整行和占用60个单位的一行。\n</pre>\n\n<pre><strong>示例 2:</strong>\n<strong>输入:</strong> \nwidths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\nS = \"bbbcccdddaaa\"\n<strong>输出:</strong> [2, 4]\n<strong>解释: \n</strong>除去字母'a'所有的字符都是相同的单位10，并且字符串 \"bbbcccdddaa\" 将会覆盖 9 * 10 + 2 * 4 = 98 个单位.\n最后一个字母 'a' 将会被写到第二行，因为第一行只剩下2个单位了。\n所以，这个答案是2行，第二行有4个单位宽度。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注:</strong></p>\n\n<ul>\n\t<li>字符串&nbsp;<code>S</code> 的长度在&nbsp;[1, 1000] 的范围。</li>\n\t<li><code>S</code> 只包含小写字母。</li>\n\t<li><code>widths</code> 是长度为&nbsp;<code>26</code>的数组。</li>\n\t<li><code>widths[i]</code>&nbsp;值的范围在&nbsp;<code>[2, 10]</code>。</li>\n</ul>\n</div>","l":"简单","s":"# @param {Integer[]} widths\n# @param {String} s\n# @return {Integer[]}\ndef number_of_lines(widths, s)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/number-of-lines-to-write-string/","bb":{"x":445,"y":40,"w":116,"h":28}}

