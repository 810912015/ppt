{"ls":[{"s":"public class Solution {\n    // you need treat n as an unsigned value\n    public int reverseBits(int n) {\n        \n    }\n}","lang":"Java"},{"s":"class Solution:\n    # @param n, an integer\n    # @return an integer\n    def reverseBits(self, n):","lang":"Python"},{"s":"class Solution:\n    def reverseBits(self, n: int) -> int:","lang":"Python3"},{"s":"uint32_t reverseBits(uint32_t n) {\n    \n}","lang":"C"},{"s":"public class Solution {\n    public uint reverseBits(uint n) {\n        \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} n - a positive integer\n * @return {number} - a positive integer\n */\nvar reverseBits = function(n) {\n    \n};","lang":"JavaScript"},{"s":"uint32_t reverseBits(uint32_t n) {\n    \n}","lang":"C"},{"s":"public class Solution {\n    public uint reverseBits(uint n) {\n        \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} n - a positive integer\n * @return {number} - a positive integer\n */\nvar reverseBits = function(n) {\n    \n};","lang":"JavaScript"},{"s":"# @param {Integer} n, a positive integer\n# @return {Integer}\ndef reverse_bits(n)\n    \nend","lang":"Ruby"},{"s":"class Solution {\n    func reverseBits(_ n: Int) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func reverseBits(num uint32) uint32 {\n    \n}","lang":"Go"},{"s":"func reverseBits(num uint32) uint32 {\n    \n}","lang":"Go"},{"s":"func reverseBits(num uint32) uint32 {\n    \n}","lang":"Go"}],"page":"190/1581","h":"190. 颠倒二进制位","d":"<div class=\"notranslate\"><p>颠倒给定的 32 位无符号整数的二进制位。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入:</strong> 00000010100101000001111010011100\n<strong>输出:</strong> 00111001011110000010100101000000\n<strong>解释: </strong>输入的二进制串 <strong>00000010100101000001111010011100 </strong>表示无符号整数<strong> 43261596</strong><strong>，\n</strong>      因此返回 964176192，其二进制表示形式为 <strong>00111001011110000010100101000000</strong>。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>11111111111111111111111111111101\n<strong>输出：</strong>10111111111111111111111111111111\n<strong>解释：</strong>输入的二进制串 <strong>11111111111111111111111111111101</strong> 表示无符号整数 4294967293，\n&nbsp;     因此返回 3221225471 其二进制表示形式为 <strong>10101111110010110010011101101001。</strong></pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li>\n\t<li>在 Java 中，编译器使用<a href=\"https://baike.baidu.com/item/二进制补码/5295284\">二进制补码</a>记法来表示有符号整数。因此，在上面的&nbsp;<strong>示例 2</strong>&nbsp;中，输入表示有符号整数 <code>-3</code>，输出表示有符号整数 <code>-1073741825</code>。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶</strong>:<br>\n如果多次调用这个函数，你将如何优化你的算法？</p>\n</div>","l":"简单","s":"class Solution {","lang":"C++","href":"https://leetcode-cn.com/problems/reverse-bits/","bb":{"x":445,"y":40,"w":116,"h":28}}

