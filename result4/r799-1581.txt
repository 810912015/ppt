{"ls":[{"s":"# @param {Integer} poured\n# @param {Integer} query_row\n# @param {Integer} query_glass\n# @return {Float}\ndef champagne_tower(poured, query_row, query_glass)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func champagneTower(_ poured: Int, _ query_row: \nInt, _ query_glass: Int) -> Double {\n        \n    }\n}","lang":"Swift"},{"s":"func champagneTower(poured int, query_row int, \nquery_glass int) float64 {\n \n}","lang":"Go"},{"s":"object Solution {\n    def champagneTower(poured: Int, query_row: Int, \nquery_glass: Int): Double = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun champagneTower(poured: Int, query_row: Int, \nquery_glass: Int): Double {\n \n    }\n}","lang":"Kotlin"},{"s":"class Solution {\n    fun champagneTower(poured: Int, query_row: Int, \nquery_glass: Int): Double {\n \n    }\n}","lang":"Kotlin"},{"s":"class Solution {\n    public double champagneTower(int poured, int \nquery_row, int query_glass) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def champagneTower(self, poured, query_row, \nquery_glass):\n        \"\"\"\n        :type poured: int\n        :type query_row: int\n        :type query_glass: int\n        :rtype: float\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def champagneTower(self, poured: int, \nquery_row: int, query_glass: int) -> float:","lang":"Python3"},{"s":"double champagneTower(int poured, int query_row, \nint query_glass){\n \n}","lang":"C"},{"s":"public class Solution {\n    public double ChampagneTower(int poured, int \nquery_row, int query_glass) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} poured\n * @param {number} query_row\n * @param {number} query_glass\n * @return {number}\n */\nvar champagneTower = function(poured, query_row, \nquery_glass) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer} poured\n# @param {Integer} query_row\n# @param {Integer} query_glass\n# @return {Float}\ndef champagne_tower(poured, query_row, query_glass)\n \nend","lang":"Ruby"},{"s":"# @param {Integer} poured\n# @param {Integer} query_row\n# @param {Integer} query_glass\n# @return {Float}\ndef champagne_tower(poured, query_row, query_glass)\n \nend","lang":"Ruby"}],"page":"799/1581","h":"799. 香槟塔","d":"<div class=\"notranslate\"><p>我们把玻璃杯摆成金字塔的形状，其中第一层有1个玻璃杯，第二层有2个，依次类推到第100层，每个玻璃杯(250ml)将盛有香槟。</p>\n\n<p>从顶层的第一个玻璃杯开始倾倒一些香槟，当顶层的杯子满了，任何溢出的香槟都会立刻等流量的流向左右两侧的玻璃杯。当左右两边的杯子也满了，就会等流量的流向它们左右两边的杯子，依次类推。（当最底层的玻璃杯满了，香槟会流到地板上）</p>\n\n<p>例如，在倾倒一杯香槟后，最顶层的玻璃杯满了。倾倒了两杯香槟后，第二层的两个玻璃杯各自盛放一半的香槟。在倒三杯香槟后，第二层的香槟满了 - 此时总共有三个满的玻璃杯。在倒第四杯后，第三层中间的玻璃杯盛放了一半的香槟，他两边的玻璃杯各自盛放了四分之一的香槟，如下图所示。</p>\n\n<p><img style=\"height:200px; width:290px\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/09/tower.png\" alt=\"\"></p>\n\n<p>现在当倾倒了非负整数杯香槟后，返回第 i 行 j 个玻璃杯所盛放的香槟占玻璃杯容积的比例（i 和 j都从0开始）。</p>\n\n<p>&nbsp;</p>\n\n<pre><strong>示例 1:</strong>\n<strong>输入:</strong> poured(倾倒香槟总杯数) = 1, query_glass(杯子的位置数) = 1, query_row(行数) = 1\n<strong>输出:</strong> 0.0\n<strong>解释:</strong> 我们在顶层（下标是（0，0））倒了一杯香槟后，没有溢出，因此所有在顶层以下的玻璃杯都是空的。\n\n<strong>示例 2:</strong>\n<strong>输入:</strong> poured(倾倒香槟总杯数) = 2, query_glass(杯子的位置数) = 1, query_row(行数) = 1\n<strong>输出:</strong> 0.5\n<strong>解释:</strong> 我们在顶层（下标是（0，0）倒了两杯香槟后，有一杯量的香槟将从顶层溢出，位于（1，0）的玻璃杯和（1，1）的玻璃杯平分了这一杯香槟，所以每个玻璃杯有一半的香槟。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>poured</code>&nbsp;的范围<code>[0, 10 ^ 9]</code>。</li>\n\t<li><code>query_glass</code>&nbsp;和<code>query_row</code>&nbsp;的范围&nbsp;<code>[0, 99]</code>。</li>\n</ul>\n</div>","l":"中等","s":"class Solution {\n \n    /**\n     * @param Integer $poured\n     * @param Integer $query_row\n     * @param Integer $query_glass\n     * @return Float\n     */\n    function champagneTower($poured, $query_row, \n$query_glass) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/champagne-tower/","bb":{"x":445,"y":40,"w":116,"h":28}}

