{"ls":[{"s":"class Solution {\n    public int[] intersect(int[] nums1, int[] nums2)\n {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def intersect(self, nums1: List[int], nums2: \nList[int]) -> List[int]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, \nassume caller calls free().\n */\nint* intersect(int* nums1, int nums1Size, int* \nnums2, int nums2Size, int* returnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int[] Intersect(int[] nums1, int[] nums2)\n {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number[]}\n */\nvar intersect = function(nums1, nums2) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer[]}\ndef intersect(nums1, nums2)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func intersect(_ nums1: [Int], _ nums2: [Int]) \n-> [Int] {\n        \n    }\n}","lang":"Swift"},{"s":"func intersect(nums1 []int, nums2 []int) []int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def intersect(nums1: Array[Int], nums2: Array\n[Int]): Array[Int] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun intersect(nums1: IntArray, nums2: IntArray)\n: IntArray {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn intersect(nums1: Vec<i32>, nums2: \nVec<i32>) -> Vec<i32> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer[]\n     */\n    function intersect($nums1, $nums2) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer[]\n     */\n    function intersect($nums1, $nums2) {\n        \n    }\n}","lang":"PHP"}],"page":"350/1581","h":"350. 两个数组的交集 II","d":"<div class=\"notranslate\"><p>给定两个数组，编写一个函数来计算它们的交集。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>nums1 = [1,2,2,1], nums2 = [2,2]\n<strong>输出: </strong>[2,2]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n<strong>输出: </strong>[4,9]</pre>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。</li>\n\t<li>我们可以不考虑输出结果的顺序。</li>\n</ul>\n\n<p><strong><strong>进阶:</strong></strong></p>\n\n<ul>\n\t<li>如果给定的数组已经排好序呢？你将如何优化你的算法？</li>\n\t<li>如果&nbsp;<em>nums1&nbsp;</em>的大小比&nbsp;<em>nums2&nbsp;</em>小很多，哪种方法更优？</li>\n\t<li>如果&nbsp;<em>nums2&nbsp;</em>的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？</li>\n</ul>\n</div>","l":"简单","s":"# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer[]}\ndef intersect(nums1, nums2)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/","bb":{"x":445,"y":40,"w":116,"h":28}}

