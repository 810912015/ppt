{"ls":[{"s":"class Solution {\n    public boolean isRectangleOverlap(int[] rec1, \nint[] rec2) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def isRectangleOverlap(self, rec1, rec2):\n        \"\"\"\n        :type rec1: List[int]\n        :type rec2: List[int]\n        :rtype: bool\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def isRectangleOverlap(self, rec1: List[int], \nrec2: List[int]) -> bool:","lang":"Python3"},{"s":"bool isRectangleOverlap(int* rec1, int rec1Size, \nint* rec2, int rec2Size){\n \n}","lang":"C"},{"s":"public class Solution {\n    public bool IsRectangleOverlap(int[] rec1, int[]\n rec2) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} rec1\n * @param {number[]} rec2\n * @return {boolean}\n */\nvar isRectangleOverlap = function(rec1, rec2) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} rec1\n# @param {Integer[]} rec2\n# @return {Boolean}\ndef is_rectangle_overlap(rec1, rec2)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func isRectangleOverlap(_ rec1: [Int], _ rec2: \n[Int]) -> Bool {\n        \n    }\n}","lang":"Swift"},{"s":"func isRectangleOverlap(rec1 []int, rec2 []int) \nbool {\n \n}","lang":"Go"},{"s":"object Solution {\n    def isRectangleOverlap(rec1: Array[Int], rec2: \nArray[Int]): Boolean = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun isRectangleOverlap(rec1: IntArray, rec2: \nIntArray): Boolean {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn is_rectangle_overlap(rec1: Vec<i32>, \nrec2: Vec<i32>) -> bool {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $rec1\n     * @param Integer[] $rec2\n     * @return Boolean\n     */\n    function isRectangleOverlap($rec1, $rec2) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $rec1\n     * @param Integer[] $rec2\n     * @return Boolean\n     */\n    function isRectangleOverlap($rec1, $rec2) {\n        \n    }\n}","lang":"PHP"}],"page":"836/1581","h":"836. 矩形重叠","d":"<div class=\"notranslate\"><p>矩形以列表 <code>[x1, y1, x2, y2]</code> 的形式表示，其中 <code>(x1, y1)</code> 为左下角的坐标，<code>(x2, y2)</code> 是右上角的坐标。</p>\n\n<p>如果相交的面积为正，则称两矩形重叠。需要明确的是，只在角或边接触的两个矩形不构成重叠。</p>\n\n<p>给出两个矩形，判断它们是否重叠并返回结果。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>rec1 = [0,0,2,2], rec2 = [1,1,3,3]\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>rec1 = [0,0,1,1], rec2 = [1,0,2,1]\n<strong>输出：</strong>false\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>两个矩形 <code>rec1</code> 和 <code>rec2</code> 都以含有四个整数的列表的形式给出。</li>\n\t<li>矩形中的所有坐标都处于 <code>-10^9</code> 和 <code>10^9</code> 之间。</li>\n\t<li><code>x</code> 轴默认指向右，<code>y</code> 轴默认指向上。</li>\n\t<li>你可以仅考虑矩形是正放的情况。</li>\n</ol>\n</div>","l":"简单","s":"# @param {Integer[]} rec1\n# @param {Integer[]} rec2\n# @return {Boolean}\ndef is_rectangle_overlap(rec1, rec2)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/rectangle-overlap/","bb":{"x":445,"y":40,"w":116,"h":28}}

