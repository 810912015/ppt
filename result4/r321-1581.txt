{"ls":[{"s":"# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @param {Integer} k\n# @return {Integer[]}\ndef max_number(nums1, nums2, k)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func maxNumber(_ nums1: [Int], _ nums2: [Int], \n_ k: Int) -> [Int] {\n        \n    }\n}","lang":"Swift"},{"s":"func maxNumber(nums1 []int, nums2 []int, k int) []\nint {\n \n}","lang":"Go"},{"s":"object Solution {\n    def maxNumber(nums1: Array[Int], nums2: Array\n[Int], k: Int): Array[Int] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun maxNumber(nums1: IntArray, nums2: IntArray, \nk: Int): IntArray {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn max_number(nums1: Vec<i32>, nums2: \nVec<i32>, k: i32) -> Vec<i32> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int[] maxNumber(int[] nums1, int[] nums2,\n int k) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def maxNumber(self, nums1: List[int], nums2: \nList[int], k: int) -> List[int]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, \nassume caller calls free().\n */\nint* maxNumber(int* nums1, int nums1Size, int* \nnums2, int nums2Size, int k, int* returnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int[] MaxNumber(int[] nums1, int[] nums2,\n int k) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number} k\n * @return {number[]}\n */\nvar maxNumber = function(nums1, nums2, k) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @param {Integer} k\n# @return {Integer[]}\ndef max_number(nums1, nums2, k)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @param {Integer} k\n# @return {Integer[]}\ndef max_number(nums1, nums2, k)\n \nend","lang":"Ruby"}],"page":"321/1581","h":"321. 拼接最大数","d":"<div class=\"notranslate\"><p>给定长度分别为&nbsp;<code>m</code>&nbsp;和&nbsp;<code>n</code>&nbsp;的两个数组，其元素由&nbsp;<code>0-9</code>&nbsp;构成，表示两个自然数各位上的数字。现在从这两个数组中选出 <code>k (k &lt;= m + n)</code>&nbsp;个数字拼接成一个新的数，要求从同一个数组中取出的数字保持其在原数组中的相对顺序。</p>\n\n<p>求满足该条件的最大数。结果返回一个表示该最大数的长度为&nbsp;<code>k</code>&nbsp;的数组。</p>\n\n<p><strong>说明: </strong>请尽可能地优化你算法的时间和空间复杂度。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong>\nnums1 = <code>[3, 4, 6, 5]</code>\nnums2 = <code>[9, 1, 2, 5, 8, 3]</code>\nk = <code>5</code>\n<strong>输出:</strong>\n<code>[9, 8, 6, 5, 3]</code></pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong>\nnums1 = <code>[6, 7]</code>\nnums2 = <code>[6, 0, 4]</code>\nk = <code>5</code>\n<strong>输出:</strong>\n<code>[6, 7, 6, 0, 4]</code></pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong>\nnums1 = <code>[3, 9]</code>\nnums2 = <code>[8, 9]</code>\nk = <code>3</code>\n<strong>输出:</strong>\n<code>[9, 8, 9]</code></pre>\n</div>","l":"困难","s":"class Solution {","lang":"PHP","href":"https://leetcode-cn.com/problems/create-maximum-number/","bb":{"x":445,"y":40,"w":116,"h":28}}

