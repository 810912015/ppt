{"ls":[{"s":"class Solution {\n    public List<Integer> findAnagrams(String s, \nString p) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def findAnagrams(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: List[int]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def findAnagrams(self, s: str, p: str) -> List\n[int]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, \nassume caller calls free().\n */\nint* findAnagrams(char * s, char * p, int* \nreturnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<int> FindAnagrams(string s, string \np) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} s\n * @param {string} p\n * @return {number[]}\n */\nvar findAnagrams = function(s, p) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} s\n# @param {String} p\n# @return {Integer[]}\ndef find_anagrams(s, p)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func findAnagrams(_ s: String, _ p: String) -> \n[Int] {\n        \n    }\n}","lang":"Swift"},{"s":"func findAnagrams(s string, p string) []int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def findAnagrams(s: String, p: String): List\n[Int] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun findAnagrams(s: String, p: String): \nList<Int> {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn find_anagrams(s: String, p: String) -> \nVec<i32> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param String $s\n     * @param String $p\n     * @return Integer[]\n     */\n    function findAnagrams($s, $p) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param String $s\n     * @param String $p\n     * @return Integer[]\n     */\n    function findAnagrams($s, $p) {\n        \n    }\n}","lang":"PHP"}],"page":"438/1581","h":"438. 找到字符串中所有字母异位词","d":"<div class=\"notranslate\"><p>给定一个字符串&nbsp;<strong>s&nbsp;</strong>和一个非空字符串&nbsp;<strong>p</strong>，找到&nbsp;<strong>s&nbsp;</strong>中所有是&nbsp;<strong>p&nbsp;</strong>的字母异位词的子串，返回这些子串的起始索引。</p>\n\n<p>字符串只包含小写英文字母，并且字符串&nbsp;<strong>s&nbsp;</strong>和 <strong>p&nbsp;</strong>的长度都不超过 20100。</p>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>字母异位词指字母相同，但排列不同的字符串。</li>\n\t<li>不考虑答案输出的顺序。</li>\n</ul>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong>\ns: \"cbaebabacd\" p: \"abc\"\n\n<strong>输出:</strong>\n[0, 6]\n\n<strong>解释:</strong>\n起始索引等于 0 的子串是 \"cba\", 它是 \"abc\" 的字母异位词。\n起始索引等于 6 的子串是 \"bac\", 它是 \"abc\" 的字母异位词。\n</pre>\n\n<p><strong>&nbsp;示例 2:</strong></p>\n\n<pre><strong>输入:</strong>\ns: \"abab\" p: \"ab\"\n\n<strong>输出:</strong>\n[0, 1, 2]\n\n<strong>解释:</strong>\n起始索引等于 0 的子串是 \"ab\", 它是 \"ab\" 的字母异位词。\n起始索引等于 1 的子串是 \"ba\", 它是 \"ab\" 的字母异位词。\n起始索引等于 2 的子串是 \"ab\", 它是 \"ab\" 的字母异位词。\n</pre>\n</div>","l":"中等","s":"# @param {String} s\n# @param {String} p\n# @return {Integer[]}\ndef find_anagrams(s, p)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/","bb":{"x":445,"y":40,"w":116,"h":28}}

