{"ls":[{"s":"class Solution {\n    public void rotate(int[] nums, int k) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: None Do not return anything, modify \nnums in-place instead.\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def rotate(self, nums: List[int], k: int) -> \nNone:\n        \"\"\"\n        Do not return anything, modify nums \nin-place instead.\n        \"\"\"","lang":"Python3"},{"s":"void rotate(int* nums, int numsSize, int k){\n \n}","lang":"C"},{"s":"public class Solution {\n    public void Rotate(int[] nums, int k) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {void} Do not return anything, modify \nnums in-place instead.\n */\nvar rotate = function(nums, k) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Void} Do not return anything, modify \nnums in-place instead.\ndef rotate(nums, k)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func rotate(_ nums: inout [Int], _ k: Int) {\n \n    }\n}","lang":"Swift"},{"s":"func rotate(nums []int, k int)  {\n \n}","lang":"Go"},{"s":"object Solution {\n    def rotate(nums: Array[Int], k: Int): Unit = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun rotate(nums: IntArray, k: Int): Unit {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn rotate(nums: &mut Vec<i32>, k: i32) {\n \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return NULL\n     */\n    function rotate(&$nums, $k) {\n \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return NULL\n     */\n    function rotate(&$nums, $k) {\n \n    }\n}","lang":"PHP"}],"page":"189/1581","h":"189. 旋转数组","d":"<div class=\"notranslate\"><p>给定一个数组，将数组中的元素向右移动&nbsp;<em>k&nbsp;</em>个位置，其中&nbsp;<em>k&nbsp;</em>是非负数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> <code>[1,2,3,4,5,6,7]</code> 和 <em>k</em> = 3\n<strong>输出:</strong> <code>[5,6,7,1,2,3,4]</code>\n<strong>解释:</strong>\n向右旋转 1 步: <code>[7,1,2,3,4,5,6]</code>\n向右旋转 2 步: <code>[6,7,1,2,3,4,5]\n</code>向右旋转 3 步: <code>[5,6,7,1,2,3,4]</code>\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> <code>[-1,-100,3,99]</code> 和 <em>k</em> = 2\n<strong>输出:</strong> [3,99,-1,-100]\n<strong>解释:</strong> \n向右旋转 1 步: [99,-1,-100,3]\n向右旋转 2 步: [3,99,-1,-100]</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。</li>\n\t<li>要求使用空间复杂度为&nbsp;O(1) 的&nbsp;<strong>原地&nbsp;</strong>算法。</li>\n</ul>\n</div>","l":"简单","s":"# @param {Integer[]} nums","lang":"Ruby","href":"https://leetcode-cn.com/problems/rotate-array/","bb":{"x":445,"y":40,"w":116,"h":28}}

