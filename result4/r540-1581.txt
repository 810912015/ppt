{"ls":[{"s":"class Solution {\n    public int singleNonDuplicate(int[] nums) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def singleNonDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def singleNonDuplicate(self, nums: List[int]) \n-> int:","lang":"Python3"},{"s":"int singleNonDuplicate(int* nums, int numsSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int SingleNonDuplicate(int[] nums) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNonDuplicate = function(nums) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums\n# @return {Integer}\ndef single_non_duplicate(nums)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func singleNonDuplicate(_ nums: [Int]) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func singleNonDuplicate(nums []int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def singleNonDuplicate(nums: Array[Int]): Int = \n{\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun singleNonDuplicate(nums: IntArray): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn single_non_duplicate(nums: Vec<i32>) -> \ni32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function singleNonDuplicate($nums) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function singleNonDuplicate($nums) {\n        \n    }\n}","lang":"PHP"}],"page":"540/1581","h":"540. 有序数组中的单一元素","d":"<div class=\"notranslate\"><p>给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [1,1,2,3,3,4,4,8,8]\n<strong>输出:</strong> 2\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [3,3,7,7,10,11,11]\n<strong>输出:</strong> 10\n</pre>\n\n<p><strong>注意:</strong> 您的方案应该在 O(log n)时间复杂度和 O(1)空间复杂度中运行。</p>\n</div>","l":"中等","s":"# @param {Integer[]} nums\n# @return {Integer}\ndef single_non_duplicate(nums)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/single-element-in-a-sorted-array/","bb":{"x":445,"y":40,"w":116,"h":28}}

