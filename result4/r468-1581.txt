{"ls":[{"s":"class Solution {\n    public String validIPAddress(String IP) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def validIPAddress(self, IP):\n        \"\"\"\n        :type IP: str\n        :rtype: str\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def validIPAddress(self, IP: str) -> str:","lang":"Python3"},{"s":"char * validIPAddress(char * IP){\n \n}","lang":"C"},{"s":"public class Solution {\n    public string ValidIPAddress(string IP) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} IP\n * @return {string}\n */\nvar validIPAddress = function(IP) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} ip\n# @return {String}\ndef valid_ip_address(ip)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func validIPAddress(_ IP: String) -> String {\n        \n    }\n}","lang":"Swift"},{"s":"func validIPAddress(IP string) string {\n \n}","lang":"Go"},{"s":"object Solution {\n    def validIPAddress(IP: String): String = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun validIPAddress(IP: String): String {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn valid_ip_address(ip: String) -> String {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param String $IP\n     * @return String\n     */\n    function validIPAddress($IP) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param String $IP\n     * @return String\n     */\n    function validIPAddress($IP) {\n        \n    }\n}","lang":"PHP"}],"page":"468/1581","h":"468. 验证IP地址","d":"<div class=\"notranslate\"><p>编写一个函数来验证输入的字符串是否是有效的 IPv4 或&nbsp;IPv6 地址。</p>\n\n<p><strong>IPv4</strong>&nbsp;地址由十进制数和点来表示，每个地址包含4个十进制数，其范围为&nbsp;0 -&nbsp;255，&nbsp;用(\".\")分割。比如，<code>172.16.254.1</code>；</p>\n\n<p>同时，IPv4 地址内的数不会以 0 开头。比如，地址&nbsp;<code>172.16.254.01</code> 是不合法的。</p>\n\n<p><strong>IPv6</strong>&nbsp;地址由8组16进制的数字来表示，每组表示&nbsp;16 比特。这些组数字通过 (\":\")分割。比如,&nbsp;&nbsp;<code>2001:0db8:85a3:0000:0000:8a2e:0370:7334</code> 是一个有效的地址。而且，我们可以加入一些以 0 开头的数字，字母可以使用大写，也可以是小写。所以，&nbsp;<code>2001:db8:85a3:0:0:8A2E:0370:7334</code> 也是一个有效的 IPv6 address地址 (即，忽略 0 开头，忽略大小写)。</p>\n\n<p>然而，我们不能因为某个组的值为 0，而使用一个空的组，以至于出现 (::) 的情况。&nbsp;比如，&nbsp;<code>2001:0db8:85a3::8A2E:0370:7334</code> 是无效的 IPv6 地址。</p>\n\n<p>同时，在 IPv6 地址中，多余的 0 也是不被允许的。比如，&nbsp;<code>02001:0db8:85a3:0000:0000:8a2e:0370:7334</code> 是无效的。</p>\n\n<p><strong>说明:</strong>&nbsp;你可以认为给定的字符串里没有空格或者其他特殊字符。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> \"172.16.254.1\"\n\n<strong>输出:</strong> \"IPv4\"\n\n<strong>解释:</strong> 这是一个有效的 IPv4 地址, 所以返回 \"IPv4\"。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> \"2001:0db8:85a3:0:0:8A2E:0370:7334\"\n\n<strong>输出:</strong> \"IPv6\"\n\n<strong>解释:</strong> 这是一个有效的 IPv6 地址, 所以返回 \"IPv6\"。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> \"256.256.256.256\"\n\n<strong>输出:</strong> \"Neither\"\n\n<strong>解释:</strong> 这个地址既不是 IPv4 也不是 IPv6 地址。\n</pre>\n</div>","l":"中等","s":"# @param {String} ip\n# @return {String}\ndef valid_ip_address(ip)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/validate-ip-address/","bb":{"x":445,"y":40,"w":116,"h":28}}

