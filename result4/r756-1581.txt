{"ls":[{"s":"class Solution {\n    public boolean pyramidTransition(String bottom, \nList<String> allowed) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def pyramidTransition(self, bottom, allowed):\n        \"\"\"\n        :type bottom: str\n        :type allowed: List[str]\n        :rtype: bool\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def pyramidTransition(self, bottom: str, \nallowed: List[str]) -> bool:","lang":"Python3"},{"s":"bool pyramidTransition(char * bottom, char ** \nallowed, int allowedSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public bool PyramidTransition(string bottom, \nIList<string> allowed) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} bottom\n * @param {string[]} allowed\n * @return {boolean}\n */\nvar pyramidTransition = function(bottom, allowed) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} bottom\n# @param {String[]} allowed\n# @return {Boolean}\ndef pyramid_transition(bottom, allowed)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func pyramidTransition(_ bottom: String, _ \nallowed: [String]) -> Bool {\n        \n    }\n}","lang":"Swift"},{"s":"func pyramidTransition(bottom string, allowed []\nstring) bool {\n \n}","lang":"Go"},{"s":"object Solution {\n    def pyramidTransition(bottom: String, allowed: \nList[String]): Boolean = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun pyramidTransition(bottom: String, allowed: \nList<String>): Boolean {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn pyramid_transition(bottom: String, \nallowed: Vec<String>) -> bool {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param String $bottom\n     * @param String[] $allowed\n     * @return Boolean\n     */\n    function pyramidTransition($bottom, $allowed) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param String $bottom\n     * @param String[] $allowed\n     * @return Boolean\n     */\n    function pyramidTransition($bottom, $allowed) {\n        \n    }\n}","lang":"PHP"}],"page":"756/1581","h":"756. 金字塔转换矩阵","d":"<div class=\"notranslate\"><p>现在，我们用一些方块来堆砌一个金字塔。 每个方块用仅包含一个字母的字符串表示。</p>\n\n<p>使用三元组表示金字塔的堆砌规则如下：</p>\n\n<p>对于三元组(A, B, C) ，“C”为顶层方块，方块“A”、“B”分别作为方块“C”下一层的的左、右子块。当且仅当(A, B, C)是被允许的三元组，我们才可以将其堆砌上。</p>\n\n<p>初始时，给定金字塔的基层&nbsp;<code>bottom</code>，用一个字符串表示。一个允许的三元组列表&nbsp;<code>allowed</code>，每个三元组用一个长度为 3 的字符串表示。</p>\n\n<p>如果可以由基层一直堆到塔尖就返回 true，否则返回 false。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> bottom = \"BCD\", allowed = [\"BCG\", \"CDE\", \"GEA\", \"FFF\"]\n<strong>输出:</strong> true\n<strong>解析:</strong>\n可以堆砌成这样的金字塔:\n    A\n   / \\\n  G   E\n / \\ / \\\nB   C   D\n\n因为符合('B', 'C', 'G'), ('C', 'D', 'E') 和 ('G', 'E', 'A') 三种规则。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> bottom = \"AABA\", allowed = [\"AAA\", \"AAB\", \"ABA\", \"ABB\", \"BAC\"]\n<strong>输出:</strong> false\n<strong>解析:</strong>\n无法一直堆到塔尖。\n注意, 允许存在像 (A, B, C) 和 (A, B, D) 这样的三元组，其中 C != D。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li><code>bottom</code> 的长度范围在&nbsp;<code>[2, 8]</code>。</li>\n\t<li><code>allowed</code> 的长度范围在<code>[0, 200]</code>。</li>\n\t<li>方块的标记字母范围为<code>{'A', 'B', 'C', 'D', 'E', 'F', 'G'}</code>。</li>\n</ol>\n</div>","l":"中等","s":"# @param {String} bottom\n# @param {String[]} allowed\n# @return {Boolean}\ndef pyramid_transition(bottom, allowed)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/pyramid-transition-matrix/","bb":{"x":445,"y":40,"w":116,"h":28}}

