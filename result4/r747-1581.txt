{"ls":[{"s":"class Solution {\n    public int dominantIndex(int[] nums) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def dominantIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def dominantIndex(self, nums: List[int]) -> int:","lang":"Python3"},{"s":"int dominantIndex(int* nums, int numsSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int DominantIndex(int[] nums) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar dominantIndex = function(nums) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums\n# @return {Integer}\ndef dominant_index(nums)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func dominantIndex(_ nums: [Int]) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func dominantIndex(nums []int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def dominantIndex(nums: Array[Int]): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun dominantIndex(nums: IntArray): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn dominant_index(nums: Vec<i32>) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function dominantIndex($nums) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function dominantIndex($nums) {\n        \n    }\n}","lang":"PHP"}],"page":"747/1581","h":"747. 至少是其他数字两倍的最大数","d":"<div class=\"notranslate\"><p>在一个给定的数组<code>nums</code>中，总是存在一个最大元素 。</p>\n\n<p>查找数组中的最大元素是否至少是数组中每个其他数字的两倍。</p>\n\n<p>如果是，则返回最大元素的索引，否则返回-1。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> nums = [3, 6, 1, 0]\n<strong>输出:</strong> 1\n<strong>解释:</strong> 6是最大的整数, 对于数组中的其他整数,\n6大于数组中其他元素的两倍。6的索引是1, 所以我们返回1.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> nums = [1, 2, 3, 4]\n<strong>输出:</strong> -1\n<strong>解释:</strong> 4没有超过3的两倍大, 所以我们返回 -1.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ol>\n\t<li><code>nums</code>&nbsp;的长度范围在<code>[1, 50]</code>.</li>\n\t<li>每个&nbsp;<code>nums[i]</code>&nbsp;的整数范围在&nbsp;<code>[0, 100]</code>.</li>\n</ol>\n</div>","l":"简单","s":"# @param {Integer[]} nums\n# @return {Integer}\ndef dominant_index(nums)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/largest-number-at-least-twice-of-others/","bb":{"x":445,"y":40,"w":116,"h":28}}

