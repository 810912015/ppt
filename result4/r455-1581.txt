{"ls":[{"s":"# @param {Integer[]} g\n# @param {Integer[]} s\n# @return {Integer}\ndef find_content_children(g, s)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func findContentChildren(_ g: [Int], _ s: [Int])\n -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func findContentChildren(g []int, s []int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def findContentChildren(g: Array[Int], s: Array\n[Int]): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun findContentChildren(g: IntArray, s: \nIntArray): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn find_content_children(g: Vec<i32>, s: \nVec<i32>) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int findContentChildren(int[] g, int[] s)\n {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def findContentChildren(self, g: List[int], s: \nList[int]) -> int:","lang":"Python3"},{"s":"int findContentChildren(int* g, int gSize, int* s, \nint sSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int FindContentChildren(int[] g, int[] s)\n {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} g\n * @param {number[]} s\n * @return {number}\n */\nvar findContentChildren = function(g, s) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} g\n# @param {Integer[]} s\n# @return {Integer}\ndef find_content_children(g, s)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[]} g\n# @param {Integer[]} s\n# @return {Integer}\ndef find_content_children(g, s)\n \nend","lang":"Ruby"}],"page":"455/1581","h":"455. 分发饼干","d":"<div class=\"notranslate\"><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。对每个孩子 i ，都有一个胃口值&nbsp;g<sub>i ，</sub>这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j ，都有一个尺寸 s<sub>j&nbsp;</sub>。如果 s<sub>j</sub> &gt;= g<sub>i&nbsp;</sub>，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p>\n\n<p><strong>注意：</strong></p>\n\n<p>你可以假设胃口值为正。<br>\n一个小朋友最多只能拥有一块饼干。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,3], [1,1]\n\n<strong>输出:</strong> 1\n\n<strong>解释:</strong> \n你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。\n虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。\n所以你应该输出1。\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> [1,2], [1,2,3]\n\n<strong>输出:</strong> 2\n\n<strong>解释:</strong> \n你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。\n你拥有的饼干数量和尺寸都足以让所有孩子满足。\n所以你应该输出2.\n</pre>\n</div>","l":"简单","s":"class Solution {\n \n    /**\n     * @param Integer[] $g\n     * @param Integer[] $s\n     * @return Integer\n     */\n    function findContentChildren($g, $s) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/assign-cookies/","bb":{"x":445,"y":40,"w":116,"h":28}}

