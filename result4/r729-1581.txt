{"ls":[{"s":"class MyCalendar\n    def initialize()\n \n    end\n \n \n=begin\n    :type start: Integer\n    :type end: Integer\n    :rtype: Boolean\n=end\n    def book(start, end)\n \n    end\n \n \nend\n \n# Your MyCalendar object will be instantiated and \ncalled as such:\n# obj = MyCalendar.new()\n# param_1 = obj.book(start, end)","lang":"Ruby"},{"s":"class MyCalendar {\n \n    init() {\n        \n    }\n    \n    func book(_ start: Int, _ end: Int) -> Bool {\n        \n    }\n}\n \n/**\n * Your MyCalendar object will be instantiated and \ncalled as such:\n * let obj = MyCalendar()\n * let ret_1: Bool = obj.book(start, end)\n */","lang":"Swift"},{"s":"type MyCalendar struct {\n \n}\n \n \nfunc Constructor() MyCalendar {\n \n}\n \n \nfunc (this *MyCalendar) Book(start int, end int) \nbool {\n \n}\n \n \n/**\n * Your MyCalendar object will be instantiated and \ncalled as such:\n * obj := Constructor();\n * param_1 := obj.Book(start,end);\n */","lang":"Go"},{"s":"class MyCalendar() {\n \n    def book(start: Int, end: Int): Boolean = {\n \n    }\n \n}\n \n/**\n * Your MyCalendar object will be instantiated and \ncalled as such:\n * var obj = new MyCalendar()\n * var param_1 = obj.book(start,end)\n */","lang":"Scala"},{"s":"class MyCalendar() {\n \n    fun book(start: Int, end: Int): Boolean {\n \n    }\n \n}\n \n/**\n * Your MyCalendar object will be instantiated and \ncalled as such:\n * var obj = MyCalendar()\n * var param_1 = obj.book(start,end)\n */","lang":"Kotlin"},{"s":"struct MyCalendar {\n \n}\n \n \n/** \n * `&self` means the method takes an immutable \nreference.\n * If you need a mutable reference, change it to `&\nmut self` instead.\n */\nimpl MyCalendar {\n \n    fn new() -> Self {\n        \n    }\n    \n    fn book(&self, start: i32, end: i32) -> bool {\n        \n    }\n}\n \n/**\n * Your MyCalendar object will be instantiated and \ncalled as such:\n * let obj = MyCalendar::new();","lang":"Rust"},{"s":"class MyCalendar {\n \n    public MyCalendar() {\n \n    }\n    \n    public boolean book(int start, int end) {\n \n    }\n}\n \n/**\n * Your MyCalendar object will be instantiated and \ncalled as such:\n * MyCalendar obj = new MyCalendar();\n * boolean param_1 = obj.book(start,end);\n */","lang":"Java"},{"s":"class MyCalendar(object):\n \n    def __init__(self):\n        \n \n    def book(self, start, end):\n        \"\"\"\n        :type start: int\n        :type end: int\n        :rtype: bool\n        \"\"\"\n        \n \n \n# Your MyCalendar object will be instantiated and \ncalled as such:\n# obj = MyCalendar()\n# param_1 = obj.book(start,end)","lang":"Python"},{"s":"class MyCalendar:\n \n    def __init__(self):\n        \n \n    def book(self, start: int, end: int) -> bool:\n        \n \n \n# Your MyCalendar object will be instantiated and \ncalled as such:\n# obj = MyCalendar()\n# param_1 = obj.book(start,end)","lang":"Python3"},{"s":"typedef struct {\n    \n} MyCalendar;\n \n \nMyCalendar* myCalendarCreate() {\n    \n}\n \nbool myCalendarBook(MyCalendar* obj, int start, int \nend) {\n  \n}\n \nvoid myCalendarFree(MyCalendar* obj) {\n    \n}\n \n/**\n * Your MyCalendar struct will be instantiated and \ncalled as such:\n * MyCalendar* obj = myCalendarCreate();\n * bool param_1 = myCalendarBook(obj, start, end);\n \n * myCalendarFree(obj);\n*/","lang":"C"},{"s":"public class MyCalendar {\n \n    public MyCalendar() {\n \n    }\n    \n    public bool Book(int start, int end) {\n \n    }\n}\n \n/**\n * Your MyCalendar object will be instantiated and \ncalled as such:\n * MyCalendar obj = new MyCalendar();\n * bool param_1 = obj.Book(start,end);\n */","lang":"C#"},{"s":"var MyCalendar = function() {\n \n};\n \n/** \n * @param {number} start \n * @param {number} end\n * @return {boolean}\n */\nMyCalendar.prototype.book = function(start, end) {\n \n};\n \n/**\n * Your MyCalendar object will be instantiated and \ncalled as such:\n * var obj = new MyCalendar()\n * var param_1 = obj.book(start,end)\n */","lang":"JavaScript"},{"s":"class MyCalendar\n    def initialize()\n \n    end\n \n \n=begin\n    :type start: Integer\n    :type end: Integer\n    :rtype: Boolean\n=end\n    def book(start, end)\n \n    end\n \n \nend\n \n# Your MyCalendar object will be instantiated and \ncalled as such:\n# obj = MyCalendar.new()\n# param_1 = obj.book(start, end)","lang":"Ruby"},{"s":"class MyCalendar\n    def initialize()\n \n    end\n \n \n=begin\n    :type start: Integer\n    :type end: Integer\n    :rtype: Boolean\n=end\n    def book(start, end)\n \n    end\n \n \nend\n \n# Your MyCalendar object will be instantiated and \ncalled as such:\n# obj = MyCalendar.new()\n# param_1 = obj.book(start, end)","lang":"Ruby"}],"page":"729/1581","h":"729. 我的日程安排表 I","d":"<div class=\"notranslate\"><p>实现一个 <code>MyCalendar</code> 类来存放你的日程安排。如果要添加的时间内没有其他安排，则可以存储这个新的日程安排。</p>\n\n<p><code>MyCalendar</code> 有一个 <code>book(int start, int end)</code>方法。它意味着在 start 到 end 时间内增加一个日程安排，注意，这里的时间是半开区间，即 <code>[start, end)</code>, 实数&nbsp;<code>x</code> 的范围为， &nbsp;<code>start &lt;= x &lt; end</code>。</p>\n\n<p>当两个日程安排有一些时间上的交叉时（例如两个日程安排都在同一时间内），就会产生重复预订。</p>\n\n<p>每次调用 <code>MyCalendar.book</code>方法时，如果可以将日程安排成功添加到日历中而不会导致重复预订，返回 <code>true</code>。否则，返回 <code>false</code>&nbsp;并且不要将该日程安排添加到日历中。</p>\n\n<p>请按照以下步骤调用 <code>MyCalendar</code> 类: <code>MyCalendar cal = new MyCalendar();</code> <code>MyCalendar.book(start, end)</code></p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>MyCalendar();\nMyCalendar.book(10, 20); // returns true\nMyCalendar.book(15, 25); // returns false\nMyCalendar.book(20, 30); // returns true\n<strong>解释:</strong> \n第一个日程安排可以添加到日历中.  第二个日程安排不能添加到日历中，因为时间 15 已经被第一个日程安排预定了。\n第三个日程安排可以添加到日历中，因为第一个日程安排并不包含时间 20 。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>每个测试用例，调用&nbsp;<code>MyCalendar.book</code>&nbsp;函数最多不超过&nbsp;<code>100</code>次。</li>\n\t<li>调用函数&nbsp;<code>MyCalendar.book(start, end)</code>时，&nbsp;<code>start</code> 和&nbsp;<code>end</code> 的取值范围为&nbsp;<code>[0, 10^9]</code>。</li>\n</ul>\n</div>","l":"中等","s":"class MyCalendar {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $start\n     * @param Integer $end\n     * @return Boolean\n     */\n    function book($start, $end) {\n        \n    }\n}\n \n/**\n * Your MyCalendar object will be instantiated and \ncalled as such:\n * $obj = MyCalendar();\n * $ret_1 = $obj->book($start, $end);\n */","lang":"PHP","href":"https://leetcode-cn.com/problems/my-calendar-i/","bb":{"x":445,"y":40,"w":116,"h":28}}

