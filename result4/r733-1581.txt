{"ls":[{"s":"# @param {Integer[][]} image\n# @param {Integer} sr\n# @param {Integer} sc\n# @param {Integer} new_color\n# @return {Integer[][]}\ndef flood_fill(image, sr, sc, new_color)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func floodFill(_ image: [[Int]], _ sr: Int, _ \nsc: Int, _ newColor: Int) -> [[Int]] {\n        \n    }\n}","lang":"Swift"},{"s":"func floodFill(image [][]int, sr int, sc int, \nnewColor int) [][]int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def floodFill(image: Array[Array[Int]], sr: Int,\n sc: Int, newColor: Int): Array[Array[Int]] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun floodFill(image: Array<IntArray>, sr: Int, \nsc: Int, newColor: Int): Array<IntArray> {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn flood_fill(image: Vec<Vec<i32>>, sr: i32,\n sc: i32, new_color: i32) -> Vec<Vec<i32>> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int[][] floodFill(int[][] image, int sr, \nint sc, int newColor) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def floodFill(self, image, sr, sc, newColor):\n        \"\"\"\n        :type image: List[List[int]]\n        :type sr: int\n        :type sc: int\n        :type newColor: int\n        :rtype: List[List[int]]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def floodFill(self, image: List[List[int]], sr: \nint, sc: int, newColor: int) -> List[List[int]]:","lang":"Python3"},{"s":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as \n*returnColumnSizes array.\n * Note: Both returned array and *columnSizes array \nmust be malloced, assume caller calls free().\n */\nint** floodFill(int** image, int imageSize, int* \nimageColSize, int sr, int sc, int newColor, int* \nreturnSize, int** returnColumnSizes){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int[][] FloodFill(int[][] image, int sr, \nint sc, int newColor) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} image\n * @param {number} sr\n * @param {number} sc\n * @param {number} newColor\n * @return {number[][]}\n */\nvar floodFill = function(image, sr, sc, newColor) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[][]} image\n# @param {Integer} sr\n# @param {Integer} sc\n# @param {Integer} new_color\n# @return {Integer[][]}\ndef flood_fill(image, sr, sc, new_color)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[][]} image\n# @param {Integer} sr\n# @param {Integer} sc\n# @param {Integer} new_color\n# @return {Integer[][]}\ndef flood_fill(image, sr, sc, new_color)\n \nend","lang":"Ruby"}],"page":"733/1581","h":"733. 图像渲染","d":"<div class=\"notranslate\"><p>有一幅以二维整数数组表示的图画，每一个整数表示该图画的像素值大小，数值在 0 到 65535 之间。</p>\n\n<p>给你一个坐标&nbsp;<code>(sr, sc)</code>&nbsp;表示图像渲染开始的像素值（行 ，列）和一个新的颜色值&nbsp;<code>newColor</code>，让你重新上色这幅图像。</p>\n\n<p>为了完成上色工作，从初始坐标开始，记录初始坐标的上下左右四个方向上像素值与初始坐标相同的相连像素点，接着再记录这四个方向上符合条件的像素点与他们对应四个方向上像素值与初始坐标相同的相连像素点，……，重复该过程。将所有有记录的像素点的颜色值改为新的颜色值。</p>\n\n<p>最后返回经过上色渲染后的图像。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> \nimage = [[1,1,1],[1,1,0],[1,0,1]]\nsr = 1, sc = 1, newColor = 2\n<strong>输出:</strong> [[2,2,2],[2,2,0],[2,0,1]]\n<strong>解析:</strong> \n在图像的正中间，(坐标(sr,sc)=(1,1)),\n在路径上所有符合条件的像素点的颜色都被更改成2。\n注意，右下角的像素没有更改为2，\n因为它不是在上下左右四个方向上与初始点相连的像素点。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>image</code> 和&nbsp;<code>image[0]</code>&nbsp;的长度在范围&nbsp;<code>[1, 50]</code> 内。</li>\n\t<li>给出的初始点将满足&nbsp;<code>0 &lt;= sr &lt; image.length</code> 和&nbsp;<code>0 &lt;= sc &lt; image[0].length</code>。</li>\n\t<li><code>image[i][j]</code> 和&nbsp;<code>newColor</code>&nbsp;表示的颜色值在范围&nbsp;<code>[0, 65535]</code>内。</li>\n</ul>\n</div>","l":"简单","s":"class Solution {\n \n    /**\n     * @param Integer[][] $image\n     * @param Integer $sr\n     * @param Integer $sc\n     * @param Integer $newColor\n     * @return Integer[][]\n     */\n    function floodFill($image, $sr, $sc, $newColor) \n{\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/flood-fill/","bb":{"x":445,"y":40,"w":116,"h":28}}

