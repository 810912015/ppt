{"ls":[{"s":"class Solution {\n    public String shiftingLetters(String S, int[] \nshifts) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def shiftingLetters(self, S, shifts):\n        \"\"\"\n        :type S: str\n        :type shifts: List[int]\n        :rtype: str\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def shiftingLetters(self, S: str, shifts: List\n[int]) -> str:","lang":"Python3"},{"s":"char * shiftingLetters(char * S, int* shifts, int \nshiftsSize){\n \n}","lang":"C"},{"s":"char * shiftingLetters(char * S, int* shifts, int \nshiftsSize){\n \n}","lang":"C"},{"s":"/**\n * @param {string} S\n * @param {number[]} shifts\n * @return {string}\n */\nvar shiftingLetters = function(S, shifts) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} s\n# @param {Integer[]} shifts\n# @return {String}\ndef shifting_letters(s, shifts)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func shiftingLetters(_ S: String, _ shifts: \n[Int]) -> String {\n        \n    }\n}","lang":"Swift"},{"s":"func shiftingLetters(S string, shifts []int) string \n{\n \n}","lang":"Go"},{"s":"object Solution {\n    def shiftingLetters(S: String, shifts: Array\n[Int]): String = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun shiftingLetters(S: String, shifts: IntArray)\n: String {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn shifting_letters(s: String, shifts: \nVec<i32>) -> String {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param String $S\n     * @param Integer[] $shifts\n     * @return String\n     */\n    function shiftingLetters($S, $shifts) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param String $S\n     * @param Integer[] $shifts\n     * @return String\n     */\n    function shiftingLetters($S, $shifts) {\n        \n    }\n}","lang":"PHP"}],"page":"848/1581","h":"848. 字母移位","d":"<div class=\"notranslate\"><p>有一个由小写字母组成的字符串 <code>S</code>，和一个整数数组 <code>shifts</code>。</p>\n\n<p>我们将字母表中的下一个字母称为原字母的 <em>移位</em>（由于字母表是环绕的， <code>'z'</code>&nbsp;将会变成&nbsp;<code>'a'</code>）。</p>\n\n<p>例如·，<code>shift('a') = 'b'</code>，&nbsp;<code>shift('t') = 'u'</code>,， 以及&nbsp;<code>shift('z') = 'a'</code>。</p>\n\n<p>对于每个&nbsp;<code>shifts[i] = x</code>&nbsp;， 我们会将 <code>S</code>&nbsp;中的前&nbsp;<code>i+1</code>&nbsp;个字母移位&nbsp;<code>x</code>&nbsp;次。</p>\n\n<p>返回将所有这些移位都应用到 <code>S</code> 后最终得到的字符串。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>S = \"abc\", shifts = [3,5,9]\n<strong>输出：</strong>\"rpl\"\n<strong>解释： </strong>\n我们以 \"abc\" 开始。\n将 S 中的第 1 个字母移位 3 次后，我们得到 \"dbc\"。\n再将 S 中的前 2 个字母移位 5 次后，我们得到 \"igc\"。\n最后将 S 中的这 3 个字母移位 9 次后，我们得到答案 \"rpl\"。\n</pre>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length = shifts.length &lt;= 20000</code></li>\n\t<li><code>0 &lt;= shifts[i] &lt;= 10 ^ 9</code></li>\n</ol>\n</div>","l":"中等","s":"# @param {String} s","lang":"Ruby","href":"https://leetcode-cn.com/problems/shifting-letters/","bb":{"x":445,"y":40,"w":116,"h":28}}

