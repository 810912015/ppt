{"ls":[{"s":"class MyCalendarTwo\n    def initialize()\n \n    end\n \n \n=begin\n    :type start: Integer\n    :type end: Integer\n    :rtype: Boolean\n=end\n    def book(start, end)\n \n    end\n \n \nend\n \n# Your MyCalendarTwo object will be instantiated \nand called as such:\n# obj = MyCalendarTwo.new()\n# param_1 = obj.book(start, end)","lang":"Ruby"},{"s":"class MyCalendarTwo {\n \n    init() {\n        \n    }\n    \n    func book(_ start: Int, _ end: Int) -> Bool {\n        \n    }\n}\n \n/**\n * Your MyCalendarTwo object will be instantiated \nand called as such:\n * let obj = MyCalendarTwo()\n * let ret_1: Bool = obj.book(start, end)\n */","lang":"Swift"},{"s":"type MyCalendarTwo struct {\n \n}\n \n \nfunc Constructor() MyCalendarTwo {\n \n}\n \n \nfunc (this *MyCalendarTwo) Book(start int, end int) \nbool {\n \n}\n \n \n/**\n * Your MyCalendarTwo object will be instantiated \nand called as such:\n * obj := Constructor();\n * param_1 := obj.Book(start,end);\n */","lang":"Go"},{"s":"class MyCalendarTwo() {\n \n    def book(start: Int, end: Int): Boolean = {\n \n    }\n \n}\n \n/**\n * Your MyCalendarTwo object will be instantiated \nand called as such:\n * var obj = new MyCalendarTwo()\n * var param_1 = obj.book(start,end)\n */","lang":"Scala"},{"s":"class MyCalendarTwo() {\n \n    fun book(start: Int, end: Int): Boolean {\n \n    }\n \n}\n \n/**\n * Your MyCalendarTwo object will be instantiated \nand called as such:\n * var obj = MyCalendarTwo()\n * var param_1 = obj.book(start,end)\n */","lang":"Kotlin"},{"s":"struct MyCalendarTwo {\n \n}\n \n \n/** \n * `&self` means the method takes an immutable \nreference.\n * If you need a mutable reference, change it to `&\nmut self` instead.\n */\nimpl MyCalendarTwo {\n \n    fn new() -> Self {\n        \n    }\n    \n    fn book(&self, start: i32, end: i32) -> bool {\n        \n    }\n}\n \n/**\n * Your MyCalendarTwo object will be instantiated \nand called as such:\n * let obj = MyCalendarTwo::new();","lang":"Rust"},{"s":"class MyCalendarTwo {\n \n    public MyCalendarTwo() {\n \n    }\n    \n    public boolean book(int start, int end) {\n \n    }\n}\n \n/**\n * Your MyCalendarTwo object will be instantiated \nand called as such:\n * MyCalendarTwo obj = new MyCalendarTwo();\n * boolean param_1 = obj.book(start,end);\n */","lang":"Java"},{"s":"class MyCalendarTwo(object):\n \n    def __init__(self):\n        \n \n    def book(self, start, end):\n        \"\"\"\n        :type start: int\n        :type end: int\n        :rtype: bool\n        \"\"\"\n        \n \n \n# Your MyCalendarTwo object will be instantiated \nand called as such:\n# obj = MyCalendarTwo()\n# param_1 = obj.book(start,end)","lang":"Python"},{"s":"class MyCalendarTwo:\n \n    def __init__(self):\n        \n \n    def book(self, start: int, end: int) -> bool:\n        \n \n \n# Your MyCalendarTwo object will be instantiated \nand called as such:\n# obj = MyCalendarTwo()\n# param_1 = obj.book(start,end)","lang":"Python3"},{"s":"typedef struct {\n    \n} MyCalendarTwo;\n \n \nMyCalendarTwo* myCalendarTwoCreate() {\n    \n}\n \nbool myCalendarTwoBook(MyCalendarTwo* obj, int \nstart, int end) {\n  \n}\n \nvoid myCalendarTwoFree(MyCalendarTwo* obj) {\n    \n}\n \n/**\n * Your MyCalendarTwo struct will be instantiated \nand called as such:\n * MyCalendarTwo* obj = myCalendarTwoCreate();\n * bool param_1 = myCalendarTwoBook(obj, start, end)\n;\n \n * myCalendarTwoFree(obj);","lang":"C"},{"s":"public class MyCalendarTwo {\n \n    public MyCalendarTwo() {\n \n    }\n    \n    public bool Book(int start, int end) {\n \n    }\n}\n \n/**\n * Your MyCalendarTwo object will be instantiated \nand called as such:\n * MyCalendarTwo obj = new MyCalendarTwo();\n * bool param_1 = obj.Book(start,end);\n */","lang":"C#"},{"s":"var MyCalendarTwo = function() {\n \n};\n \n/** \n * @param {number} start \n * @param {number} end\n * @return {boolean}\n */\nMyCalendarTwo.prototype.book = function(start, end) \n{\n \n};\n \n/**\n * Your MyCalendarTwo object will be instantiated \nand called as such:\n * var obj = new MyCalendarTwo()\n * var param_1 = obj.book(start,end)\n */","lang":"JavaScript"},{"s":"class MyCalendarTwo\n    def initialize()\n \n    end\n \n \n=begin\n    :type start: Integer\n    :type end: Integer\n    :rtype: Boolean\n=end\n    def book(start, end)\n \n    end\n \n \nend\n \n# Your MyCalendarTwo object will be instantiated \nand called as such:\n# obj = MyCalendarTwo.new()\n# param_1 = obj.book(start, end)","lang":"Ruby"},{"s":"class MyCalendarTwo\n    def initialize()\n \n    end\n \n \n=begin\n    :type start: Integer\n    :type end: Integer\n    :rtype: Boolean\n=end\n    def book(start, end)\n \n    end\n \n \nend\n \n# Your MyCalendarTwo object will be instantiated \nand called as such:\n# obj = MyCalendarTwo.new()\n# param_1 = obj.book(start, end)","lang":"Ruby"}],"page":"731/1581","h":"731. 我的日程安排表 II","d":"<div class=\"notranslate\"><p>实现一个 <code>MyCalendar</code> 类来存放你的日程安排。如果要添加的时间内不会导致三重预订时，则可以存储这个新的日程安排。</p>\n\n<p><code>MyCalendar</code> 有一个 <code>book(int start, int end)</code>方法。它意味着在 <code>start</code> 到 <code>end</code> 时间内增加一个日程安排，注意，这里的时间是半开区间，即 <code>[start, end)</code>, 实数&nbsp;<code>x</code> 的范围为， &nbsp;<code>start &lt;= x &lt; end</code>。</p>\n\n<p>当三个日程安排有一些时间上的交叉时（例如三个日程安排都在同一时间内），就会产生三重预订。</p>\n\n<p>每次调用 <code>MyCalendar.book</code>方法时，如果可以将日程安排成功添加到日历中而不会导致三重预订，返回 <code>true</code>。否则，返回 <code>false</code> 并且不要将该日程安排添加到日历中。</p>\n\n<p>请按照以下步骤调用<code>MyCalendar</code> 类: <code>MyCalendar cal = new MyCalendar();</code> <code>MyCalendar.book(start, end)</code></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>MyCalendar();\nMyCalendar.book(10, 20); // returns true\nMyCalendar.book(50, 60); // returns true\nMyCalendar.book(10, 40); // returns true\nMyCalendar.book(5, 15); // returns false\nMyCalendar.book(5, 10); // returns true\nMyCalendar.book(25, 55); // returns true\n<strong>解释：</strong> \n前两个日程安排可以添加至日历中。 第三个日程安排会导致双重预订，但可以添加至日历中。\n第四个日程安排活动（5,15）不能添加至日历中，因为它会导致三重预订。\n第五个日程安排（5,10）可以添加至日历中，因为它未使用已经双重预订的时间10。\n第六个日程安排（25,55）可以添加至日历中，因为时间 [25,40] 将和第三个日程安排双重预订；\n时间 [40,50] 将单独预订，时间 [50,55）将和第二个日程安排双重预订。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>每个测试用例，调用&nbsp;<code>MyCalendar.book</code>&nbsp;函数最多不超过&nbsp;<code>1000</code>次。</li>\n\t<li>调用函数&nbsp;<code>MyCalendar.book(start, end)</code>时，&nbsp;<code>start</code> 和&nbsp;<code>end</code> 的取值范围为&nbsp;<code>[0, 10^9]</code>。</li>\n</ul>\n</div>","l":"中等","s":"class MyCalendarTwo {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $start\n     * @param Integer $end\n     * @return Boolean\n     */\n    function book($start, $end) {\n        \n    }\n}\n \n/**\n * Your MyCalendarTwo object will be instantiated \nand called as such:\n * $obj = MyCalendarTwo();\n * $ret_1 = $obj->book($start, $end);\n */","lang":"PHP","href":"https://leetcode-cn.com/problems/my-calendar-ii/","bb":{"x":445,"y":40,"w":116,"h":28}}

