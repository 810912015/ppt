{"ls":[{"s":"class Solution {\n    public int numMatchingSubseq(String S, String[] \nwords) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def numMatchingSubseq(self, S, words):\n        \"\"\"\n        :type S: str\n        :type words: List[str]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def numMatchingSubseq(self, S: str, words: List\n[str]) -> int:","lang":"Python3"},{"s":"int numMatchingSubseq(char * S, char ** words, int \nwordsSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int NumMatchingSubseq(string S, string[] \nwords) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} S\n * @param {string[]} words\n * @return {number}\n */\nvar numMatchingSubseq = function(S, words) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} s\n# @param {String[]} words\n# @return {Integer}\ndef num_matching_subseq(s, words)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func numMatchingSubseq(_ S: String, _ words: \n[String]) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func numMatchingSubseq(S string, words []string) \nint {\n \n}","lang":"Go"},{"s":"object Solution {\n    def numMatchingSubseq(S: String, words: Array\n[String]): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun numMatchingSubseq(S: String, words: \nArray<String>): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn num_matching_subseq(s: String, words: \nVec<String>) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param String $S\n     * @param String[] $words\n     * @return Integer\n     */\n    function numMatchingSubseq($S, $words) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param String $S\n     * @param String[] $words\n     * @return Integer\n     */\n    function numMatchingSubseq($S, $words) {\n        \n    }\n}","lang":"PHP"}],"page":"792/1581","h":"792. 匹配子序列的单词数","d":"<div class=\"notranslate\"><p>给定字符串 <code>S</code> 和单词字典 <code>words</code>, 求&nbsp;<code>words[i]</code>&nbsp;中是&nbsp;<code>S</code>&nbsp;的子序列的单词个数。</p>\n\n<pre><strong>示例:</strong>\n<strong>输入:</strong> \nS = \"abcde\"\nwords = [\"a\", \"bb\", \"acd\", \"ace\"]\n<strong>输出:</strong> 3\n<strong>解释:</strong> 有三个是&nbsp;S 的子序列的单词: \"a\", \"acd\", \"ace\"。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li>所有在<code>words</code>和&nbsp;<code>S</code>&nbsp;里的单词都只由小写字母组成。</li>\n\t<li><code>S</code> 的长度在&nbsp;<code>[1, 50000]</code>。</li>\n\t<li><code>words</code>&nbsp;的长度在&nbsp;<code>[1, 5000]</code>。</li>\n\t<li><code>words[i]</code>的长度在<code>[1, 50]</code>。</li>\n</ul>\n</div>","l":"中等","s":"# @param {String} s\n# @param {String[]} words\n# @return {Integer}\ndef num_matching_subseq(s, words)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/number-of-matching-subsequences/","bb":{"x":445,"y":40,"w":116,"h":28}}

