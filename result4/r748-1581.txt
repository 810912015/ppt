{"ls":[{"s":"# @param {String} license_plate\n# @param {String[]} words\n# @return {String}\ndef shortest_completing_word(license_plate, words)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func shortestCompletingWord(_ licensePlate: \nString, _ words: [String]) -> String {\n        \n    }\n}","lang":"Swift"},{"s":"func shortestCompletingWord(licensePlate string, \nwords []string) string {\n \n}","lang":"Go"},{"s":"object Solution {\n    def shortestCompletingWord(licensePlate: String,\n words: Array[String]): String = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun shortestCompletingWord(licensePlate: String,\n words: Array<String>): String {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn shortest_completing_word(license_plate: \nString, words: Vec<String>) -> String {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public String shortestCompletingWord(String \nlicensePlate, String[] words) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def shortestCompletingWord(self, licensePlate, \nwords):\n        \"\"\"\n        :type licensePlate: str\n        :type words: List[str]\n        :rtype: str\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def shortestCompletingWord(self, licensePlate: \nstr, words: List[str]) -> str:","lang":"Python3"},{"s":"char * shortestCompletingWord(char * licensePlate, \nchar ** words, int wordsSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public string ShortestCompletingWord(string \nlicensePlate, string[] words) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} licensePlate\n * @param {string[]} words\n * @return {string}\n */\nvar shortestCompletingWord = function(licensePlate, \nwords) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} license_plate\n# @param {String[]} words\n# @return {String}\ndef shortest_completing_word(license_plate, words)\n \nend","lang":"Ruby"},{"s":"# @param {String} license_plate\n# @param {String[]} words\n# @return {String}\ndef shortest_completing_word(license_plate, words)\n \nend","lang":"Ruby"}],"page":"748/1581","h":"748. 最短完整词","d":"<div class=\"notranslate\"><p>如果单词列表（<code>words</code>）中的一个单词包含牌照（<code>licensePlate</code>）中所有的字母，那么我们称之为完整词。在所有完整词中，最短的单词我们称之为最短完整词。</p>\n\n<p>单词在匹配牌照中的字母时不区分大小写，比如牌照中的&nbsp;<code>\"P\"</code>&nbsp;依然可以匹配单词中的&nbsp;<code>\"p\"</code>&nbsp;字母。</p>\n\n<p>我们保证一定存在一个最短完整词。当有多个单词都符合最短完整词的匹配条件时取单词列表中最靠前的一个。</p>\n\n<p>牌照中可能包含多个相同的字符，比如说：对于牌照 <code>\"PP\"</code>，单词&nbsp;<code>\"pair\"</code>&nbsp;无法匹配，但是&nbsp;<code>\"supper\"</code>&nbsp;可以匹配。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>licensePlate = \"1s3 PSt\", words = [\"step\", \"steps\", \"stripe\", \"stepple\"]\n<strong>输出：</strong>\"steps\"\n<strong>说明：</strong>最短完整词应该包括 \"s\"、\"p\"、\"s\" 以及 \"t\"。对于 \"step\" 它只包含一个 \"s\" 所以它不符合条件。同时在匹配过程中我们忽略牌照中的大小写。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>licensePlate = \"1s3 456\", words = [\"looks\", \"pest\", \"stew\", \"show\"]\n<strong>输出：</strong>\"pest\"\n<strong>说明：</strong>存在 3 个包含字母 \"s\" 且有着最短长度的完整词，但我们返回最先出现的完整词。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>牌照<code>（licensePlate）</code>的长度在区域<code>[1, 7]</code>中。</li>\n\t<li>牌照<code>（licensePlate）</code>将会包含数字、空格、或者字母（大写和小写）。</li>\n\t<li>单词列表<code>（words）</code>长度在区间&nbsp;<code>[10, 1000]</code>&nbsp;中。</li>\n\t<li>每一个单词&nbsp;<code>words[i]</code>&nbsp;都是小写，并且长度在区间&nbsp;<code>[1, 15]</code>&nbsp;中。</li>\n</ol>\n\n<p>&nbsp;</p>\n</div>","l":"简单","s":"class Solution {\n \n    /**\n     * @param String $licensePlate\n     * @param String[] $words\n     * @return String\n     */\n    function shortestCompletingWord($licensePlate, \n$words) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/shortest-completing-word/","bb":{"x":445,"y":40,"w":116,"h":28}}

