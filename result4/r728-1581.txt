{"ls":[{"s":"class Solution {\n    public List<Integer> selfDividingNumbers(int \nleft, int right) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def selfDividingNumbers(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: List[int]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def selfDividingNumbers(self, left: int, right: \nint) -> List[int]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, \nassume caller calls free().\n */\nint* selfDividingNumbers(int left, int right, int* \nreturnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<int> SelfDividingNumbers(int left, \nint right) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} left\n * @param {number} right\n * @return {number[]}\n */\nvar selfDividingNumbers = function(left, right) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer} left\n# @param {Integer} right\n# @return {Integer[]}\ndef self_dividing_numbers(left, right)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func selfDividingNumbers(_ left: Int, _ right: \nInt) -> [Int] {\n        \n    }\n}","lang":"Swift"},{"s":"func selfDividingNumbers(left int, right int) []int \n{\n \n}","lang":"Go"},{"s":"object Solution {\n    def selfDividingNumbers(left: Int, right: Int): \nList[Int] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun selfDividingNumbers(left: Int, right: Int): \nList<Int> {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn self_dividing_numbers(left: i32, right: \ni32) -> Vec<i32> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer $left\n     * @param Integer $right\n     * @return Integer[]\n     */\n    function selfDividingNumbers($left, $right) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer $left\n     * @param Integer $right\n     * @return Integer[]\n     */\n    function selfDividingNumbers($left, $right) {\n        \n    }\n}","lang":"PHP"}],"page":"728/1581","h":"728. 自除数","d":"<div class=\"notranslate\"><p><em>自除数&nbsp;</em>是指可以被它包含的每一位数除尽的数。</p>\n\n<p>例如，128 是一个自除数，因为&nbsp;<code>128 % 1 == 0</code>，<code>128 % 2 == 0</code>，<code>128 % 8 == 0</code>。</p>\n\n<p>还有，自除数不允许包含 0 。</p>\n\n<p>给定上边界和下边界数字，输出一个列表，列表的元素是边界（含边界）内所有的自除数。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong> \n上边界left = 1, 下边界right = 22\n<strong>输出：</strong> [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li>每个输入参数的边界满足&nbsp;<code>1 &lt;= left &lt;= right &lt;= 10000</code>。</li>\n</ul>\n</div>","l":"简单","s":"# @param {Integer} left","lang":"Ruby","href":"https://leetcode-cn.com/problems/self-dividing-numbers/","bb":{"x":445,"y":40,"w":116,"h":28}}

