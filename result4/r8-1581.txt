{"ls":[{"s":"/**\n * @param {string} str\n * @return {number}\n */\nvar myAtoi = function(str) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} str\n# @return {Integer}\ndef my_atoi(str)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func myAtoi(_ str: String) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func myAtoi(str string) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def myAtoi(str: String): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun myAtoi(str: String): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"class Solution {\n    public int myAtoi(String str) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def myAtoi(self, str: str) -> int:","lang":"Python3"},{"s":"int myAtoi(char * str){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int MyAtoi(string str) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} str\n * @return {number}\n */\nvar myAtoi = function(str) {\n \n};","lang":"JavaScript"}],"page":"8/1581","h":"8. 字符串转换整数 (atoi)","d":"<div class=\"notranslate\"><p>请你来实现一个&nbsp;<code>atoi</code>&nbsp;函数，使其能将字符串转换成整数。</p>\n\n<p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。</p>\n\n<p>当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p>\n\n<p>该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。</p>\n\n<p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。</p>\n\n<p>在任何情况下，若函数不能进行有效的转换时，请返回 0。</p>\n\n<p><strong>说明：</strong></p>\n\n<p>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为&nbsp;[−2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>− 1]。如果数值超过这个范围，请返回 &nbsp;INT_MAX (2<sup>31&nbsp;</sup>− 1) 或&nbsp;INT_MIN (−2<sup>31</sup>) 。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> \"42\"\n<strong>输出:</strong> 42\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> \"   -42\"\n<strong>输出:</strong> -42\n<strong>解释: </strong>第一个非空白字符为 '-', 它是一个负号。\n&nbsp;    我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入:</strong> \"4193 with words\"\n<strong>输出:</strong> 4193\n<strong>解释:</strong> 转换截止于数字 '3' ，因为它的下一个字符不为数字。\n</pre>\n\n<p><strong>示例&nbsp;4:</strong></p>\n\n<pre><strong>输入:</strong> \"words and 987\"\n<strong>输出:</strong> 0\n<strong>解释:</strong> 第一个非空字符是 'w', 但它不是数字或正、负号。\n     因此无法执行有效的转换。</pre>\n\n<p><strong>示例&nbsp;5:</strong></p>\n\n<pre><strong>输入:</strong> \"-91283472332\"\n<strong>输出:</strong> -2147483648\n<strong>解释:</strong> 数字 \"-91283472332\" 超过 32 位有符号整数范围。 \n&nbsp;    因此返回 INT_MIN (−2<sup>31</sup>) 。\n</pre>\n</div>","l":"中等","s":"impl Solution {","lang":"Rust","href":"https://leetcode-cn.com/problems/string-to-integer-atoi/","bb":{"x":445,"y":40,"w":116,"h":28}}

