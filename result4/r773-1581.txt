{"ls":[{"s":"class Solution {\n    public int slidingPuzzle(int[][] board) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def slidingPuzzle(self, board: List[List[int]]) \n-> int:","lang":"Python3"},{"s":"int slidingPuzzle(int** board, int boardSize, int* \nboardColSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int SlidingPuzzle(int[][] board) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} board\n * @return {number}\n */\nvar slidingPuzzle = function(board) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[][]} board\n# @return {Integer}\ndef sliding_puzzle(board)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func slidingPuzzle(_ board: [[Int]]) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func slidingPuzzle(board [][]int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def slidingPuzzle(board: Array[Array[Int]]): \nInt = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun slidingPuzzle(board: Array<IntArray>): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn sliding_puzzle(board: Vec<Vec<i32>>) -> \ni32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[][] $board\n     * @return Integer\n     */\n    function slidingPuzzle($board) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[][] $board\n     * @return Integer\n     */\n    function slidingPuzzle($board) {\n        \n    }\n}","lang":"PHP"}],"page":"773/1581","h":"773. 滑动谜题","d":"<div class=\"notranslate\"><p>在一个 2 x 3 的板上（<code>board</code>）有 5 块砖瓦，用数字 <code>1~5</code> 来表示, 以及一块空缺用&nbsp;<code>0</code>&nbsp;来表示.</p>\n\n<p>一次移动定义为选择&nbsp;<code>0</code>&nbsp;与一个相邻的数字（上下左右）进行交换.</p>\n\n<p>最终当板&nbsp;<code>board</code>&nbsp;的结果是&nbsp;<code>[[1,2,3],[4,5,0]]</code>&nbsp;谜板被解开。</p>\n\n<p>给出一个谜板的初始状态，返回最少可以通过多少次移动解开谜板，如果不能解开谜板，则返回 -1 。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>board = [[1,2,3],[4,0,5]]\n<strong>输出：</strong>1\n<strong>解释：</strong>交换 0 和 5 ，1 步完成\n</pre>\n\n<pre><strong>输入：</strong>board = [[1,2,3],[5,4,0]]\n<strong>输出：</strong>-1\n<strong>解释：</strong>没有办法完成谜板\n</pre>\n\n<pre><strong>输入：</strong>board = [[4,1,2],[5,0,3]]\n<strong>输出：</strong>5\n<strong>解释：</strong>\n最少完成谜板的最少移动次数是 5 ，\n一种移动路径:\n尚未移动: [[4,1,2],[5,0,3]]\n移动 1 次: [[4,1,2],[0,5,3]]\n移动 2 次: [[0,1,2],[4,5,3]]\n移动 3 次: [[1,0,2],[4,5,3]]\n移动 4 次: [[1,2,0],[4,5,3]]\n移动 5 次: [[1,2,3],[4,5,0]]\n</pre>\n\n<pre><strong>输入：</strong>board = [[3,2,4],[1,5,0]]\n<strong>输出：</strong>14\n</pre>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>board</code>&nbsp;是一个如上所述的 2 x 3 的数组.</li>\n\t<li><code>board[i][j]</code>&nbsp;是一个&nbsp;<code>[0, 1, 2, 3, 4, 5]</code>&nbsp;的排列.</li>\n</ul>\n</div>","l":"困难","s":"# @param {Integer[][]} board\n# @return {Integer}\ndef sliding_puzzle(board)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/sliding-puzzle/","bb":{"x":445,"y":40,"w":116,"h":28}}

