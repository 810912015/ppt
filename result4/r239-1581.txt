{"ls":[{"s":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer[]}\ndef max_sliding_window(nums, k)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func maxSlidingWindow(_ nums: [Int], _ k: Int) \n-> [Int] {\n        \n    }\n}","lang":"Swift"},{"s":"func maxSlidingWindow(nums []int, k int) []int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def maxSlidingWindow(nums: Array[Int], k: Int): \nArray[Int] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun maxSlidingWindow(nums: IntArray, k: Int): \nIntArray {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn max_sliding_window(nums: Vec<i32>, k: \ni32) -> Vec<i32> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int[] maxSlidingWindow(int[] nums, int k)\n {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def maxSlidingWindow(self, nums: List[int], k: \nint) -> List[int]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, \nassume caller calls free().\n */\nint* maxSlidingWindow(int* nums, int numsSize, int \nk, int* returnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int[] MaxSlidingWindow(int[] nums, int k)\n {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar maxSlidingWindow = function(nums, k) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer[]}\ndef max_sliding_window(nums, k)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer[]}\ndef max_sliding_window(nums, k)\n \nend","lang":"Ruby"}],"page":"239/1581","h":"239. 滑动窗口最大值","d":"<div class=\"notranslate\"><p>给定一个数组 <em>nums</em>，有一个大小为&nbsp;<em>k&nbsp;</em>的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 <em>k</em>&nbsp;个数字。滑动窗口每次只向右移动一位。</p>\n\n<p>返回滑动窗口中的最大值。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> <em>nums</em> = <code>[1,3,-1,-3,5,3,6,7]</code>, 和 <em>k</em> = 3\n<strong>输出: </strong><code>[3,3,5,5,6,7] \n<strong>解释: \n</strong></code>\n  滑动窗口的位置                最大值\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<p>你可以假设 <em>k </em>总是有效的，在输入数组不为空的情况下，1 ≤ k ≤&nbsp;输入数组的大小。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong></p>\n\n<p>你能在线性时间复杂度内解决此题吗？</p>\n</div>","l":"困难","s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function maxSlidingWindow($nums, $k) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/sliding-window-maximum/","bb":{"x":445,"y":40,"w":116,"h":28}}

