{"ls":[{"s":"class MapSum {\n \n    /** Initialize your data structure here. */\n    public MapSum() {\n \n    }\n    \n    public void insert(String key, int val) {\n \n    }\n    \n    public int sum(String prefix) {\n \n    }\n}\n \n/**\n * Your MapSum object will be instantiated and \ncalled as such:\n * MapSum obj = new MapSum();\n * obj.insert(key,val);\n * int param_2 = obj.sum(prefix);\n */","lang":"Java"},{"s":"class MapSum(object):\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n \n    def insert(self, key, val):\n        \"\"\"\n        :type key: str\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n \n    def sum(self, prefix):\n        \"\"\"\n        :type prefix: str\n        :rtype: int\n        \"\"\"\n        \n \n \n# Your MapSum object will be instantiated and \ncalled as such:","lang":"Python"},{"s":"class MapSum:\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n \n    def insert(self, key: str, val: int) -> None:\n        \n \n    def sum(self, prefix: str) -> int:\n        \n \n \n# Your MapSum object will be instantiated and \ncalled as such:\n# obj = MapSum()\n# obj.insert(key,val)\n# param_2 = obj.sum(prefix)","lang":"Python3"},{"s":"typedef struct {\n    \n} MapSum;\n \n/** Initialize your data structure here. */\n \nMapSum* mapSumCreate() {\n    \n}\n \nvoid mapSumInsert(MapSum* obj, char * key, int val) \n{\n  \n}\n \nint mapSumSum(MapSum* obj, char * prefix) {\n  \n}\n \nvoid mapSumFree(MapSum* obj) {\n    \n}\n \n/**\n * Your MapSum struct will be instantiated and \ncalled as such:","lang":"C"},{"s":"public class MapSum {\n \n    /** Initialize your data structure here. */\n    public MapSum() {\n \n    }\n    \n    public void Insert(string key, int val) {\n \n    }\n    \n    public int Sum(string prefix) {\n \n    }\n}\n \n/**\n * Your MapSum object will be instantiated and \ncalled as such:\n * MapSum obj = new MapSum();\n * obj.Insert(key,val);\n * int param_2 = obj.Sum(prefix);\n */","lang":"C#"},{"s":"/**\n * Initialize your data structure here.\n */\nvar MapSum = function() {\n \n};\n \n/** \n * @param {string} key \n * @param {number} val\n * @return {void}\n */\nMapSum.prototype.insert = function(key, val) {\n \n};\n \n/** \n * @param {string} prefix\n * @return {number}\n */\nMapSum.prototype.sum = function(prefix) {\n \n};\n \n/**\n * Your MapSum object will be instantiated and ","lang":"JavaScript"},{"s":"class MapSum\n \n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n \n    end\n \n \n=begin\n    :type key: String\n    :type val: Integer\n    :rtype: Void\n=end\n    def insert(key, val)\n \n    end\n \n \n=begin\n    :type prefix: String\n    :rtype: Integer\n=end\n    def sum(prefix)\n ","lang":"Ruby"},{"s":"class MapSum\n \n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n \n    end\n \n \n=begin\n    :type key: String\n    :type val: Integer\n    :rtype: Void\n=end\n    def insert(key, val)\n \n    end\n \n \n=begin\n    :type prefix: String\n    :rtype: Integer\n=end\n    def sum(prefix)\n ","lang":"Ruby"},{"s":"type MapSum struct {\n \n}\n \n \n/** Initialize your data structure here. */\nfunc Constructor() MapSum {\n \n}\n \n \nfunc (this *MapSum) Insert(key string, val int)  {\n \n}\n \n \nfunc (this *MapSum) Sum(prefix string) int {\n \n}\n \n \n/**\n * Your MapSum object will be instantiated and \ncalled as such:\n * obj := Constructor();\n * obj.Insert(key,val);","lang":"Go"},{"s":"class MapSum() {\n \n    /** Initialize your data structure here. */\n \n \n    def insert(key: String, `val`: Int) {\n \n    }\n \n    def sum(prefix: String): Int = {\n \n    }\n \n}\n \n/**\n * Your MapSum object will be instantiated and \ncalled as such:\n * var obj = new MapSum()\n * obj.insert(key,`val`)\n * var param_2 = obj.sum(prefix)\n */","lang":"Scala"},{"s":"class MapSum() {\n \n    /** Initialize your data structure here. */\n \n \n    fun insert(key: String, `val`: Int) {\n \n    }\n \n    fun sum(prefix: String): Int {\n \n    }\n \n}\n \n/**\n * Your MapSum object will be instantiated and \ncalled as such:\n * var obj = MapSum()\n * obj.insert(key,`val`)\n * var param_2 = obj.sum(prefix)\n */","lang":"Kotlin"},{"s":"struct MapSum {\n \n}\n \n \n/** \n * `&self` means the method takes an immutable \nreference.\n * If you need a mutable reference, change it to `&\nmut self` instead.\n */\nimpl MapSum {\n \n    /** Initialize your data structure here. */\n    fn new() -> Self {\n        \n    }\n    \n    fn insert(&self, key: String, val: i32) {\n        \n    }\n    \n    fn sum(&self, prefix: String) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class MapSum {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param String $key\n     * @param Integer $val\n     * @return NULL\n     */\n    function insert($key, $val) {\n        \n    }\n  \n    /**\n     * @param String $prefix\n     * @return Integer\n     */\n    function sum($prefix) {\n        \n    }\n}\n ","lang":"PHP"},{"s":"class MapSum {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param String $key\n     * @param Integer $val\n     * @return NULL\n     */\n    function insert($key, $val) {\n        \n    }\n  \n    /**\n     * @param String $prefix\n     * @return Integer\n     */\n    function sum($prefix) {\n        \n    }\n}\n ","lang":"PHP"}],"page":"677/1581","h":"677. 键值映射","d":"<div class=\"notranslate\"><p>实现一个 MapSum 类里的两个方法，<code>insert</code>&nbsp;和&nbsp;<code>sum</code>。</p>\n\n<p>对于方法&nbsp;<code>insert</code>，你将得到一对（字符串，整数）的键值对。字符串表示键，整数表示值。如果键已经存在，那么原来的键值对将被替代成新的键值对。</p>\n\n<p>对于方法 <code>sum</code>，你将得到一个表示前缀的字符串，你需要返回所有以该前缀开头的键的值的总和。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>输入: insert(\"apple\", 3), 输出: Null\n输入: sum(\"ap\"), 输出: 3\n输入: insert(\"app\", 2), 输出: Null\n输入: sum(\"ap\"), 输出: 5\n</pre>\n</div>","l":"中等","s":"class MapSum\n \n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n \n    end\n \n \n=begin\n    :type key: String\n    :type val: Integer\n    :rtype: Void\n=end\n    def insert(key, val)\n \n    end\n \n \n=begin\n    :type prefix: String\n    :rtype: Integer\n=end\n    def sum(prefix)\n ","lang":"Ruby","href":"https://leetcode-cn.com/problems/map-sum-pairs/","bb":{"x":445,"y":40,"w":116,"h":28}}

