{"ls":[{"s":"# @param {Integer[][]} graph\n# @return {Integer}\ndef shortest_path_length(graph)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func shortestPathLength(_ graph: [[Int]]) -> \nInt {\n        \n    }\n}","lang":"Swift"},{"s":"func shortestPathLength(graph [][]int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def shortestPathLength(graph: Array[Array[Int]])\n: Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun shortestPathLength(graph: Array<IntArray>): \nInt {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn shortest_path_length(graph: \nVec<Vec<i32>>) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int shortestPathLength(int[][] graph) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def shortestPathLength(self, graph):\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def shortestPathLength(self, graph: List[List\n[int]]) -> int:","lang":"Python3"},{"s":"int shortestPathLength(int** graph, int graphSize, \nint* graphColSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int ShortestPathLength(int[][] graph) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} graph\n * @return {number}\n */\nvar shortestPathLength = function(graph) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[][]} graph\n# @return {Integer}\ndef shortest_path_length(graph)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[][]} graph\n# @return {Integer}\ndef shortest_path_length(graph)\n \nend","lang":"Ruby"}],"page":"847/1581","h":"847. 访问所有节点的最短路径","d":"<div class=\"notranslate\"><p>给出&nbsp;<code>graph</code>&nbsp;为有 N 个节点（编号为&nbsp;<code>0, 1, 2, ..., N-1</code>）的无向连通图。&nbsp;</p>\n\n<p><code>graph.length = N</code>，且只有节点 <code>i</code>&nbsp;和 <code>j</code>&nbsp;连通时，<code>j != i</code>&nbsp;在列表&nbsp;<code>graph[i]</code>&nbsp;中恰好出现一次。</p>\n\n<p>返回能够访问所有节点的最短路径的长度。你可以在任一节点开始和停止，也可以多次重访节点，并且可以重用边。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[[1,2,3],[0],[0],[0]]\n<strong>输出：</strong>4\n<strong>解释：</strong>一个可能的路径为 [1,0,2,0,3]</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[[1],[0,2,4],[1,3,4],[2],[1,2]]\n<strong>输出：</strong>4\n<strong>解释：</strong>一个可能的路径为 [0,1,4,2,3]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= graph.length &lt;= 12</code></li>\n\t<li><code>0 &lt;= graph[i].length &lt;&nbsp;graph.length</code></li>\n</ol>\n</div>","l":"困难","s":"class Solution {","lang":"PHP","href":"https://leetcode-cn.com/problems/shortest-path-visiting-all-nodes/","bb":{"x":445,"y":40,"w":116,"h":28}}

