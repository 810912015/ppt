{"ls":[{"s":"# @param {Integer[]} nums\n# @return {Boolean}\ndef circular_array_loop(nums)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func circularArrayLoop(_ nums: [Int]) -> Bool {\n        \n    }\n}","lang":"Swift"},{"s":"func circularArrayLoop(nums []int) bool {\n \n}","lang":"Go"},{"s":"object Solution {\n    def circularArrayLoop(nums: Array[Int]): \nBoolean = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun circularArrayLoop(nums: IntArray): Boolean {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn circular_array_loop(nums: Vec<i32>) -> \nbool {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public boolean circularArrayLoop(int[] nums) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def circularArrayLoop(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def circularArrayLoop(self, nums: List[int]) -> \nbool:","lang":"Python3"},{"s":"bool circularArrayLoop(int* nums, int numsSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public bool CircularArrayLoop(int[] nums) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar circularArrayLoop = function(nums) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums\n# @return {Boolean}\ndef circular_array_loop(nums)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[]} nums\n# @return {Boolean}\ndef circular_array_loop(nums)\n \nend","lang":"Ruby"}],"page":"457/1581","h":"457. 环形数组循环","d":"<div class=\"notranslate\"><p>给定一个含有正整数和负整数的<strong>环形</strong>数组&nbsp;<code>nums</code>。 如果某个索引中的数 <em>k</em>&nbsp;为正数，则向前移动 <em>k</em>&nbsp;个索引。相反，如果是负数 (<em>-k</em>)，则向后移动 <em>k</em>&nbsp;个索引。因为数组是环形的，所以可以假设最后一个元素的下一个元素是第一个元素，而第一个元素的前一个元素是最后一个元素。</p>\n\n<p>确定 <code>nums</code>&nbsp;中是否存在循环（或周期）。循环必须在相同的索引处开始和结束并且循环长度 &gt; 1。此外，一个循环中的所有运动都必须沿着同一方向进行。换句话说，一个循环中不能同时包括向前的运动和向后的运动。<br>\n&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[2,-1,1,2,2]\n<strong>输出：</strong>true\n<strong>解释：</strong>存在循环，按索引 0 -&gt; 2 -&gt; 3 -&gt; 0 。循环长度为 3 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[-1,2]\n<strong>输出：</strong>false\n<strong>解释：</strong>按索引 1 -&gt; 1 -&gt; 1 ... 的运动无法构成循环，因为循环的长度为 1 。根据定义，循环的长度必须大于 1 。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入：</strong>[-2,1,-1,-2,-2]\n<strong>输出：</strong>false\n<strong>解释：</strong>按索引 1 -&gt; 2 -&gt; 1 -&gt; ... 的运动无法构成循环，因为按索引 1 -&gt; 2 的运动是向前的运动，而按索引 2 -&gt; 1 的运动是向后的运动。一个循环中的所有运动都必须沿着同一方向进行。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>-1000 ≤&nbsp;nums[i] ≤&nbsp;1000</li>\n\t<li>nums[i] ≠&nbsp;0</li>\n\t<li>0 ≤&nbsp;nums.length ≤ 5000</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong></p>\n\n<p>你能写出时间时间复杂度为 <strong>O(n)</strong>&nbsp;和额外空间复杂度为 <strong>O(1)</strong> 的算法吗？</p>\n</div>","l":"中等","s":"class Solution {","lang":"PHP","href":"https://leetcode-cn.com/problems/circular-array-loop/","bb":{"x":445,"y":40,"w":116,"h":28}}

