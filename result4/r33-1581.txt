{"ls":[{"s":"class Solution {\n    public int search(int[] nums, int target) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def search(self, nums: List[int], target: int) \n-> int:","lang":"Python3"},{"s":"int search(int* nums, int numsSize, int target){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int Search(int[] nums, int target) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function(nums, target) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef search(nums, target)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func search(_ nums: [Int], _ target: Int) -> \nInt {\n        \n    }\n}","lang":"Swift"},{"s":"func search(nums []int, target int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def search(nums: Array[Int], target: Int): Int \n= {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun search(nums: IntArray, target: Int): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn search(nums: Vec<i32>, target: i32) -> \ni32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function search($nums, $target) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function search($nums, $target) {\n        \n    }\n}","lang":"PHP"}],"page":"33/1581","h":"33. 搜索旋转排序数组","d":"<div class=\"notranslate\"><p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p>\n\n<p>( 例如，数组&nbsp;<code>[0,1,2,4,5,6,7]</code>&nbsp;可能变为&nbsp;<code>[4,5,6,7,0,1,2]</code>&nbsp;)。</p>\n\n<p>搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回&nbsp;<code>-1</code>&nbsp;。</p>\n\n<p>你可以假设数组中不存在重复的元素。</p>\n\n<p>你的算法时间复杂度必须是&nbsp;<em>O</em>(log&nbsp;<em>n</em>) 级别。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> nums = [<code>4,5,6,7,0,1,2]</code>, target = 0\n<strong>输出:</strong> 4\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> nums = [<code>4,5,6,7,0,1,2]</code>, target = 3\n<strong>输出:</strong> -1</pre>\n</div>","l":"中等","s":"# @param {Integer[]} nums","lang":"Ruby","href":"https://leetcode-cn.com/problems/search-in-rotated-sorted-array/","bb":{"x":445,"y":40,"w":116,"h":28}}

