{"ls":[{"s":"class Solution {\n    public List<String> ambiguousCoordinates(String \nS) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def ambiguousCoordinates(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: List[str]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def ambiguousCoordinates(self, S: str) -> List\n[str]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, \nassume caller calls free().\n */\nchar ** ambiguousCoordinates(char * S, int* \nreturnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<string> AmbiguousCoordinates\n(string S) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} S\n * @return {string[]}\n */\nvar ambiguousCoordinates = function(S) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} s\n# @return {String[]}\ndef ambiguous_coordinates(s)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func ambiguousCoordinates(_ S: String) -> \n[String] {\n        \n    }\n}","lang":"Swift"},{"s":"func ambiguousCoordinates(S string) []string {\n \n}","lang":"Go"},{"s":"object Solution {\n    def ambiguousCoordinates(S: String): List\n[String] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun ambiguousCoordinates(S: String): \nList<String> {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn ambiguous_coordinates(s: String) -> \nVec<String> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param String $S\n     * @return String[]\n     */\n    function ambiguousCoordinates($S) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param String $S\n     * @return String[]\n     */\n    function ambiguousCoordinates($S) {\n        \n    }\n}","lang":"PHP"}],"page":"816/1581","h":"816. 模糊坐标","d":"<div class=\"notranslate\"><p>我们有一些二维坐标，如&nbsp;<code>\"(1, 3)\"</code>&nbsp;或&nbsp;<code>\"(2, 0.5)\"</code>，然后我们移除所有逗号，小数点和空格，得到一个字符串<code>S</code>。返回所有可能的原始字符串到一个列表中。</p>\n\n<p>原始的坐标表示法不会存在多余的零，所以不会出现类似于\"00\", \"0.0\", \"0.00\", \"1.0\", \"001\", \"00.01\"或一些其他更小的数来表示坐标。此外，一个小数点前至少存在一个数，所以也不会出现“.1”形式的数字。</p>\n\n<p>最后返回的列表可以是任意顺序的。而且注意返回的两个数字中间（逗号之后）都有一个空格。</p>\n\n<p>&nbsp;</p>\n\n<pre><strong>示例 1:</strong>\n<strong>输入:</strong> \"(123)\"\n<strong>输出:</strong> [\"(1, 23)\", \"(12, 3)\", \"(1.2, 3)\", \"(1, 2.3)\"]\n</pre>\n\n<pre><strong>示例 2:</strong>\n<strong>输入:</strong> \"(00011)\"\n<strong>输出:</strong> &nbsp;[\"(0.001, 1)\", \"(0, 0.011)\"]\n<strong>解释:</strong> \n0.0, 00, 0001 或 00.01 是不被允许的。\n</pre>\n\n<pre><strong>示例 3:</strong>\n<strong>输入:</strong> \"(0123)\"\n<strong>输出:</strong> [\"(0, 123)\", \"(0, 12.3)\", \"(0, 1.23)\", \"(0.1, 23)\", \"(0.1, 2.3)\", \"(0.12, 3)\"]\n</pre>\n\n<pre><strong>示例 4:</strong>\n<strong>输入:</strong> \"(100)\"\n<strong>输出:</strong> [(10, 0)]\n<strong>解释:</strong> \n1.0 是不被允许的。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示: </strong></p>\n\n<ul>\n\t<li><code>4 &lt;= S.length &lt;= 12</code>.</li>\n\t<li><code>S[0]</code> = \"(\", <code>S[S.length - 1]</code> = \")\", 且字符串&nbsp;<code>S</code>&nbsp;中的其他元素都是数字。</li>\n</ul>\n\n<p>&nbsp;</p>\n</div>","l":"中等","s":"# @param {String} s\n# @return {String[]}\ndef ambiguous_coordinates(s)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/ambiguous-coordinates/","bb":{"x":445,"y":40,"w":116,"h":28}}

