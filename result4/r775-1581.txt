{"ls":[{"s":"# @param {Integer[]} a\n# @return {Boolean}\ndef is_ideal_permutation(a)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func isIdealPermutation(_ A: [Int]) -> Bool {\n        \n    }\n}","lang":"Swift"},{"s":"func isIdealPermutation(A []int) bool {\n \n}","lang":"Go"},{"s":"object Solution {\n    def isIdealPermutation(A: Array[Int]): Boolean \n= {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun isIdealPermutation(A: IntArray): Boolean {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn is_ideal_permutation(a: Vec<i32>) -> \nbool {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public boolean isIdealPermutation(int[] A) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def isIdealPermutation(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: bool\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def isIdealPermutation(self, A: List[int]) -> \nbool:","lang":"Python3"},{"s":"bool isIdealPermutation(int* A, int ASize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public bool IsIdealPermutation(int[] A) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} A\n * @return {boolean}\n */\nvar isIdealPermutation = function(A) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} a\n# @return {Boolean}\ndef is_ideal_permutation(a)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[]} a\n# @return {Boolean}\ndef is_ideal_permutation(a)\n \nend","lang":"Ruby"}],"page":"775/1581","h":"775. 全局倒置与局部倒置","d":"<div class=\"notranslate\"><p>数组&nbsp;<code>A</code>&nbsp;是&nbsp;<code>[0, 1, ..., N - 1]</code>&nbsp;的一种排列，<code>N</code> 是数组&nbsp;<code>A</code>&nbsp;的长度。全局倒置指的是 <code>i,j</code>&nbsp;满足&nbsp;<code>0 &lt;= i &lt; j &lt; N</code> 并且&nbsp;<code>A[i] &gt; A[j]</code>&nbsp;，局部倒置指的是 <code>i</code> 满足&nbsp;<code>0 &lt;= i &lt; N</code>&nbsp;并且&nbsp;<code>A[i] &gt; A[i+1]</code>&nbsp;。</p>\n\n<p>当数组&nbsp;<code>A</code>&nbsp;中全局倒置的数量等于局部倒置的数量时，返回 <code>true</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> A = [1,0,2]\n<strong>输出:</strong> true\n<strong>解释:</strong> 有 1 个全局倒置，和 1 个局部倒置。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> A = [1,2,0]\n<strong>输出:</strong> false\n<strong>解释:</strong> 有 2 个全局倒置，和 1 个局部倒置。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>A</code> 是&nbsp;<code>[0, 1, ..., A.length - 1]</code>&nbsp;的一种排列</li>\n\t<li><code>A</code> 的长度在&nbsp;<code>[1, 5000]</code>之间</li>\n\t<li>这个问题的时间限制已经减少了。</li>\n</ul>\n</div>","l":"中等","s":"class Solution {","lang":"PHP","href":"https://leetcode-cn.com/problems/global-and-local-inversions/","bb":{"x":445,"y":40,"w":116,"h":28}}

