{"ls":[{"s":"# @param {Integer[]} nums\n# @return {Integer}\ndef min_moves(nums)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func minMoves(_ nums: [Int]) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func minMoves(nums []int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def minMoves(nums: Array[Int]): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun minMoves(nums: IntArray): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn min_moves(nums: Vec<i32>) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int minMoves(int[] nums) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def minMoves(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def minMoves(self, nums: List[int]) -> int:","lang":"Python3"},{"s":"int minMoves(int* nums, int numsSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int MinMoves(int[] nums) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minMoves = function(nums) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums\n# @return {Integer}\ndef min_moves(nums)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[]} nums\n# @return {Integer}\ndef min_moves(nums)\n \nend","lang":"Ruby"}],"page":"453/1581","h":"453. 最小移动次数使数组元素相等","d":"<div class=\"notranslate\"><p>给定一个长度为 <em>n</em> 的<strong>非空</strong>整数数组，找到让数组所有元素相等的最小移动次数。每次移动可以使 <em>n</em> - 1 个元素增加 1。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>\n[1,2,3]\n\n<strong>输出:</strong>\n3\n\n<strong>解释:</strong>\n只需要3次移动（注意每次移动会增加两个元素的值）：\n\n[1,2,3]  =&gt;  [2,3,3]  =&gt;  [3,4,3]  =&gt;  [4,4,4]\n</pre>\n</div>","l":"简单","s":"","lang":"PHP","href":"https://leetcode-cn.com/problems/minimum-moves-to-equal-array-elements/","bb":{"x":445,"y":40,"w":116,"h":28}}

