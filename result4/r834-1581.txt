{"ls":[{"s":"class Solution {\n    public int[] sumOfDistancesInTree(int N, int[][]\n edges) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def sumOfDistancesInTree(self, N, edges):\n        \"\"\"\n        :type N: int\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def sumOfDistancesInTree(self, N: int, edges: \nList[List[int]]) -> List[int]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, \nassume caller calls free().\n */\nint* sumOfDistancesInTree(int N, int** edges, int \nedgesSize, int* edgesColSize, int* returnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int[] SumOfDistancesInTree(int N, int[][]\n edges) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} N\n * @param {number[][]} edges\n * @return {number[]}\n */\nvar sumOfDistancesInTree = function(N, edges) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer} n\n# @param {Integer[][]} edges\n# @return {Integer[]}\ndef sum_of_distances_in_tree(n, edges)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func sumOfDistancesInTree(_ N: Int, _ edges: [\n[Int]]) -> [Int] {\n        \n    }\n}","lang":"Swift"},{"s":"func sumOfDistancesInTree(N int, edges [][]int) []\nint {\n \n}","lang":"Go"},{"s":"object Solution {\n    def sumOfDistancesInTree(N: Int, edges: Array\n[Array[Int]]): Array[Int] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun sumOfDistancesInTree(N: Int, edges: \nArray<IntArray>): IntArray {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn sum_of_distances_in_tree(n: i32, edges: \nVec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer $N\n     * @param Integer[][] $edges\n     * @return Integer[]\n     */\n    function sumOfDistancesInTree($N, $edges) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer $N\n     * @param Integer[][] $edges\n     * @return Integer[]\n     */\n    function sumOfDistancesInTree($N, $edges) {\n        \n    }\n}","lang":"PHP"}],"page":"834/1581","h":"834. 树中距离之和","d":"<div class=\"notranslate\"><p>给定一个无向、连通的树。树中有 <code>N</code> 个标记为 <code>0...N-1</code> 的节点以及 <code>N-1</code>&nbsp;条边&nbsp;。</p>\n\n<p>第 <code>i</code> 条边连接节点&nbsp;<code>edges[i][0]</code> 和 <code>edges[i][1]</code>&nbsp;。</p>\n\n<p>返回一个表示节点 <code>i</code> 与其他所有节点距离之和的列表 <code>ans</code>。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>N = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]\n<strong>输出: </strong>[8,12,6,10,10,10]\n<strong>解释: </strong>\n如下为给定的树的示意图：\n  0\n / \\\n1   2\n   /|\\\n  3 4 5\n\n我们可以计算出 dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5) \n也就是 1 + 1 + 2 + 2 + 2 = 8。 因此，answer[0] = 8，以此类推。\n</pre>\n\n<p><strong>说明:</strong>&nbsp;<code>1 &lt;= N &lt;= 10000</code></p>\n</div>","l":"困难","s":"","lang":"Ruby","href":"https://leetcode-cn.com/problems/sum-of-distances-in-tree/","bb":{"x":445,"y":40,"w":116,"h":28}}

