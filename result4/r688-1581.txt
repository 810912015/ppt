{"ls":[{"s":"class Solution {\n    public double knightProbability(int N, int K, \nint r, int c) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def knightProbability(self, N, K, r, c):\n        \"\"\"\n        :type N: int\n        :type K: int\n        :type r: int\n        :type c: int\n        :rtype: float\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def knightProbability(self, N: int, K: int, r: \nint, c: int) -> float:","lang":"Python3"},{"s":"double knightProbability(int N, int K, int r, int c)\n{\n \n}","lang":"C"},{"s":"public class Solution {\n    public double KnightProbability(int N, int K, \nint r, int c) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} N\n * @param {number} K\n * @param {number} r\n * @param {number} c\n * @return {number}\n */\nvar knightProbability = function(N, K, r, c) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer} n\n# @param {Integer} k\n# @param {Integer} r\n# @param {Integer} c\n# @return {Float}\ndef knight_probability(n, k, r, c)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func knightProbability(_ N: Int, _ K: Int, _ r: \nInt, _ c: Int) -> Double {\n        \n    }\n}","lang":"Swift"},{"s":"func knightProbability(N int, K int, r int, c int) \nfloat64 {\n \n}","lang":"Go"},{"s":"object Solution {\n    def knightProbability(N: Int, K: Int, r: Int, \nc: Int): Double = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun knightProbability(N: Int, K: Int, r: Int, \nc: Int): Double {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn knight_probability(n: i32, k: i32, r: \ni32, c: i32) -> f64 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer $N\n     * @param Integer $K\n     * @param Integer $r\n     * @param Integer $c\n     * @return Float\n     */\n    function knightProbability($N, $K, $r, $c) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer $N\n     * @param Integer $K\n     * @param Integer $r\n     * @param Integer $c\n     * @return Float\n     */\n    function knightProbability($N, $K, $r, $c) {\n        \n    }\n}","lang":"PHP"}],"page":"688/1581","h":"688. “马”在棋盘上的概率","d":"<div class=\"notranslate\"><p>已知一个&nbsp;<code>N</code>x<code>N</code>&nbsp;的国际象棋棋盘，棋盘的行号和列号都是从 0 开始。即最左上角的格子记为&nbsp;<code>(0, 0)</code>，最右下角的记为&nbsp;<code>(N-1, N-1)</code>。&nbsp;</p>\n\n<p>现有一个 “马”（也译作 “骑士”）位于&nbsp;<code>(r, c)</code>&nbsp;，并打算进行&nbsp;<code>K</code> 次移动。&nbsp;</p>\n\n<p>如下图所示，国际象棋的 “马” 每一步先沿水平或垂直方向移动 2 个格子，然后向与之相垂直的方向再移动 1 个格子，共有 8 个可选的位置。</p>\n\n<p>&nbsp;</p>\n\n<p><img style=\"height: 200px; width: 200px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/knight.png\"></p>\n\n<p>&nbsp;</p>\n\n<p>现在 “马” 每一步都从可选的位置（包括棋盘外部的）中独立随机地选择一个进行移动，直到移动了&nbsp;<code>K</code>&nbsp;次或跳到了棋盘外面。</p>\n\n<p>求移动结束后，“马” 仍留在棋盘上的概率。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入:</strong> 3, 2, 0, 0\n<strong>输出:</strong> 0.0625\n<strong>解释:</strong> \n输入的数据依次为 N, K, r, c\n第 1 步时，有且只有 2 种走法令 “马” 可以留在棋盘上（跳到（1,2）或（2,1））。对于以上的两种情况，各自在第2步均有且只有2种走法令 “马” 仍然留在棋盘上。\n所以 “马” 在结束后仍在棋盘上的概率为 0.0625。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li><code>N</code> 的取值范围为 [1, 25]</li>\n\t<li><code>K</code>&nbsp;的取值范围为 [0, 100]</li>\n\t<li>开始时，“马” 总是位于棋盘上</li>\n</ul>\n</div>","l":"中等","s":"# @param {Integer} n","lang":"Ruby","href":"https://leetcode-cn.com/problems/knight-probability-in-chessboard/","bb":{"x":445,"y":40,"w":116,"h":28}}

