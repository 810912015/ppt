{"ls":[{"s":"# @param {Integer[][]} people\n# @return {Integer[][]}\ndef reconstruct_queue(people)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func reconstructQueue(_ people: [[Int]]) -> [\n[Int]] {\n        \n    }\n}","lang":"Swift"},{"s":"func reconstructQueue(people [][]int) [][]int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def reconstructQueue(people: Array[Array[Int]])\n: Array[Array[Int]] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun reconstructQueue(people: Array<IntArray>): \nArray<IntArray> {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn reconstruct_queue(people: Vec<Vec<i32>>) \n-> Vec<Vec<i32>> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int[][] reconstructQueue(int[][] people) \n{\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def reconstructQueue(self, people):\n        \"\"\"\n        :type people: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def reconstructQueue(self, people: List[List\n[int]]) -> List[List[int]]:","lang":"Python3"},{"s":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as \n*returnColumnSizes array.\n * Note: Both returned array and *columnSizes array \nmust be malloced, assume caller calls free().\n */\nint** reconstructQueue(int** people, int peopleSize,\n int* peopleColSize, int* returnSize, int** \nreturnColumnSizes){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int[][] ReconstructQueue(int[][] people) \n{\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} people\n * @return {number[][]}\n */\nvar reconstructQueue = function(people) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[][]} people\n# @return {Integer[][]}\ndef reconstruct_queue(people)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[][]} people\n# @return {Integer[][]}\ndef reconstruct_queue(people)\n \nend","lang":"Ruby"}],"page":"406/1581","h":"406. 根据身高重建队列","d":"<div class=\"notranslate\"><p>假设有打乱顺序的一群人站成一个队列。 每个人由一个整数对<code>(h, k)</code>表示，其中<code>h</code>是这个人的身高，<code>k</code>是排在这个人前面且身高大于或等于<code>h</code>的人数。 编写一个算法来重建这个队列。</p>\n\n<p><strong>注意：</strong><br>\n总人数少于1100人。</p>\n\n<p><strong>示例</strong></p>\n\n<pre>输入:\n[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]\n\n输出:\n[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]\n</pre>\n</div>","l":"中等","s":"class Solution {\n \n    /**\n     * @param Integer[][] $people\n     * @return Integer[][]\n     */\n    function reconstructQueue($people) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/queue-reconstruction-by-height/","bb":{"x":445,"y":40,"w":116,"h":28}}

