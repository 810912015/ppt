{"ls":[{"s":"class Solution {\n    public boolean isHappy(int n) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def isHappy(self, n: int) -> bool:","lang":"Python3"},{"s":"bool isHappy(int n){\n \n}","lang":"C"},{"s":"public class Solution {\n    public bool IsHappy(int n) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} n\n * @return {boolean}\n */\nvar isHappy = function(n) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer} n\n# @return {Boolean}\ndef is_happy(n)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func isHappy(_ n: Int) -> Bool {\n \n    }\n}","lang":"Swift"},{"s":"func isHappy(n int) bool {\n \n}","lang":"Go"},{"s":"object Solution {\n    def isHappy(n: Int): Boolean = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun isHappy(n: Int): Boolean {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn is_happy(n: i32) -> bool {\n \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer $n\n     * @return Boolean\n     */\n    function isHappy($n) {\n \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer $n\n     * @return Boolean\n     */\n    function isHappy($n) {\n \n    }\n}","lang":"PHP"}],"page":"202/1581","h":"202. 快乐数","d":"<div class=\"notranslate\"><p>编写一个算法来判断一个数是不是“快乐数”。</p>\n\n<p>一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。</p>\n\n<p><strong>示例:&nbsp;</strong></p>\n\n<pre><strong>输入:</strong> 19\n<strong>输出:</strong> true\n<strong>解释: \n</strong>1<sup>2</sup> + 9<sup>2</sup> = 82\n8<sup>2</sup> + 2<sup>2</sup> = 68\n6<sup>2</sup> + 8<sup>2</sup> = 100\n1<sup>2</sup> + 0<sup>2</sup> + 0<sup>2</sup> = 1\n</pre>\n</div>","l":"简单","s":"# @param {Integer} n","lang":"Ruby","href":"https://leetcode-cn.com/problems/happy-number/","bb":{"x":445,"y":40,"w":116,"h":28}}

