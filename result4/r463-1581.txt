{"ls":[{"s":"class Solution {\n    public int islandPerimeter(int[][] grid) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def islandPerimeter(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def islandPerimeter(self, grid: List[List[int]])\n -> int:","lang":"Python3"},{"s":"int islandPerimeter(int** grid, int gridSize, int* \ngridColSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int IslandPerimeter(int[][] grid) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar islandPerimeter = function(grid) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[][]} grid\n# @return {Integer}\ndef island_perimeter(grid)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func islandPerimeter(_ grid: [[Int]]) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func islandPerimeter(grid [][]int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def islandPerimeter(grid: Array[Array[Int]]): \nInt = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun islandPerimeter(grid: Array<IntArray>): Int \n{\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn island_perimeter(grid: Vec<Vec<i32>>) -> \ni32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function islandPerimeter($grid) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function islandPerimeter($grid) {\n        \n    }\n}","lang":"PHP"}],"page":"463/1581","h":"463. 岛屿的周长","d":"<div class=\"notranslate\"><p>给定一个包含 0 和 1 的二维网格地图，其中 1 表示陆地&nbsp;0 表示水域。</p>\n\n<p>网格中的格子水平和垂直方向相连（对角线方向不相连）。整个网格被水完全包围，但其中恰好有一个岛屿（或者说，一个或多个表示陆地的格子相连组成的岛屿）。</p>\n\n<p>岛屿中没有“湖”（“湖” 指水域在岛屿内部且不和岛屿周围的水相连）。格子是边长为 1 的正方形。网格为长方形，且宽度和高度均不超过 100 。计算这个岛屿的周长。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 :</strong></p>\n\n<pre><strong>输入:</strong>\n[[0,1,0,0],\n [1,1,1,0],\n [0,1,0,0],\n [1,1,0,0]]\n\n<strong>输出:</strong> 16\n\n<strong>解释:</strong> 它的周长是下面图片中的 16 个黄色的边：\n\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/island.png\">\n</pre>\n</div>","l":"简单","s":"# @param {Integer[][]} grid\n# @return {Integer}\ndef island_perimeter(grid)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/island-perimeter/","bb":{"x":445,"y":40,"w":116,"h":28}}

