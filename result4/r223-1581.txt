{"ls":[{"s":"class Solution {\n    public int computeArea(int A, int B, int C, int \nD, int E, int F, int G, int H) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def computeArea(self, A, B, C, D, E, F, G, H):\n        \"\"\"\n        :type A: int\n        :type B: int\n        :type C: int\n        :type D: int\n        :type E: int\n        :type F: int\n        :type G: int\n        :type H: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def computeArea(self, A: int, B: int, C: int, \nD: int, E: int, F: int, G: int, H: int) -> int:","lang":"Python3"},{"s":"int computeArea(int A, int B, int C, int D, int E, \nint F, int G, int H){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int ComputeArea(int A, int B, int C, int \nD, int E, int F, int G, int H) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} A\n * @param {number} B\n * @param {number} C\n * @param {number} D\n * @param {number} E\n * @param {number} F\n * @param {number} G\n * @param {number} H\n * @return {number}\n */\nvar computeArea = function(A, B, C, D, E, F, G, H) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer} a\n# @param {Integer} b\n# @param {Integer} c\n# @param {Integer} d\n# @param {Integer} e\n# @param {Integer} f\n# @param {Integer} g\n# @param {Integer} h\n# @return {Integer}\ndef compute_area(a, b, c, d, e, f, g, h)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func computeArea(_ A: Int, _ B: Int, _ C: Int, \n_ D: Int, _ E: Int, _ F: Int, _ G: Int, _ H: Int) \n-> Int {\n \n    }\n}","lang":"Swift"},{"s":"func computeArea(A int, B int, C int, D int, E int, \nF int, G int, H int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def computeArea(A: Int, B: Int, C: Int, D: Int, \nE: Int, F: Int, G: Int, H: Int): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun computeArea(A: Int, B: Int, C: Int, D: Int, \nE: Int, F: Int, G: Int, H: Int): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn compute_area(a: i32, b: i32, c: i32, d: \ni32, e: i32, f: i32, g: i32, h: i32) -> i32 {\n \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer $A\n     * @param Integer $B\n     * @param Integer $C\n     * @param Integer $D\n     * @param Integer $E\n     * @param Integer $F\n     * @param Integer $G\n     * @param Integer $H\n     * @return Integer\n     */\n    function computeArea($A, $B, $C, $D, $E, $F, $G,\n $H) {\n \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer $A\n     * @param Integer $B\n     * @param Integer $C\n     * @param Integer $D\n     * @param Integer $E\n     * @param Integer $F\n     * @param Integer $G\n     * @param Integer $H\n     * @return Integer\n     */\n    function computeArea($A, $B, $C, $D, $E, $F, $G,\n $H) {\n \n    }\n}","lang":"PHP"}],"page":"223/1581","h":"223. 矩形面积","d":"<div class=\"notranslate\"><p>在<strong>二维</strong>平面上计算出两个<strong>由直线构成的</strong>矩形重叠后形成的总面积。</p>\n\n<p>每个矩形由其左下顶点和右上顶点坐标表示，如图所示。</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rectangle_area.png\" alt=\"Rectangle Area\"></p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> -3, 0, 3, 4, 0, -1, 9, 2\n<strong>输出:</strong> 45</pre>\n\n<p><strong>说明:</strong> 假设矩形面积不会超出&nbsp;<strong>int&nbsp;</strong>的范围。</p>\n</div>","l":"中等","s":"# @param {Integer} a","lang":"Ruby","href":"https://leetcode-cn.com/problems/rectangle-area/","bb":{"x":445,"y":40,"w":116,"h":28}}

