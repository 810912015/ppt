{"ls":[{"s":"class Solution {\n    public String nearestPalindromic(String n) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def nearestPalindromic(self, n: str) -> str:","lang":"Python3"},{"s":"char * nearestPalindromic(char * n){\n \n}","lang":"C"},{"s":"public class Solution {\n    public string NearestPalindromic(string n) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} n\n * @return {string}\n */\nvar nearestPalindromic = function(n) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} n\n# @return {String}\ndef nearest_palindromic(n)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func nearestPalindromic(_ n: String) -> String {\n        \n    }\n}","lang":"Swift"},{"s":"func nearestPalindromic(n string) string {\n \n}","lang":"Go"},{"s":"object Solution {\n    def nearestPalindromic(n: String): String = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun nearestPalindromic(n: String): String {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn nearest_palindromic(n: String) -> String \n{\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param String $n\n     * @return String\n     */\n    function nearestPalindromic($n) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param String $n\n     * @return String\n     */\n    function nearestPalindromic($n) {\n        \n    }\n}","lang":"PHP"}],"page":"564/1581","h":"564. 寻找最近的回文数","d":"<div class=\"notranslate\"><p>给定一个整数 n ，你需要找到与它最近的回文数（不包括自身）。</p>\n\n<p>“最近的”定义为两个整数<strong>差的绝对值</strong>最小。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> \"123\"\n<strong>输出:</strong> \"121\"\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li><strong>n </strong>是由字符串表示的正整数，其长度不超过18。</li>\n\t<li>如果有多个结果，返回最小的那个。</li>\n</ol>\n</div>","l":"困难","s":"# @param {String} n","lang":"Ruby","href":"https://leetcode-cn.com/problems/find-the-closest-palindrome/","bb":{"x":445,"y":40,"w":116,"h":28}}

