{"ls":[{"s":"class Solution {\n    public int findMinStep(String board, String \nhand) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def findMinStep(self, board, hand):\n        \"\"\"\n        :type board: str\n        :type hand: str\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def findMinStep(self, board: str, hand: str) -> \nint:","lang":"Python3"},{"s":"int findMinStep(char * board, char * hand){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int FindMinStep(string board, string \nhand) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} board\n * @param {string} hand\n * @return {number}\n */\nvar findMinStep = function(board, hand) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} board\n# @param {String} hand\n# @return {Integer}\ndef find_min_step(board, hand)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func findMinStep(_ board: String, _ hand: \nString) -> Int {\n \n    }\n}","lang":"Swift"},{"s":"func findMinStep(board string, hand string) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def findMinStep(board: String, hand: String): \nInt = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun findMinStep(board: String, hand: String): \nInt {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn find_min_step(board: String, hand: \nString) -> i32 {\n \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param String $board\n     * @param String $hand\n     * @return Integer\n     */\n    function findMinStep($board, $hand) {\n \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param String $board\n     * @param String $hand\n     * @return Integer\n     */\n    function findMinStep($board, $hand) {\n \n    }\n}","lang":"PHP"}],"page":"488/1581","h":"488. 祖玛游戏","d":"<div class=\"notranslate\"><p>回忆一下祖玛游戏。现在桌上有一串球，颜色有红色(R)，黄色(Y)，蓝色(B)，绿色(G)，还有白色(W)。 现在你手里也有几个球。</p>\n\n<p>每一次，你可以从手里的球选一个，然后把这个球插入到一串球中的某个位置上（包括最左端，最右端）。接着，如果有出现三个或者三个以上颜色相同的球相连的话，就把它们移除掉。重复这一步骤直到桌上所有的球都被移除。</p>\n\n<p>找到插入并可以移除掉桌上所有球所需的最少的球数。如果不能移除桌上所有的球，输出 -1 。</p>\n\n<pre><strong>示例:</strong>\n<strong>输入:</strong> \"WRRBBW\", \"RB\" \n<strong>输出:</strong> -1 \n<strong>解释:</strong> WRRBBW -&gt; WRR[R]BBW -&gt; WBBW -&gt; WBB[B]W -&gt; WW （翻译者标注：手上球已经用完，桌上还剩两个球无法消除，返回-1）\n\n<strong>输入:</strong> \"WWRRBBWW\", \"WRBRW\" \n<strong>输出:</strong> 2 \n<strong>解释:</strong> WWRRBBWW -&gt; WWRR[R]BBWW -&gt; WWBBWW -&gt; WWBB[B]WW -&gt; WWWW -&gt; empty\n\n<strong>输入:</strong>\"G\", \"GGGGG\" \n<strong>输出:</strong> 2 \n<strong>解释:</strong> G -&gt; G[G] -&gt; GG[G] -&gt; empty \n\n<strong>输入:</strong> \"RBYYBBRRB\", \"YRBGB\" \n<strong>输出:</strong> 3 \n<strong>解释:</strong> RBYYBBRRB -&gt; RBYY[Y]BBRRB -&gt; RBBBRRB -&gt; RRRB -&gt; B -&gt; B[B] -&gt; BB[B] -&gt; empty \n</pre>\n\n<p><strong>标注:</strong></p>\n\n<ol>\n\t<li>你可以假设桌上一开始的球中，不会有三个及三个以上颜色相同且连着的球。</li>\n\t<li>桌上的球不会超过20个，输入的数据中代表这些球的字符串的名字是 \"board\" 。</li>\n\t<li>你手中的球不会超过5个，输入的数据中代表这些球的字符串的名字是 \"hand\"。</li>\n\t<li>输入的两个字符串均为非空字符串，且只包含字符 'R','Y','B','G','W'。</li>\n</ol>\n</div>","l":"困难","s":"# @param {String} board\n# @param {String} hand\n# @return {Integer}\ndef find_min_step(board, hand)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/zuma-game/","bb":{"x":445,"y":40,"w":116,"h":28}}

