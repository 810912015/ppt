{"ls":[{"s":"# @param {Integer[]} cost\n# @return {Integer}\ndef min_cost_climbing_stairs(cost)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func minCostClimbingStairs(_ cost: [Int]) -> \nInt {\n        \n    }\n}","lang":"Swift"},{"s":"func minCostClimbingStairs(cost []int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def minCostClimbingStairs(cost: Array[Int]): \nInt = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun minCostClimbingStairs(cost: IntArray): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn min_cost_climbing_stairs(cost: Vec<i32>) \n-> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int minCostClimbingStairs(int[] cost) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def minCostClimbingStairs(self, cost):\n        \"\"\"\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def minCostClimbingStairs(self, cost: List[int])\n -> int:","lang":"Python3"},{"s":"int minCostClimbingStairs(int* cost, int costSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int MinCostClimbingStairs(int[] cost) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} cost\n * @return {number}\n */\nvar minCostClimbingStairs = function(cost) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} cost\n# @return {Integer}\ndef min_cost_climbing_stairs(cost)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[]} cost\n# @return {Integer}\ndef min_cost_climbing_stairs(cost)\n \nend","lang":"Ruby"}],"page":"746/1581","h":"746. 使用最小花费爬楼梯","d":"<div class=\"notranslate\"><p>数组的每个索引做为一个阶梯，第&nbsp;<code>i</code>个阶梯对应着一个非负数的体力花费值&nbsp;<code>cost[i]</code>(索引从0开始)。</p>\n\n<p>每当你爬上一个阶梯你都要花费对应的体力花费值，然后你可以选择继续爬一个阶梯或者爬两个阶梯。</p>\n\n<p>您需要找到达到楼层顶部的最低花费。在开始时，你可以选择从索引为 0 或 1 的元素作为初始阶梯。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> cost = [10, 15, 20]\n<strong>输出:</strong> 15\n<strong>解释:</strong> 最低花费是从cost[1]开始，然后走两步即可到阶梯顶，一共花费15。\n</pre>\n\n<p><strong>&nbsp;示例 2:</strong></p>\n\n<pre><strong>输入:</strong> cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]\n<strong>输出:</strong> 6\n<strong>解释:</strong> 最低花费方式是从cost[0]开始，逐个经过那些1，跳过cost[3]，一共花费6。\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li><code>cost</code>&nbsp;的长度将会在&nbsp;<code>[2, 1000]</code>。</li>\n\t<li>每一个&nbsp;<code>cost[i]</code> 将会是一个Integer类型，范围为&nbsp;<code>[0, 999]</code>。</li>\n</ol>\n</div>","l":"简单","s":"class Solution {\n \n    /**\n     * @param Integer[] $cost\n     * @return Integer\n     */\n    function minCostClimbingStairs($cost) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/min-cost-climbing-stairs/","bb":{"x":445,"y":40,"w":116,"h":28}}

