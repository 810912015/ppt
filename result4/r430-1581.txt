{"ls":[{"s":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node prev;\n    public Node next;\n    public Node child;\n};\n*/\nclass Solution {\n    public Node flatten(Node head) {\n        \n    }\n}","lang":"Java"},{"s":"\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val, prev, next, child):\n        self.val = val\n        self.prev = prev\n        self.next = next\n        self.child = child\n\"\"\"\nclass Solution(object):\n    def flatten(self, head):\n        \"\"\"\n        :type head: Node\n        :rtype: Node\n        \"\"\"","lang":"Python"},{"s":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val, prev, next, child):\n        self.val = val\n        self.prev = prev\n        self.next = next\n        self.child = child\n\"\"\"\nclass Solution:\n    def flatten(self, head: 'Node') -> 'Node':","lang":"Python3"},{"s":"/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public Node prev;\n    public Node next;\n    public Node child;\n}\n*/\npublic class Solution {\n    public Node Flatten(Node head) {\n        \n    }\n}","lang":"C#"},{"s":"/**\n * // Definition for a Node.\n * function Node(val,prev,next,child) {\n *    this.val = val;\n *    this.prev = prev;\n *    this.next = next;\n *    this.child = child;\n * };\n */\n/**\n * @param {Node} head\n * @return {Node}\n */\nvar flatten = function(head) {\n    \n};","lang":"JavaScript"},{"s":"/**\n * // Definition for a Node.\n * function Node(val,prev,next,child) {\n *    this.val = val;\n *    this.prev = prev;\n *    this.next = next;\n *    this.child = child;\n * };\n */\n/**\n * @param {Node} head\n * @return {Node}\n */\nvar flatten = function(head) {\n    \n};","lang":"JavaScript"},{"s":"/**\n·*·//·Definition·for·a·Node.\n·*·function·Node(val,prev,next,child)·{\n·*····this.val·=·val;\n·*····this.prev·=·prev;\n·*····this.next = next;\n *    this.child = child;\n * };\n */\n/**\n * @param {Node} head\n * @return {Node}\n */\nvar flatten = function(head) {\n    \n};","lang":"JavaScript"},{"s":"\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val, prev, next, child):\n        self.val = val\n        self.prev = prev\n        self.next = next\n        self.child = child\n\"\"\"\nclass Solution(object):\n    def flatten(self, head):\n        \"\"\"\n        :type head: Node\n        :rtype: Node\n        \"\"\"","lang":"Python"},{"s":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val, prev, next, child):\n        self.val = val\n        self.prev = prev\n        self.next = next\n        self.child = child\n\"\"\"\nclass Solution:\n    def flatten(self, head: 'Node') -> 'Node':","lang":"Python3"},{"s":"/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public Node prev;\n    public Node next;\n    public Node child;\n}\n*/\npublic class Solution {\n    public Node Flatten(Node head) {\n        \n    }\n}","lang":"C#"},{"s":"/**\n * // Definition for a Node.\n * function Node(val,prev,next,child) {\n *    this.val = val;\n *    this.prev = prev;\n *    this.next = next;\n *    this.child = child;\n * };\n */\n/**\n * @param {Node} head\n * @return {Node}\n */\nvar flatten = function(head) {\n    \n};","lang":"JavaScript"},{"s":"/**\n * // Definition for a Node.\n * function Node(val,prev,next,child) {\n *    this.val = val;\n *    this.prev = prev;\n *    this.next = next;\n *    this.child = child;\n * };\n */\n/**\n * @param {Node} head\n * @return {Node}\n */\nvar flatten = function(head) {\n    \n};","lang":"JavaScript"},{"s":"/**\n * // Definition for a Node.\n * function Node(val,prev,next,child) {\n *    this.val = val;\n *    this.prev = prev;\n *    this.next = next;\n *    this.child = child;\n * };\n */\n/**\n * @param {Node} head\n * @return {Node}\n */\nvar flatten = function(head) {\n    \n};","lang":"JavaScript"},{"s":"/**\n * // Definition for a Node.\n * function Node(val,prev,next,child) {\n *    this.val = val;\n *    this.prev = prev;\n *    this.next = next;\n *    this.child = child;\n * };\n */\n/**\n * @param {Node} head\n * @return {Node}\n */\nvar flatten = function(head) {\n    \n};","lang":"JavaScript"}],"page":"430/1581","h":"430. 扁平化多级双向链表","d":"<div class=\"notranslate\"><p>您将获得一个双向链表，除了下一个和前一个指针之外，它还有一个子指针，可能指向单独的双向链表。这些子列表可能有一个或多个自己的子项，依此类推，生成多级数据结构，如下面的示例所示。</p>\n\n<p>扁平化列表，使所有结点出现在单级双链表中。您将获得列表第一级的头部。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>\n 1---2---3---4---5---6--NULL\n         |\n         7---8---9---10--NULL\n             |\n             11--12--NULL\n\n<strong>输出:</strong>\n1-2-3-7-8-11-12-9-10-4-5-6-NULL\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>以上示例的说明:</strong></p>\n\n<p>给出以下多级双向链表:</p>\n\n<pre><img style=\"width: 640px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/multilevellinkedlist.png\"></pre>\n\n<p>&nbsp;</p>\n\n<p>我们应该返回如下所示的扁平双向链表:</p>\n\n<pre><img style=\"width: 1100px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/multilevellinkedlistflattened.png\"></pre>\n</div>","l":"中等","s":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* prev;\n    Node* next;\n    Node* child;\n};\n*/\nclass Solution {\npublic:\n    Node* flatten(Node* head) {\n        \n    }\n};","lang":"C++","href":"https://leetcode-cn.com/problems/flatten-a-multilevel-doubly-linked-list/","bb":{"x":445,"y":40,"w":116,"h":28}}

