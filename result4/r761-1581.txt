{"ls":[{"s":"class Solution {\n    public String makeLargestSpecial(String S) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def makeLargestSpecial(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def makeLargestSpecial(self, S: str) -> str:","lang":"Python3"},{"s":"char * makeLargestSpecial(char * S){\n \n}","lang":"C"},{"s":"public class Solution {\n    public string MakeLargestSpecial(string S) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} S\n * @return {string}\n */\nvar makeLargestSpecial = function(S) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} s\n# @return {String}\ndef make_largest_special(s)\n \nend","lang":"Ruby"},{"s":"# @param {String} s\n# @return {String}\ndef make_largest_special(s)\n \nend","lang":"Ruby"},{"s":"func makeLargestSpecial(S string) string {\n \n}","lang":"Go"},{"s":"object Solution {\n    def makeLargestSpecial(S: String): String = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun makeLargestSpecial(S: String): String {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn make_largest_special(s: String) -> \nString {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param String $S\n     * @return String\n     */\n    function makeLargestSpecial($S) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param String $S\n     * @return String\n     */\n    function makeLargestSpecial($S) {\n        \n    }\n}","lang":"PHP"}],"page":"761/1581","h":"761. 特殊的二进制序列","d":"<div class=\"notranslate\"><p>特殊的二进制序列是具有以下两个性质的二进制序列：</p>\n\n<ul>\n\t<li>0 的数量与 1 的数量相等。</li>\n\t<li>二进制序列的每一个前缀码中 1 的数量要大于等于 0 的数量。</li>\n</ul>\n\n<p>给定一个特殊的二进制序列&nbsp;<code>S</code>，以字符串形式表示。定义一个<em>操作 </em>为首先选择&nbsp;<code>S</code>&nbsp;的两个连续且非空的特殊的子串，然后将它们交换。（两个子串为连续的当且仅当第一个子串的最后一个字符恰好为第二个子串的第一个字符的前一个字符。)</p>\n\n<p>在任意次数的操作之后，交换后的字符串按照字典序排列的最大的结果是什么？</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> S = \"11011000\"\n<strong>输出:</strong> \"11100100\"\n<strong>解释:</strong>\n将子串 \"10\" （在S[1]出现） 和 \"1100\" （在S[3]出现）进行交换。\n这是在进行若干次操作后按字典序排列最大的结果。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li><code>S</code>&nbsp;的长度不超过&nbsp;<code>50</code>。</li>\n\t<li><code>S</code>&nbsp;保证为一个满足上述定义的<em>特殊 </em>的二进制序列。</li>\n</ol>\n</div>","l":"困难","s":"# @param {String} s\n# @return {String}\ndef make_largest_special(s)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/special-binary-string/","bb":{"x":445,"y":40,"w":116,"h":28}}

