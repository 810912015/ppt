{"ls":[{"s":"class Solution {\n    public List<String> wordBreak(String s, \nList<String> wordDict) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def wordBreak(self, s: str, wordDict: List[str])\n -> List[str]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, \nassume caller calls free().\n */\nchar ** wordBreak(char * s, char ** wordDict, int \nwordDictSize, int* returnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<string> WordBreak(string s, \nIList<string> wordDict) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} s\n * @param {string[]} wordDict\n * @return {string[]}\n */\nvar wordBreak = function(s, wordDict) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} s\n# @param {String[]} word_dict\n# @return {String[]}\ndef word_break(s, word_dict)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func wordBreak(_ s: String, _ wordDict: [String]\n) -> [String] {\n \n    }\n}","lang":"Swift"},{"s":"func wordBreak(s string, wordDict []string) []\nstring {\n \n}","lang":"Go"},{"s":"object Solution {\n    def wordBreak(s: String, wordDict: List[String])\n: List[String] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun wordBreak(s: String, wordDict: List<String>)\n: List<String> {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn word_break(s: String, word_dict: \nVec<String>) -> Vec<String> {\n \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param String $s\n     * @param String[] $wordDict\n     * @return String[]\n     */\n    function wordBreak($s, $wordDict) {\n \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param String $s\n     * @param String[] $wordDict\n     * @return String[]\n     */\n    function wordBreak($s, $wordDict) {\n \n    }\n}","lang":"PHP"}],"page":"140/1581","h":"140. 单词拆分 II","d":"<div class=\"notranslate\"><p>给定一个<strong>非空</strong>字符串 <em>s</em> 和一个包含<strong>非空</strong>单词列表的字典 <em>wordDict</em>，在字符串中增加空格来构建一个句子，使得句子中所有的单词都在词典中。返回所有这些可能的句子。</p>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>分隔时可以重复使用字典中的单词。</li>\n\t<li>你可以假设字典中没有重复的单词。</li>\n</ul>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入:\n</strong>s = \"<code>catsanddog</code>\"\nwordDict = <code>[\"cat\", \"cats\", \"and\", \"sand\", \"dog\"]</code>\n<strong>输出:\n</strong><code>[\n&nbsp; \"cats and dog\",\n&nbsp; \"cat sand dog\"\n]</code>\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入:\n</strong>s = \"pineapplepenapple\"\nwordDict = [\"apple\", \"pen\", \"applepen\", \"pine\", \"pineapple\"]\n<strong>输出:\n</strong>[\n&nbsp; \"pine apple pen apple\",\n&nbsp; \"pineapple pen apple\",\n&nbsp; \"pine applepen apple\"\n]\n<strong>解释:</strong> 注意你可以重复使用字典中的单词。\n</pre>\n\n<p><strong>示例&nbsp;3：</strong></p>\n\n<pre><strong>输入:\n</strong>s = \"catsandog\"\nwordDict = [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"]\n<strong>输出:\n</strong>[]\n</pre>\n</div>","l":"困难","s":"# @param {String} s\n# @param {String[]} word_dict\n# @return {String[]}\ndef word_break(s, word_dict)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/word-break-ii/","bb":{"x":445,"y":40,"w":116,"h":28}}

