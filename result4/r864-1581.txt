{"ls":[{"s":"class Solution(object):\n    def shortestPathAllKeys(self, grid):\n        \"\"\"\n        :type grid: List[str]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def shortestPathAllKeys(self, grid: List[str]) \n-> int:","lang":"Python3"},{"s":"int shortestPathAllKeys(char ** grid, int gridSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int ShortestPathAllKeys(string[] grid) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string[]} grid\n * @return {number}\n */\nvar shortestPathAllKeys = function(grid) {\n \n};","lang":"JavaScript"},{"s":"# @param {String[]} grid\n# @return {Integer}\ndef shortest_path_all_keys(grid)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    public int shortestPathAllKeys(String[] grid) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def shortestPathAllKeys(self, grid):\n        \"\"\"\n        :type grid: List[str]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def shortestPathAllKeys(self, grid: List[str]) \n-> int:","lang":"Python3"},{"s":"int shortestPathAllKeys(char ** grid, int gridSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int ShortestPathAllKeys(string[] grid) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string[]} grid\n * @return {number}\n */\nvar shortestPathAllKeys = function(grid) {\n \n};","lang":"JavaScript"},{"s":"# @param {String[]} grid\n# @return {Integer}\ndef shortest_path_all_keys(grid)\n \nend","lang":"Ruby"},{"s":"# @param {String[]} grid\n# @return {Integer}\ndef shortest_path_all_keys(grid)\n \nend","lang":"Ruby"}],"page":"864/1581","h":"864. 获取所有钥匙的最短路径","d":"<div class=\"notranslate\"><p>给定一个二维网格&nbsp;<code>grid</code>。&nbsp;<code>\".\"</code>&nbsp;代表一个空房间，&nbsp;<code>\"#\"</code>&nbsp;代表一堵墙，&nbsp;<code>\"@\"</code>&nbsp;是起点，（<code>\"a\"</code>,&nbsp;<code>\"b\"</code>, ...）代表钥匙，（<code>\"A\"</code>,&nbsp;<code>\"B\"</code>, ...）代表锁。</p>\n\n<p>我们从起点开始出发，一次移动是指向四个基本方向之一行走一个单位空间。我们不能在网格外面行走，也无法穿过一堵墙。如果途经一个钥匙，我们就把它捡起来。除非我们手里有对应的钥匙，否则无法通过锁。</p>\n\n<p>假设 K 为钥匙/锁的个数，且满足&nbsp;<code>1 &lt;= K &lt;= 6</code>，字母表中的前 K 个字母在网格中都有自己对应的一个小写和一个大写字母。换言之，每个锁有唯一对应的钥匙，每个钥匙也有唯一对应的锁。另外，代表钥匙和锁的字母互为大小写并按字母顺序排列。</p>\n\n<p>返回获取所有钥匙所需要的移动的最少次数。如果无法获取所有钥匙，返回&nbsp;<code>-1</code>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[\"@.a.#\",\"###.#\",\"b.A.B\"]\n<strong>输出：</strong>8\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[\"@..aA\",\"..B#.\",\"....b\"]\n<strong>输出：</strong>6\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= grid.length&nbsp;&lt;= 30</code></li>\n\t<li><code>1 &lt;= grid[0].length&nbsp;&lt;= 30</code></li>\n\t<li><code>grid[i][j]</code>&nbsp;只含有&nbsp;<code>'.'</code>,&nbsp;<code>'#'</code>,&nbsp;<code>'@'</code>,&nbsp;<code>'a'-</code><code>'f</code><code>'</code>&nbsp;以及&nbsp;<code>'A'-'F'</code></li>\n\t<li>钥匙的数目范围是&nbsp;<code>[1, 6]</code>，每个钥匙都对应一个不同的字母，正好打开一个对应的锁。</li>\n</ol>\n</div>","l":"困难","s":"class Solution {","lang":"Swift","href":"https://leetcode-cn.com/problems/shortest-path-to-get-all-keys/","bb":{"x":445,"y":40,"w":116,"h":28}}

