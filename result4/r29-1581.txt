{"ls":[{"s":"class Solution {\n    public int divide(int dividend, int divisor) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def divide(self, dividend: int, divisor: int) \n-> int:","lang":"Python3"},{"s":"int divide(int dividend, int divisor){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int Divide(int dividend, int divisor) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} dividend\n * @param {number} divisor\n * @return {number}\n */\nvar divide = function(dividend, divisor) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer} dividend\n# @param {Integer} divisor\n# @return {Integer}\ndef divide(dividend, divisor)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func divide(_ dividend: Int, _ divisor: Int) -> \nInt {\n        \n    }\n}","lang":"Swift"},{"s":"func divide(dividend int, divisor int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def divide(dividend: Int, divisor: Int): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun divide(dividend: Int, divisor: Int): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn divide(dividend: i32, divisor: i32) -> \ni32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer $dividend\n     * @param Integer $divisor\n     * @return Integer\n     */\n    function divide($dividend, $divisor) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer $dividend\n     * @param Integer $divisor\n     * @return Integer\n     */\n    function divide($dividend, $divisor) {\n        \n    }\n}","lang":"PHP"}],"page":"29/1581","h":"29. 两数相除","d":"<div class=\"notranslate\"><p>给定两个整数，被除数&nbsp;<code>dividend</code>&nbsp;和除数&nbsp;<code>divisor</code>。将两数相除，要求不使用乘法、除法和 mod 运算符。</p>\n\n<p>返回被除数&nbsp;<code>dividend</code>&nbsp;除以除数&nbsp;<code>divisor</code>&nbsp;得到的商。</p>\n\n<p>整数除法的结果应当截去（<code>truncate</code>）其小数部分，例如：<code>truncate(8.345) = 8</code> 以及 <code>truncate(-2.7335) = -2</code></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> dividend = 10, divisor = 3\n<strong>输出:</strong> 3\n<strong>解释: </strong>10/3 = truncate(3.33333..) = truncate(3) = 3</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> dividend = 7, divisor = -3\n<strong>输出:</strong> -2\n<strong>解释:</strong> 7/-3 = truncate(-2.33333..) = -2</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>被除数和除数均为 32 位有符号整数。</li>\n\t<li>除数不为&nbsp;0。</li>\n\t<li>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>− 1]。本题中，如果除法结果溢出，则返回 2<sup>31&nbsp;</sup>− 1。</li>\n</ul>\n</div>","l":"中等","s":"# @param {Integer} dividend","lang":"Ruby","href":"https://leetcode-cn.com/problems/divide-two-integers/","bb":{"x":445,"y":40,"w":116,"h":28}}

