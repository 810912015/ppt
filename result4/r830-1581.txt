{"ls":[{"s":"class Solution {\n    public List<List<Integer>> largeGroupPositions\n(String S) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def largeGroupPositions(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: List[List[int]]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def largeGroupPositions(self, S: str) -> List\n[List[int]]:","lang":"Python3"},{"s":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as \n*returnColumnSizes array.\n * Note: Both returned array and *columnSizes array \nmust be malloced, assume caller calls free().\n */\nint** largeGroupPositions(char * S, int* returnSize,\n int** returnColumnSizes){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<IList<int>> LargeGroupPositions\n(string S) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} S\n * @return {number[][]}\n */\nvar largeGroupPositions = function(S) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} s\n# @return {Integer[][]}\ndef large_group_positions(s)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func largeGroupPositions(_ S: String) -> [[Int]]\n {\n        \n    }\n}","lang":"Swift"},{"s":"func largeGroupPositions(S string) [][]int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def largeGroupPositions(S: String): List[List\n[Int]] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun largeGroupPositions(S: String): \nList<List<Int>> {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn large_group_positions(s: String) -> \nVec<Vec<i32>> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param String $S\n     * @return Integer[][]\n     */\n    function largeGroupPositions($S) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param String $S\n     * @return Integer[][]\n     */\n    function largeGroupPositions($S) {\n        \n    }\n}","lang":"PHP"}],"page":"830/1581","h":"830. 较大分组的位置","d":"<div class=\"notranslate\"><p>在一个由小写字母构成的字符串&nbsp;<code>S</code>&nbsp;中，包含由一些连续的相同字符所构成的分组。</p>\n\n<p>例如，在字符串 <code>S = \"abbxxxxzyy\"</code>&nbsp;中，就含有 <code>\"a\"</code>, <code>\"bb\"</code>, <code>\"xxxx\"</code>, <code>\"z\"</code> 和 <code>\"yy\"</code> 这样的一些分组。</p>\n\n<p>我们称所有包含大于或等于三个连续字符的分组为较大分组。找到每一个较大分组的起始和终止位置。</p>\n\n<p>最终结果按照字典顺序输出。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入: </strong>\"abbxxxxzzy\"\n<strong>输出: </strong>[[3,6]]\n<strong>解释</strong>: <code>\"xxxx\" 是一个起始于 3 且终止于 6 的较大分组</code>。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>\"abc\"\n<strong>输出: </strong>[]\n<strong>解释</strong>: \"a\",\"b\" 和 \"c\" 均不是符合要求的较大分组。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入: </strong>\"abcdddeeeeaabbbcd\"\n<strong>输出: </strong>[[3,5],[6,9],[12,14]]</pre>\n\n<p><strong>说明:&nbsp;</strong>&nbsp;<code>1 &lt;= S.length &lt;= 1000</code></p>\n</div>","l":"简单","s":"# @param {String} s\n# @return {Integer[][]}\ndef large_group_positions(s)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/positions-of-large-groups/","bb":{"x":445,"y":40,"w":116,"h":28}}

