{"ls":[{"s":"# @param {Integer[][]} matrix\n# @param {Integer} target\n# @return {Boolean}\ndef search_matrix(matrix, target)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func searchMatrix(_ matrix: [[Int]], _ target: \nInt) -> Bool {\n        \n    }\n}","lang":"Swift"},{"s":"func searchMatrix(matrix [][]int, target int) bool {\n \n}","lang":"Go"},{"s":"object Solution {\n    def searchMatrix(matrix: Array[Array[Int]], \ntarget: Int): Boolean = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun searchMatrix(matrix: Array<IntArray>, \ntarget: Int): Boolean {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn search_matrix(matrix: Vec<Vec<i32>>, \ntarget: i32) -> bool {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public boolean searchMatrix(int[][] matrix, int \ntarget) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def searchMatrix(self, matrix: List[List[int]], \ntarget: int) -> bool:","lang":"Python3"},{"s":"bool searchMatrix(int** matrix, int matrixSize, \nint* matrixColSize, int target){\n \n}","lang":"C"},{"s":"public class Solution {\n    public bool SearchMatrix(int[][] matrix, int \ntarget) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} matrix\n * @param {number} target\n * @return {boolean}\n */\nvar searchMatrix = function(matrix, target) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[][]} matrix\n# @param {Integer} target\n# @return {Boolean}\ndef search_matrix(matrix, target)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[][]} matrix\n# @param {Integer} target\n# @return {Boolean}\ndef search_matrix(matrix, target)\n \nend","lang":"Ruby"}],"page":"74/1581","h":"74. 搜索二维矩阵","d":"<div class=\"notranslate\"><p>编写一个高效的算法来判断&nbsp;<em>m</em> x <em>n</em>&nbsp;矩阵中，是否存在一个目标值。该矩阵具有如下特性：</p>\n\n<ul>\n\t<li>每行中的整数从左到右按升序排列。</li>\n\t<li>每行的第一个整数大于前一行的最后一个整数。</li>\n</ul>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong>\nmatrix = [\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\ntarget = 3\n<strong>输出:</strong> true\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong>\nmatrix = [\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\ntarget = 13\n<strong>输出:</strong> false</pre>\n</div>","l":"中等","s":"class Solution {","lang":"PHP","href":"https://leetcode-cn.com/problems/search-a-2d-matrix/","bb":{"x":445,"y":40,"w":116,"h":28}}

