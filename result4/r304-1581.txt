{"ls":[{"s":"class NumMatrix {\n \n    public NumMatrix(int[][] matrix) {\n \n    }\n    \n    public int sumRegion(int row1, int col1, int \nrow2, int col2) {\n \n    }\n}\n \n/**\n * Your NumMatrix object will be instantiated and \ncalled as such:\n * NumMatrix obj = new NumMatrix(matrix);\n * int param_1 = obj.sumRegion(row1,col1,row2,col2);\n */","lang":"Java"},{"s":"class NumMatrix(object):\n \n    def __init__(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        \"\"\"\n        \n \n    def sumRegion(self, row1, col1, row2, col2):\n        \"\"\"\n        :type row1: int\n        :type col1: int\n        :type row2: int\n        :type col2: int\n        :rtype: int\n        \"\"\"\n        \n \n \n# Your NumMatrix object will be instantiated and \ncalled as such:\n# obj = NumMatrix(matrix)\n# param_1 = obj.sumRegion(row1,col1,row2,col2)","lang":"Python"},{"s":"class NumMatrix:\n \n    def __init__(self, matrix: List[List[int]]):\n        \n \n    def sumRegion(self, row1: int, col1: int, row2: \nint, col2: int) -> int:\n        \n \n \n# Your NumMatrix object will be instantiated and \ncalled as such:\n# obj = NumMatrix(matrix)\n# param_1 = obj.sumRegion(row1,col1,row2,col2)","lang":"Python3"},{"s":"typedef struct {\n    \n} NumMatrix;\n \n \nNumMatrix* numMatrixCreate(int** matrix, int \nmatrixSize, int* matrixColSize) {\n    \n}\n \nint numMatrixSumRegion(NumMatrix* obj, int row1, \nint col1, int row2, int col2) {\n  \n}\n \nvoid numMatrixFree(NumMatrix* obj) {\n    \n}\n \n/**\n * Your NumMatrix struct will be instantiated and \ncalled as such:\n * NumMatrix* obj = numMatrixCreate(matrix, \nmatrixSize, matrixColSize);\n * int param_1 = numMatrixSumRegion(obj, row1, col1,\n row2, col2);","lang":"C"},{"s":"public class NumMatrix {\n \n    public NumMatrix(int[][] matrix) {\n \n    }\n    \n    public int SumRegion(int row1, int col1, int \nrow2, int col2) {\n \n    }\n}\n \n/**\n * Your NumMatrix object will be instantiated and \ncalled as such:\n * NumMatrix obj = new NumMatrix(matrix);\n * int param_1 = obj.SumRegion(row1,col1,row2,col2);\n */","lang":"C#"},{"s":"/**\n * @param {number[][]} matrix\n */\nvar NumMatrix = function(matrix) {\n \n};\n \n/** \n * @param {number} row1 \n * @param {number} col1 \n * @param {number} row2 \n * @param {number} col2\n * @return {number}\n */\nNumMatrix.prototype.sumRegion = function(row1, col1,\n row2, col2) {\n \n};\n \n/**\n * Your NumMatrix object will be instantiated and \ncalled as such:\n * var obj = new NumMatrix(matrix)\n * var param_1 = obj.sumRegion(row1,col1,row2,col2)\n */","lang":"JavaScript"},{"s":"class NumMatrix\n \n=begin\n    :type matrix: Integer[][]\n=end\n    def initialize(matrix)\n \n    end\n \n \n=begin\n    :type row1: Integer\n    :type col1: Integer\n    :type row2: Integer\n    :type col2: Integer\n    :rtype: Integer\n=end\n    def sum_region(row1, col1, row2, col2)\n \n    end\n \n \nend\n \n# Your NumMatrix object will be instantiated and \ncalled as such:","lang":"Ruby"},{"s":"class NumMatrix {\n \n    init(_ matrix: [[Int]]) {\n        \n    }\n    \n    func sumRegion(_ row1: Int, _ col1: Int, _ \nrow2: Int, _ col2: Int) -> Int {\n        \n    }\n}\n \n/**\n * Your NumMatrix object will be instantiated and \ncalled as such:\n * let obj = NumMatrix(matrix)\n * let ret_1: Int = obj.sumRegion(row1, col1, row2, \ncol2)\n */","lang":"Swift"},{"s":"type NumMatrix struct {\n \n}\n \n \nfunc Constructor(matrix [][]int) NumMatrix {\n \n}\n \n \nfunc (this *NumMatrix) SumRegion(row1 int, col1 int,\n row2 int, col2 int) int {\n \n}\n \n \n/**\n * Your NumMatrix object will be instantiated and \ncalled as such:\n * obj := Constructor(matrix);\n * param_1 := obj.SumRegion(row1,col1,row2,col2);\n */","lang":"Go"},{"s":"class NumMatrix(_matrix: Array[Array[Int]]) {\n \n    def sumRegion(row1: Int, col1: Int, row2: Int, \ncol2: Int): Int = {\n \n    }\n \n}\n \n/**\n * Your NumMatrix object will be instantiated and \ncalled as such:\n * var obj = new NumMatrix(matrix)\n * var param_1 = obj.sumRegion(row1,col1,row2,col2)\n */","lang":"Scala"},{"s":"class NumMatrix(matrix: Array<IntArray>) {\n \n    fun sumRegion(row1: Int, col1: Int, row2: Int, \ncol2: Int): Int {\n \n    }\n \n}\n \n/**\n * Your NumMatrix object will be instantiated and \ncalled as such:\n * var obj = NumMatrix(matrix)\n * var param_1 = obj.sumRegion(row1,col1,row2,col2)\n */","lang":"Kotlin"},{"s":"struct NumMatrix {\n \n}\n \n \n/** \n * `&self` means the method takes an immutable \nreference.\n * If you need a mutable reference, change it to `&\nmut self` instead.\n */\nimpl NumMatrix {\n \n    fn new(matrix: Vec<Vec<i32>>) -> Self {\n        \n    }\n    \n    fn sum_region(&self, row1: i32, col1: i32, \nrow2: i32, col2: i32) -> i32 {\n        \n    }\n}\n \n/**\n * Your NumMatrix object will be instantiated and \ncalled as such:","lang":"Rust"},{"s":"class NumMatrix {\n    /**\n     * @param Integer[][] $matrix\n     */\n    function __construct($matrix) {\n        \n    }\n  \n    /**\n     * @param Integer $row1\n     * @param Integer $col1\n     * @param Integer $row2\n     * @param Integer $col2\n     * @return Integer\n     */\n    function sumRegion($row1, $col1, $row2, $col2) {\n        \n    }\n}\n \n/**\n * Your NumMatrix object will be instantiated and \ncalled as such:\n * $obj = NumMatrix($matrix);\n * $ret_1 = $obj->sumRegion($row1, $col1, $row2, \n$col2);","lang":"PHP"},{"s":"class NumMatrix {\n    /**\n     * @param Integer[][] $matrix\n     */\n    function __construct($matrix) {\n        \n    }\n  \n    /**\n     * @param Integer $row1\n     * @param Integer $col1\n     * @param Integer $row2\n     * @param Integer $col2\n     * @return Integer\n     */\n    function sumRegion($row1, $col1, $row2, $col2) {\n        \n    }\n}\n \n/**\n * Your NumMatrix object will be instantiated and \ncalled as such:\n * $obj = NumMatrix($matrix);\n * $ret_1 = $obj->sumRegion($row1, $col1, $row2, \n$col2);","lang":"PHP"}],"page":"304/1581","h":"304. 二维区域和检索 - 矩阵不可变","d":"<div class=\"notranslate\"><p>给定一个二维矩阵，计算其子矩形范围内元素的总和，该子矩阵的左上角为 (<em>row</em>1,&nbsp;<em>col</em>1) ，右下角为 (<em>row</em>2,&nbsp;<em>col</em>2)。</p>\n\n<p><img style=\"width: 130px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/images/304.png\" alt=\"Range Sum Query 2D\"><br>\n<small>上图子矩阵左上角&nbsp;(row1, col1) = <strong>(2, 1)</strong>&nbsp;，右下角(row2, col2) = <strong>(4, 3)，</strong>该子矩形内元素的总和为 8。</small></p>\n\n<p><strong>示例:</strong></p>\n\n<pre>给定 matrix = [\n  [3, 0, 1, 4, 2],\n  [5, 6, 3, 2, 1],\n  [1, 2, 0, 1, 5],\n  [4, 1, 0, 1, 7],\n  [1, 0, 3, 0, 5]\n]\n\nsumRegion(2, 1, 4, 3) -&gt; 8\nsumRegion(1, 1, 2, 2) -&gt; 11\nsumRegion(1, 2, 2, 4) -&gt; 12\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>你可以假设矩阵不可变。</li>\n\t<li>会多次调用&nbsp;<em>sumRegion&nbsp;</em>方法<em>。</em></li>\n\t<li>你可以假设&nbsp;<em>row</em>1 ≤ <em>row</em>2 且&nbsp;<em>col</em>1 ≤ <em>col</em>2。</li>\n</ol>\n</div>","l":"中等","s":"class NumMatrix\n \n=begin\n    :type matrix: Integer[][]\n=end\n    def initialize(matrix)\n \n    end\n \n \n=begin\n    :type row1: Integer\n    :type col1: Integer\n    :type row2: Integer\n    :type col2: Integer\n    :rtype: Integer\n=end\n    def sum_region(row1, col1, row2, col2)\n \n    end\n \n \nend\n \n# Your NumMatrix object will be instantiated and \ncalled as such:","lang":"Ruby","href":"https://leetcode-cn.com/problems/range-sum-query-2d-immutable/","bb":{"x":445,"y":40,"w":116,"h":28}}

