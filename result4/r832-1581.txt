{"ls":[{"s":"class Solution {\n    public int[][] flipAndInvertImage(int[][] A) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def flipAndInvertImage(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def flipAndInvertImage(self, A: List[List[int]])\n -> List[List[int]]:","lang":"Python3"},{"s":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as \n*returnColumnSizes array.\n * Note: Both returned array and *columnSizes array \nmust be malloced, assume caller calls free().\n */\nint** flipAndInvertImage(int** A, int ASize, int* \nAColSize, int* returnSize, int** returnColumnSizes){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int[][] FlipAndInvertImage(int[][] A) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} A\n * @return {number[][]}\n */\nvar flipAndInvertImage = function(A) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[][]} a\n# @return {Integer[][]}\ndef flip_and_invert_image(a)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func flipAndInvertImage(_ A: [[Int]]) -> [[Int]]\n {\n        \n    }\n}","lang":"Swift"},{"s":"func flipAndInvertImage(A [][]int) [][]int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def flipAndInvertImage(A: Array[Array[Int]]): \nArray[Array[Int]] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun flipAndInvertImage(A: Array<IntArray>): \nArray<IntArray> {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn flip_and_invert_image(a: Vec<Vec<i32>>) \n-> Vec<Vec<i32>> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[][] $A\n     * @return Integer[][]\n     */\n    function flipAndInvertImage($A) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[][] $A\n     * @return Integer[][]\n     */\n    function flipAndInvertImage($A) {\n        \n    }\n}","lang":"PHP"}],"page":"832/1581","h":"832. 翻转图像","d":"<div class=\"notranslate\"><p>给定一个二进制矩阵&nbsp;<code>A</code>，我们想先水平翻转图像，然后反转图像并返回结果。</p>\n\n<p>水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转&nbsp;<code>[1, 1, 0]</code>&nbsp;的结果是&nbsp;<code>[0, 1, 1]</code>。</p>\n\n<p>反转图片的意思是图片中的&nbsp;<code>0</code>&nbsp;全部被&nbsp;<code>1</code>&nbsp;替换，&nbsp;<code>1</code>&nbsp;全部被&nbsp;<code>0</code>&nbsp;替换。例如，反转&nbsp;<code>[0, 1, 1]</code>&nbsp;的结果是&nbsp;<code>[1, 0, 0]</code>。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>[[1,1,0],[1,0,1],[0,0,0]]\n<strong>输出: </strong>[[1,0,0],[0,1,0],[1,1,1]]\n<strong>解释:</strong> 首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；\n     然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>[[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]\n<strong>输出: </strong>[[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n<strong>解释:</strong> 首先翻转每一行: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]；\n     然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= A.length = A[0].length &lt;= 20</code></li>\n\t<li><code>0 &lt;= A[i][j]&nbsp;&lt;=&nbsp;1</code></li>\n</ul>\n</div>","l":"简单","s":"","lang":"Ruby","href":"https://leetcode-cn.com/problems/flipping-an-image/","bb":{"x":445,"y":40,"w":116,"h":28}}

