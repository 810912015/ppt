{"ls":[{"s":"class Solution {\n    public boolean checkPerfectNumber(int num) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def checkPerfectNumber(self, num: int) -> bool:","lang":"Python3"},{"s":"bool checkPerfectNumber(int num){\n \n}","lang":"C"},{"s":"public class Solution {\n    public bool CheckPerfectNumber(int num) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} num\n * @return {boolean}\n */\nvar checkPerfectNumber = function(num) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer} num\n# @return {Boolean}\ndef check_perfect_number(num)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func checkPerfectNumber(_ num: Int) -> Bool {\n        \n    }\n}","lang":"Swift"},{"s":"func checkPerfectNumber(num int) bool {\n \n}","lang":"Go"},{"s":"object Solution {\n    def checkPerfectNumber(num: Int): Boolean = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun checkPerfectNumber(num: Int): Boolean {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn check_perfect_number(num: i32) -> bool {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer $num\n     * @return Boolean\n     */\n    function checkPerfectNumber($num) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer $num\n     * @return Boolean\n     */\n    function checkPerfectNumber($num) {\n        \n    }\n}","lang":"PHP"}],"page":"507/1581","h":"507. 完美数","d":"<div class=\"notranslate\"><p>对于一个&nbsp;<strong>正整数</strong>，如果它和除了它自身以外的所有正因子之和相等，我们称它为“完美数”。</p>\n\n<p>给定一个&nbsp;<strong>整数&nbsp;</strong><code>n</code>，&nbsp;如果他是完美数，返回&nbsp;<code>True</code>，否则返回&nbsp;<code>False</code></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入:</strong> 28\n<strong>输出:</strong> True\n<strong>解释:</strong> 28 = 1 + 2 + 4 + 7 + 14\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<p>输入的数字&nbsp;<strong><code>n</code></strong> 不会超过 100,000,000. (1e8)</p>\n</div>","l":"简单","s":"# @param {Integer} num\n# @return {Boolean}\ndef check_perfect_number(num)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/perfect-number/","bb":{"x":445,"y":40,"w":116,"h":28}}

