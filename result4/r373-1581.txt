{"ls":[{"s":"# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @param {Integer} k\n# @return {Integer[][]}\ndef k_smallest_pairs(nums1, nums2, k)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func kSmallestPairs(_ nums1: [Int], _ nums2: \n[Int], _ k: Int) -> [[Int]] {\n        \n    }\n}","lang":"Swift"},{"s":"func kSmallestPairs(nums1 []int, nums2 []int, k int)\n [][]int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def kSmallestPairs(nums1: Array[Int], nums2: \nArray[Int], k: Int): List[List[Int]] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun kSmallestPairs(nums1: IntArray, nums2: \nIntArray, k: Int): List<List<Int>> {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn k_smallest_pairs(nums1: Vec<i32>, nums2: \nVec<i32>, k: i32) -> Vec<Vec<i32>> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public List<List<Integer>> kSmallestPairs(int[] \nnums1, int[] nums2, int k) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def kSmallestPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def kSmallestPairs(self, nums1: List[int], \nnums2: List[int], k: int) -> List[List[int]]:","lang":"Python3"},{"s":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as \n*returnColumnSizes array.\n * Note: Both returned array and *columnSizes array \nmust be malloced, assume caller calls free().\n */\nint** kSmallestPairs(int* nums1, int nums1Size, \nint* nums2, int nums2Size, int k, int* returnSize, \nint** returnColumnSizes){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<IList<int>> KSmallestPairs(int[] \nnums1, int[] nums2, int k) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number} k\n * @return {number[][]}\n */\nvar kSmallestPairs = function(nums1, nums2, k) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @param {Integer} k\n# @return {Integer[][]}\ndef k_smallest_pairs(nums1, nums2, k)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @param {Integer} k\n# @return {Integer[][]}\ndef k_smallest_pairs(nums1, nums2, k)\n \nend","lang":"Ruby"}],"page":"373/1581","h":"373. 查找和最小的K对数字","d":"<div class=\"notranslate\"><p>给定两个以升序排列的整形数组 <strong>nums1</strong> 和 <strong>nums2</strong>, 以及一个整数 <strong>k</strong>。</p>\n\n<p>定义一对值&nbsp;<strong>(u,v)</strong>，其中第一个元素来自&nbsp;<strong>nums1</strong>，第二个元素来自 <strong>nums2</strong>。</p>\n\n<p>找到和最小的 k 对数字&nbsp;<strong>(u<sub>1</sub>,v<sub>1</sub>), (u<sub>2</sub>,v<sub>2</sub>) ... (u<sub>k</sub>,v<sub>k</sub>)</strong>。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> nums1 = [1,7,11], nums2 = [2,4,6], k = 3\n<strong>输出:</strong> [1,2],[1,4],[1,6]\n<strong>解释: </strong>返回序列中的前 3 对数：\n     [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>nums1 = [1,1,2], nums2 = [1,2,3], k = 2\n<strong>输出: </strong>[1,1],[1,1]\n<strong>解释: </strong>返回序列中的前 2 对数：\n&nbsp;    [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入: </strong>nums1 = [1,2], nums2 = [3], k = 3 \n<strong>输出:</strong> [1,3],[2,3]\n<strong>解释: </strong>也可能序列中所有的数对都被返回:[1,3],[2,3]\n</pre>\n</div>","l":"中等","s":"class Solution {\n \n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @param Integer $k\n     * @return Integer[][]\n     */\n    function kSmallestPairs($nums1, $nums2, $k) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums/","bb":{"x":445,"y":40,"w":116,"h":28}}

