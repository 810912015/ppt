{"ls":[{"s":"class MyHashSet {\n \n    /** Initialize your data structure here. */\n    public MyHashSet() {\n \n    }\n    \n    public void add(int key) {\n \n    }\n    \n    public void remove(int key) {\n \n    }\n    \n    /** Returns true if this set contains the \nspecified element */\n    public boolean contains(int key) {\n \n    }\n}\n \n/**\n * Your MyHashSet object will be instantiated and \ncalled as such:\n * MyHashSet obj = new MyHashSet();","lang":"Java"},{"s":"class MyHashSet(object):\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n \n    def add(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: None\n        \"\"\"\n        \n \n    def remove(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: None\n        \"\"\"\n        \n \n    def contains(self, key):\n        \"\"\"\n        Returns true if this set contains the \nspecified element","lang":"Python"},{"s":"class MyHashSet:\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n \n    def add(self, key: int) -> None:\n        \n \n    def remove(self, key: int) -> None:\n        \n \n    def contains(self, key: int) -> bool:\n        \"\"\"\n        Returns true if this set contains the \nspecified element\n        \"\"\"\n        \n \n \n# Your MyHashSet object will be instantiated and \ncalled as such:\n# obj = MyHashSet()\n# obj.add(key)","lang":"Python3"},{"s":"typedef struct {\n    \n} MyHashSet;\n \n/** Initialize your data structure here. */\n \nMyHashSet* myHashSetCreate() {\n    \n}\n \nvoid myHashSetAdd(MyHashSet* obj, int key) {\n  \n}\n \nvoid myHashSetRemove(MyHashSet* obj, int key) {\n  \n}\n \n/** Returns true if this set contains the specified \nelement */\nbool myHashSetContains(MyHashSet* obj, int key) {\n  \n}\n \nvoid myHashSetFree(MyHashSet* obj) {\n    ","lang":"C"},{"s":"public class MyHashSet {\n \n    /** Initialize your data structure here. */\n    public MyHashSet() {\n \n    }\n    \n    public void Add(int key) {\n \n    }\n    \n    public void Remove(int key) {\n \n    }\n    \n    /** Returns true if this set contains the \nspecified element */\n    public bool Contains(int key) {\n \n    }\n}\n \n/**\n * Your MyHashSet object will be instantiated and \ncalled as such:\n * MyHashSet obj = new MyHashSet();","lang":"C#"},{"s":"/**\n * Initialize your data structure here.\n */\nvar MyHashSet = function() {\n \n};\n \n/** \n * @param {number} key\n * @return {void}\n */\nMyHashSet.prototype.add = function(key) {\n \n};\n \n/** \n * @param {number} key\n * @return {void}\n */\nMyHashSet.prototype.remove = function(key) {\n \n};\n \n/**\n * Returns true if this set contains the specified \nelement ","lang":"JavaScript"},{"s":"/**\n·*·Initialize·your·data·structure·here.\n·*/\nvar·MyHashSet·=·function()·{\n \n};\n \n/** \n * @param {number} key\n * @return {void}\n */\nMyHashSet.prototype.add = function(key) {\n \n};\n \n/** \n * @param {number} key\n * @return {void}\n */\nMyHashSet.prototype.remove = function(key) {\n \n};\n \n/**\n * Returns true if this set contains the specified \nelement ","lang":"JavaScript"},{"s":"class MyHashSet:\n \n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n \n    def add(self, key: int) -> None:\n        \n \n    def remove(self, key: int) -> None:\n        \n \n    def contains(self, key: int) -> bool:\n        \"\"\"\n        Returns true if this set contains the \nspecified element\n        \"\"\"\n        \n \n \n# Your MyHashSet object will be instantiated and \ncalled as such:\n# obj = MyHashSet()\n# obj.add(key)","lang":"Python3"},{"s":"typedef struct {\n    \n} MyHashSet;\n \n/** Initialize your data structure here. */\n \nMyHashSet* myHashSetCreate() {\n    \n}\n \nvoid myHashSetAdd(MyHashSet* obj, int key) {\n  \n}\n \nvoid myHashSetRemove(MyHashSet* obj, int key) {\n  \n}\n \n/** Returns true if this set contains the specified \nelement */\nbool myHashSetContains(MyHashSet* obj, int key) {\n  \n}\n \nvoid myHashSetFree(MyHashSet* obj) {\n    ","lang":"C"},{"s":"public class MyHashSet {\n \n    /** Initialize your data structure here. */\n    public MyHashSet() {\n \n    }\n    \n    public void Add(int key) {\n \n    }\n    \n    public void Remove(int key) {\n \n    }\n    \n    /** Returns true if this set contains the \nspecified element */\n    public bool Contains(int key) {\n \n    }\n}\n \n/**\n * Your MyHashSet object will be instantiated and \ncalled as such:\n * MyHashSet obj = new MyHashSet();","lang":"C#"},{"s":"/**\n * Initialize your data structure here.\n */\nvar MyHashSet = function() {\n \n};\n \n/** \n * @param {number} key\n * @return {void}\n */\nMyHashSet.prototype.add = function(key) {\n \n};\n \n/** \n * @param {number} key\n * @return {void}\n */\nMyHashSet.prototype.remove = function(key) {\n \n};\n \n/**\n * Returns true if this set contains the specified \nelement ","lang":"JavaScript"},{"s":"/**\n * Initialize your data structure here.\n */\nvar MyHashSet = function() {\n \n};\n \n/** \n * @param {number} key\n * @return {void}\n */\nMyHashSet.prototype.add = function(key) {\n \n};\n \n/** \n * @param {number} key\n * @return {void}\n */\nMyHashSet.prototype.remove = function(key) {\n \n};\n \n/**\n * Returns true if this set contains the specified \nelement ","lang":"JavaScript"},{"s":"class MyHashSet\n \n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n \n    end\n \n \n=begin\n    :type key: Integer\n    :rtype: Void\n=end\n    def add(key)\n \n    end\n \n \n=begin\n    :type key: Integer\n    :rtype: Void\n=end\n    def remove(key)\n \n    end","lang":"Ruby"},{"s":"class MyHashSet\n \n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n \n    end\n \n \n=begin\n    :type key: Integer\n    :rtype: Void\n=end\n    def add(key)\n \n    end\n \n \n=begin\n    :type key: Integer\n    :rtype: Void\n=end\n    def remove(key)\n \n    end","lang":"Ruby"}],"page":"705/1581","h":"705. 设计哈希集合","d":"<div class=\"notranslate\"><p>不使用任何内建的哈希表库设计一个哈希集合</p>\n\n<p>具体地说，你的设计应该包含以下的功能</p>\n\n<ul>\n\t<li><code>add(value)</code>：向哈希集合中插入一个值。</li>\n\t<li><code>contains(value)</code> ：返回哈希集合中是否存在这个值。</li>\n\t<li><code>remove(value)</code>：将给定值从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。</li>\n</ul>\n\n<p><br>\n<strong>示例:</strong></p>\n\n<pre>MyHashSet hashSet = new MyHashSet();\nhashSet.add(1); &nbsp; &nbsp; &nbsp; &nbsp; \nhashSet.add(2); &nbsp; &nbsp; &nbsp; &nbsp; \nhashSet.contains(1); &nbsp;&nbsp;&nbsp;// 返回 true\nhashSet.contains(3); &nbsp;&nbsp;&nbsp;// 返回 false (未找到)\nhashSet.add(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\nhashSet.contains(2); &nbsp;&nbsp;&nbsp;// 返回 true\nhashSet.remove(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\nhashSet.contains(2); &nbsp;&nbsp;&nbsp;// 返回  false (已经被删除)\n</pre>\n\n<p><br>\n<strong>注意：</strong></p>\n\n<ul>\n\t<li>所有的值都在&nbsp;<code>[0, 1000000]</code>的范围内。</li>\n\t<li>操作的总数目在<code>[1, 10000]</code>范围内。</li>\n\t<li>不要使用内建的哈希集合库。</li>\n</ul>\n</div>","l":"简单","s":"class MyHashSet\n \n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n \n    end\n \n \n=begin\n    :type key: Integer\n    :rtype: Void\n=end\n    def add(key)\n \n    end\n \n \n=begin\n    :type key: Integer\n    :rtype: Void\n=end\n    def remove(key)\n \n    end","lang":"Ruby","href":"https://leetcode-cn.com/problems/design-hashset/","bb":{"x":445,"y":40,"w":116,"h":28}}

