{"ls":[{"s":"class Solution {\n    public int maxChunksToSorted(int[] arr) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> \nint:","lang":"Python3"},{"s":"int maxChunksToSorted(int* arr, int arrSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int MaxChunksToSorted(int[] arr) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} arr\n * @return {number}\n */\nvar maxChunksToSorted = function(arr) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} arr\n# @return {Integer}\ndef max_chunks_to_sorted(arr)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func maxChunksToSorted(_ arr: [Int]) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func maxChunksToSorted(arr []int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def maxChunksToSorted(arr: Array[Int]): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun maxChunksToSorted(arr: IntArray): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn max_chunks_to_sorted(arr: Vec<i32>) -> \ni32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function maxChunksToSorted($arr) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function maxChunksToSorted($arr) {\n        \n    }\n}","lang":"PHP"}],"page":"769/1581","h":"769. 最多能完成排序的块","d":"<div class=\"notranslate\"><p>数组<code>arr</code>是<code>[0, 1, ..., arr.length - 1]</code>的一种排列，我们将这个数组分割成几个“块”，并将这些块分别进行排序。之后再连接起来，使得连接的结果和按升序排序后的原数组相同。</p>\n\n<p>我们最多能将数组分成多少块？</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> arr = [4,3,2,1,0]\n<strong>输出:</strong> 1\n<strong>解释:</strong>\n将数组分成2块或者更多块，都无法得到所需的结果。\n例如，分成 [4, 3], [2, 1, 0] 的结果是 [3, 4, 0, 1, 2]，这不是有序的数组。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> arr = [1,0,2,3,4]\n<strong>输出:</strong> 4\n<strong>解释:</strong>\n我们可以把它分成两块，例如 [1, 0], [2, 3, 4]。\n然而，分成 [1, 0], [2], [3], [4] 可以得到最多的块数。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>arr</code> 的长度在 <code>[1, 10]</code> 之间。</li>\n\t<li><code>arr[i]</code>是 <code>[0, 1, ..., arr.length - 1]</code>的一种排列。</li>\n</ul>\n</div>","l":"中等","s":"# @param {Integer[]} arr\n# @return {Integer}\ndef max_chunks_to_sorted(arr)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/max-chunks-to-make-sorted/","bb":{"x":445,"y":40,"w":116,"h":28}}

