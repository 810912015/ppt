{"ls":[{"s":"class Solution {\n    public int minSwapsCouples(int[] row) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def minSwapsCouples(self, row: List[int]) -> \nint:","lang":"Python3"},{"s":"int minSwapsCouples(int* row, int rowSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int MinSwapsCouples(int[] row) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} row\n * @return {number}\n */\nvar minSwapsCouples = function(row) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} row\n# @return {Integer}\ndef min_swaps_couples(row)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func minSwapsCouples(_ row: [Int]) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func minSwapsCouples(row []int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def minSwapsCouples(row: Array[Int]): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun minSwapsCouples(row: IntArray): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn min_swaps_couples(row: Vec<i32>) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $row\n     * @return Integer\n     */\n    function minSwapsCouples($row) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $row\n     * @return Integer\n     */\n    function minSwapsCouples($row) {\n        \n    }\n}","lang":"PHP"}],"page":"765/1581","h":"765. 情侣牵手","d":"<div class=\"notranslate\"><p>N 对情侣坐在连续排列的 2N 个座位上，想要牵到对方的手。 计算最少交换座位的次数，以便每对情侣可以并肩坐在一起。 <em>一</em>次交换可选择任意两人，让他们站起来交换座位。</p>\n\n<p>人和座位用&nbsp;<code>0</code>&nbsp;到&nbsp;<code>2N-1</code>&nbsp;的整数表示，情侣们按顺序编号，第一对是&nbsp;<code>(0, 1)</code>，第二对是&nbsp;<code>(2, 3)</code>，以此类推，最后一对是&nbsp;<code>(2N-2, 2N-1)</code>。</p>\n\n<p>这些情侣的初始座位&nbsp;&nbsp;<code>row[i]</code>&nbsp;是由最初始坐在第 i 个座位上的人决定的。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> row = [0, 2, 1, 3]\n<strong>输出:</strong> 1\n<strong>解释:</strong> 我们只需要交换row[1]和row[2]的位置即可。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> row = [3, 2, 0, 1]\n<strong>输出:</strong> 0\n<strong>解释:</strong> 无需交换座位，所有的情侣都已经可以手牵手了。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li><code>len(row)</code> 是偶数且数值在&nbsp;<code>[4, 60]</code>范围内。</li>\n\t<li>可以保证<code>row</code> 是序列&nbsp;<code>0...len(row)-1</code>&nbsp;的一个全排列。</li>\n</ol>\n</div>","l":"困难","s":"# @param {Integer[]} row\n# @return {Integer}\ndef min_swaps_couples(row)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/couples-holding-hands/","bb":{"x":445,"y":40,"w":116,"h":28}}

