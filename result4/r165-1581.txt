{"ls":[{"s":"# @param {String} version1\n# @param {String} version2\n# @return {Integer}\ndef compare_version(version1, version2)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func compareVersion(_ version1: String, _ \nversion2: String) -> Int {\n \n    }\n}","lang":"Swift"},{"s":"func compareVersion(version1 string, version2 \nstring) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def compareVersion(version1: String, version2: \nString): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun compareVersion(version1: String, version2: \nString): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn compare_version(version1: String, \nversion2: String) -> i32 {\n \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int compareVersion(String version1, \nString version2) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def compareVersion(self, version1: str, \nversion2: str) -> int:","lang":"Python3"},{"s":"int compareVersion(char * version1, char * version2)\n{\n \n}","lang":"C"},{"s":"public class Solution {\n    public int CompareVersion(string version1, \nstring version2) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} version1\n * @param {string} version2\n * @return {number}\n */\nvar compareVersion = function(version1, version2) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} version1\n# @param {String} version2\n# @return {Integer}\ndef compare_version(version1, version2)\n \nend","lang":"Ruby"},{"s":"# @param {String} version1\n# @param {String} version2\n# @return {Integer}\ndef compare_version(version1, version2)\n \nend","lang":"Ruby"}],"page":"165/1581","h":"165. 比较版本号","d":"<div class=\"notranslate\"><p>比较两个版本号 <em>version1&nbsp;</em>和 <em>version2</em>。<br>\n如果&nbsp;<code><em>version1&nbsp;</em>&gt;&nbsp;<em>version2</em></code>&nbsp;返回&nbsp;<code>1</code>，如果&nbsp;<code><em>version1&nbsp;</em>&lt;&nbsp;<em>version2</em></code> 返回 <code>-1</code>， 除此之外返回 <code>0</code>。</p>\n\n<p>你可以假设版本字符串非空，并且只包含数字和&nbsp;<code>.</code> 字符。</p>\n\n<p>&nbsp;<code>.</code> 字符不代表小数点，而是用于分隔数字序列。</p>\n\n<p>例如，<code>2.5</code> 不是“两个半”，也不是“差一半到三”，而是第二版中的第五个小版本。</p>\n\n<p>你可以假设版本号的每一级的默认修订版号为 <code>0</code>。例如，版本号 <code>3.4</code> 的第一级（大版本）和第二级（小版本）修订号分别为 <code>3</code> 和 <code>4</code>。其第三级和第四级修订号均为 <code>0</code>。<br>\n&nbsp;</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> <code><em>version1</em></code> = \"0.1\", <code><em>version2</em></code> = \"1.1\"\n<strong>输出:</strong> -1</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong><code><em>version1</em></code> = \"1.0.1\", <code><em>version2</em></code> = \"1\"\n<strong>输出:</strong> 1</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> <code><em>version1</em></code> = \"7.5.2.4\", <code><em>version2</em></code> = \"7.5.3\"\n<strong>输出:</strong> -1</pre>\n\n<p><strong>示例&nbsp;4：</strong></p>\n\n<pre><code><strong>输入：</strong><em>version1</em></code> = \"1.01\", <code><em>version2</em></code> = \"1.001\"\n<strong>输出：</strong>0\n<strong>解释：</strong>忽略前导零，“01” 和 “001” 表示相同的数字 “1”。</pre>\n\n<p><strong>示例 5：</strong></p>\n\n<pre><code><strong>输入：</strong><em>version1</em></code> = \"1.0\", <code><em>version2</em></code> = \"1.0.0\"\n<strong>输出：</strong>0\n<strong>解释：</strong><code><em>version1 </em></code>没有第三级修订号，这意味着它的第三级修订号默认为 “0”。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>版本字符串由以点&nbsp;（<code>.</code>）&nbsp;分隔的数字字符串组成。这个数字字符串<strong>可能</strong>有前导零。</li>\n\t<li>版本字符串不以点开始或结束，并且其中不会有两个连续的点。</li>\n</ol>\n</div>","l":"中等","s":"class Solution {","lang":"PHP","href":"https://leetcode-cn.com/problems/compare-version-numbers/","bb":{"x":445,"y":40,"w":116,"h":28}}

