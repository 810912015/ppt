{"ls":[{"s":"# @param {String[]} words\n# @param {Integer} max_width\n# @return {String[]}\ndef full_justify(words, max_width)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func fullJustify(_ words: [String], _ maxWidth: \nInt) -> [String] {\n        \n    }\n}","lang":"Swift"},{"s":"func fullJustify(words []string, maxWidth int) []\nstring {\n \n}","lang":"Go"},{"s":"object Solution {\n    def fullJustify(words: Array[String], maxWidth: \nInt): List[String] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun fullJustify(words: Array<String>, maxWidth: \nInt): List<String> {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn full_justify(words: Vec<String>, \nmax_width: i32) -> Vec<String> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public List<String> fullJustify(String[] words, \nint maxWidth) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def fullJustify(self, words: List[str], \nmaxWidth: int) -> List[str]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, \nassume caller calls free().\n */\nchar ** fullJustify(char ** words, int wordsSize, \nint maxWidth, int* returnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<string> FullJustify(string[] words,\n int maxWidth) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string[]} words\n * @param {number} maxWidth\n * @return {string[]}\n */\nvar fullJustify = function(words, maxWidth) {\n \n};","lang":"JavaScript"},{"s":"# @param {String[]} words\n# @param {Integer} max_width\n# @return {String[]}\ndef full_justify(words, max_width)\n \nend","lang":"Ruby"},{"s":"# @param {String[]} words\n# @param {Integer} max_width\n# @return {String[]}\ndef full_justify(words, max_width)\n \nend","lang":"Ruby"}],"page":"68/1581","h":"68. 文本左右对齐","d":"<div class=\"notranslate\"><p>给定一个单词数组和一个长度&nbsp;<em>maxWidth</em>，重新排版单词，使其成为每行恰好有&nbsp;<em>maxWidth</em>&nbsp;个字符，且左右两端对齐的文本。</p>\n\n<p>你应该使用“贪心算法”来放置给定的单词；也就是说，尽可能多地往每行中放置单词。必要时可用空格&nbsp;<code>' '</code>&nbsp;填充，使得每行恰好有 <em>maxWidth</em>&nbsp;个字符。</p>\n\n<p>要求尽可能均匀分配单词间的空格数量。如果某一行单词间的空格不能均匀分配，则左侧放置的空格数要多于右侧的空格数。</p>\n\n<p>文本的最后一行应为左对齐，且单词之间不插入<strong>额外的</strong>空格。</p>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>单词是指由非空格字符组成的字符序列。</li>\n\t<li>每个单词的长度大于 0，小于等于&nbsp;<em>maxWidth</em>。</li>\n\t<li>输入单词数组 <code>words</code>&nbsp;至少包含一个单词。</li>\n</ul>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>\nwords = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"]\nmaxWidth = 16\n<strong>输出:</strong>\n[\n&nbsp; &nbsp;\"This &nbsp; &nbsp;is &nbsp; &nbsp;an\",\n&nbsp; &nbsp;\"example &nbsp;of text\",\n&nbsp; &nbsp;\"justification. &nbsp;\"\n]\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong>\nwords = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"]\nmaxWidth = 16\n<strong>输出:</strong>\n[\n&nbsp; \"What &nbsp; must &nbsp; be\",\n&nbsp; \"acknowledgment &nbsp;\",\n&nbsp; \"shall be &nbsp; &nbsp; &nbsp; &nbsp;\"\n]\n<strong>解释: </strong>注意最后一行的格式应为 \"shall be    \" 而不是 \"shall     be\",\n&nbsp;    因为最后一行应为左对齐，而不是左右两端对齐。       \n     第二行同样为左对齐，这是因为这行只包含一个单词。\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入:</strong>\nwords = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\n&nbsp;        \"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"]\nmaxWidth = 20\n<strong>输出:</strong>\n[\n&nbsp; \"Science &nbsp;is &nbsp;what we\",\n  \"understand &nbsp; &nbsp; &nbsp;well\",\n&nbsp; \"enough to explain to\",\n&nbsp; \"a &nbsp;computer. &nbsp;Art is\",\n&nbsp; \"everything &nbsp;else &nbsp;we\",\n&nbsp; \"do &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"\n]\n</pre>\n</div>","l":"困难","s":"class Solution {\n \n    /**\n     * @param String[] $words\n     * @param Integer $maxWidth\n     * @return String[]\n     */\n    function fullJustify($words, $maxWidth) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/text-justification/","bb":{"x":445,"y":40,"w":116,"h":28}}

