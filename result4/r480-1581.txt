{"ls":[{"s":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Float[]}\ndef median_sliding_window(nums, k)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func medianSlidingWindow(_ nums: [Int], _ k: \nInt) -> [Double] {\n \n    }\n}","lang":"Swift"},{"s":"func medianSlidingWindow(nums []int, k int) []\nfloat64 {\n \n}","lang":"Go"},{"s":"object Solution {\n    def medianSlidingWindow(nums: Array[Int], k: \nInt): Array[Double] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun medianSlidingWindow(nums: IntArray, k: Int)\n: DoubleArray {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn median_sliding_window(nums: Vec<i32>, k: \ni32) -> Vec<f64> {\n \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public double[] medianSlidingWindow(int[] nums, \nint k) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def medianSlidingWindow(self, nums: List[int], \nk: int) -> List[float]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, \nassume caller calls free().\n */\ndouble* medianSlidingWindow(int* nums, int numsSize,\n int k, int* returnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public double[] MedianSlidingWindow(int[] nums, \nint k) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar medianSlidingWindow = function(nums, k) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Float[]}\ndef median_sliding_window(nums, k)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Float[]}\ndef median_sliding_window(nums, k)\n \nend","lang":"Ruby"}],"page":"480/1581","h":"480. 滑动窗口中位数","d":"<div class=\"notranslate\"><p>中位数是有序序列最中间的那个数。如果序列的大小是偶数，则没有最中间的数；此时中位数是最中间的两个数的平均数。</p>\n\n<p>例如：</p>\n\n<ul>\n\t<li><code>[2,3,4]</code>，中位数是&nbsp;<code>3</code></li>\n\t<li><code>[2,3]</code>，中位数是 <code>(2 + 3) / 2 = 2.5</code></li>\n</ul>\n\n<p>给你一个数组 <em>nums</em>，有一个大小为 <em>k</em> 的窗口从最左端滑动到最右端。窗口中有 <em>k</em> 个数，每次窗口向右移动 <em>1</em> 位。你的任务是找出每次窗口移动后得到的新窗口中元素的中位数，并输出由它们组成的数组。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<p>给出&nbsp;<em>nums</em> = <code>[1,3,-1,-3,5,3,6,7]</code>，以及&nbsp;<em>k</em> = 3。</p>\n\n<pre>窗口位置                      中位数\n---------------               -----\n[1  3  -1] -3  5  3  6  7       1\n 1 [3  -1  -3] 5  3  6  7      -1\n 1  3 [-1  -3  5] 3  6  7      -1\n 1  3  -1 [-3  5  3] 6  7       3\n 1  3  -1  -3 [5  3  6] 7       5\n 1  3  -1  -3  5 [3  6  7]      6\n</pre>\n\n<p>&nbsp;因此，返回该滑动窗口的中位数数组&nbsp;<code>[1,-1,-1,3,5,6]</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>你可以假设&nbsp;<code>k</code>&nbsp;始终有效，即：<code>k</code> 始终小于输入的非空数组的元素个数。</li>\n\t<li>与真实值误差在 <code>10 ^ -5</code> 以内的答案将被视作正确答案。</li>\n</ul>\n</div>","l":"困难","s":"class Solution {","lang":"PHP","href":"https://leetcode-cn.com/problems/sliding-window-median/","bb":{"x":445,"y":40,"w":116,"h":28}}

