{"ls":[{"s":"public class Solution {\n    public IList<string> \nFindAllConcatenatedWordsInADict(string[] words) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string[]} words\n * @return {string[]}\n */\nvar findAllConcatenatedWordsInADict = function\n(words) {\n \n};","lang":"JavaScript"},{"s":"# @param {String[]} words\n# @return {String[]}\ndef find_all_concatenated_words_in_a_dict(words)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func findAllConcatenatedWordsInADict(_ words: \n[String]) -> [String] {\n        \n    }\n}","lang":"Swift"},{"s":"func findAllConcatenatedWordsInADict(words []string)\n []string {\n \n}","lang":"Go"},{"s":"object Solution {\n    def findAllConcatenatedWordsInADict(words: Array\n[String]): List[String] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    public List<String> \nfindAllConcatenatedWordsInADict(String[] words) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words)\n:\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def findAllConcatenatedWordsInADict(self, \nwords: List[str]) -> List[str]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, \nassume caller calls free().\n */\nchar ** findAllConcatenatedWordsInADict(char ** \nwords, int wordsSize, int* returnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<string> \nFindAllConcatenatedWordsInADict(string[] words) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string[]} words\n * @return {string[]}\n */\nvar findAllConcatenatedWordsInADict = function\n(words) {\n \n};","lang":"JavaScript"},{"s":"# @param {String[]} words\n# @return {String[]}\ndef find_all_concatenated_words_in_a_dict(words)\n \nend","lang":"Ruby"},{"s":"# @param {String[]} words\n# @return {String[]}\ndef find_all_concatenated_words_in_a_dict(words)\n \nend","lang":"Ruby"}],"page":"472/1581","h":"472. 连接词","d":"<div class=\"notranslate\"><p>给定一个<strong>不含重复</strong>单词的列表，编写一个程序，返回给定单词列表中所有的连接词。</p>\n\n<p>连接词的定义为：一个字符串完全是由至少两个给定数组中的单词组成的。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]\n\n<strong>输出:</strong> [\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"]\n\n<strong>解释:</strong> \"catsdogcats\"由\"cats\", \"dog\" 和 \"cats\"组成; \n     \"dogcatsdog\"由\"dog\", \"cats\"和\"dog\"组成; \n     \"ratcatdogcat\"由\"rat\", \"cat\", \"dog\"和\"cat\"组成。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>给定数组的元素总数不超过 <code>10000</code>。</li>\n\t<li>给定数组中元素的长度总和不超过 <code>600000</code>。</li>\n\t<li>所有输入字符串只包含小写字母。</li>\n\t<li>不需要考虑答案输出的顺序。</li>\n</ol>\n</div>","l":"困难","s":"class Solution {\n    fun findAllConcatenatedWordsInADict(words: \nArray<String>): List<String> {\n \n    }\n}","lang":"Kotlin","href":"https://leetcode-cn.com/problems/concatenated-words/","bb":{"x":445,"y":40,"w":116,"h":28}}

