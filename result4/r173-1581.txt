{"ls":[{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass BSTIterator {\n \n    public BSTIterator(TreeNode root) {\n \n    }\n    \n    /** @return the next smallest number */\n    public int next() {\n \n    }\n    \n    /** @return whether we have a next smallest \nnumber */\n    public boolean hasNext() {\n \n    }\n}","lang":"Java"},{"s":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n \nclass BSTIterator(object):\n \n    def __init__(self, root):\n        \"\"\"\n        :type root: TreeNode\n        \"\"\"\n \n \n    def next(self):\n        \"\"\"\n        @return the next smallest number\n        :rtype: int\n        \"\"\"\n \n \n    def hasNext(self):\n        \"\"\"\n        @return whether we have a next smallest \nnumber","lang":"Python"},{"s":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n \nclass BSTIterator:\n \n    def __init__(self, root: TreeNode):\n \n \n    def next(self) -> int:\n        \"\"\"\n        @return the next smallest number\n        \"\"\"\n \n \n    def hasNext(self) -> bool:\n        \"\"\"\n        @return whether we have a next smallest \nnumber\n        \"\"\"\n \n \n ","lang":"Python3"},{"s":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n \n \n \ntypedef struct {\n \n} BSTIterator;\n \n \nBSTIterator* bSTIteratorCreate(struct TreeNode* \nroot) {\n \n}\n \n/** @return the next smallest number */\nint bSTIteratorNext(BSTIterator* obj) {\n \n}\n ","lang":"C"},{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class BSTIterator {\n \n    public BSTIterator(TreeNode root) {\n \n    }\n    \n    /** @return the next smallest number */\n    public int Next() {\n \n    }\n    \n    /** @return whether we have a next smallest \nnumber */\n    public bool HasNext() {\n \n    }\n}","lang":"C#"},{"s":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n */\nvar BSTIterator = function(root) {\n \n};\n \n/**\n * @return the next smallest number\n * @return {number}\n */\nBSTIterator.prototype.next = function() {\n \n};\n \n/**\n * @return whether we have a next smallest number\n * @return {boolean}\n */","lang":"JavaScript"},{"s":"# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n \nclass BSTIterator\n \n=begin\n    :type root: TreeNode\n=end\n    def initialize(root)\n \n    end\n \n \n=begin\n    @return the next smallest number\n    :rtype: Integer\n=end\n    def next()\n \n    end","lang":"Ruby"},{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\n \nclass BSTIterator {\n \n    init(_ root: TreeNode?) {\n \n    }\n    \n    /** @return the next smallest number */\n    func next() -> Int {\n \n    }\n    \n    /** @return whether we have a next smallest ","lang":"Swift"},{"s":"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\ntype BSTIterator struct {\n \n}\n \n \nfunc Constructor(root *TreeNode) BSTIterator {\n \n}\n \n \n/** @return the next smallest number */\nfunc (this *BSTIterator) Next() int {\n \n}\n \n \n/** @return whether we have a next smallest number \n*/","lang":"Go"},{"s":"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nclass BSTIterator(_root: TreeNode) {\n \n    /** @return the next smallest number */\n    def next(): Int = {\n \n    }\n \n    /** @return whether we have a next smallest \nnumber */\n    def hasNext(): Boolean = {\n \n    }\n \n}\n \n/**\n * Your BSTIterator object will be instantiated and \ncalled as such:","lang":"Scala"},{"s":"/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass BSTIterator(root: TreeNode?) {\n \n    /** @return the next smallest number */\n    fun next(): Int {\n \n    }\n \n    /** @return whether we have a next smallest \nnumber */\n    fun hasNext(): Boolean {\n \n    }\n \n}\n \n/**","lang":"Kotlin"},{"s":"// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nstruct BSTIterator {\n \n}\n \n \n/**\n * `&self` means the method takes an immutable \nreference.","lang":"Rust"},{"s":"/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = \n$value; }\n * }\n */\nclass BSTIterator {\n    /**\n     * @param TreeNode $root\n     */\n    function __construct($root) {\n \n    }\n \n    /**\n     * @return the next smallest number\n     * @return Integer\n     */\n    function next() {\n \n    }\n ","lang":"PHP"},{"s":"/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = \n$value; }\n * }\n */\nclass BSTIterator {\n    /**\n     * @param TreeNode $root\n     */\n    function __construct($root) {\n \n    }\n \n    /**\n     * @return the next smallest number\n     * @return Integer\n     */\n    function next() {\n \n    }\n ","lang":"PHP"}],"page":"173/1581","h":"173. 二叉搜索树迭代器","d":"<div class=\"notranslate\"><p>实现一个二叉搜索树迭代器。你将使用二叉搜索树的根节点初始化迭代器。</p>\n\n<p>调用 <code>next()</code> 将返回二叉搜索树中的下一个最小的数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<p><strong><img style=\"height: 178px; width: 189px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/25/bst-tree.png\" alt=\"\"></strong></p>\n\n<pre>BSTIterator iterator = new BSTIterator(root);\niterator.next();    // 返回 3\niterator.next();    // 返回 7\niterator.hasNext(); // 返回 true\niterator.next();    // 返回 9\niterator.hasNext(); // 返回 true\niterator.next();    // 返回 15\niterator.hasNext(); // 返回 true\niterator.next();    // 返回 20\niterator.hasNext(); // 返回 false</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>next()</code>&nbsp;和&nbsp;<code>hasNext()</code>&nbsp;操作的时间复杂度是&nbsp;O(1)，并使用&nbsp;O(<em>h</em>) 内存，其中&nbsp;<em>h&nbsp;</em>是树的高度。</li>\n\t<li>你可以假设&nbsp;<code>next()</code>&nbsp;调用总是有效的，也就是说，当调用 <code>next()</code>&nbsp;时，BST 中至少存在一个下一个最小的数。</li>\n</ul>\n</div>","l":"中等","s":"# Definition for a binary tree node.","lang":"Ruby","href":"https://leetcode-cn.com/problems/binary-search-tree-iterator/","bb":{"x":445,"y":40,"w":116,"h":28}}

