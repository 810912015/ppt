{"ls":[{"s":"# @param {String} s\n# @param {String[]} words\n# @return {Integer[]}\ndef find_substring(s, words)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func findSubstring(_ s: String, _ words: \n[String]) -> [Int] {\n        \n    }\n}","lang":"Swift"},{"s":"func findSubstring(s string, words []string) []int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def findSubstring(s: String, words: Array\n[String]): List[Int] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun findSubstring(s: String, words: \nArray<String>): List<Int> {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn find_substring(s: String, words: \nVec<String>) -> Vec<i32> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public List<Integer> findSubstring(String s, \nString[] words) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def findSubstring(self, s: str, words: List[str]\n) -> List[int]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, \nassume caller calls free().\n */\nint* findSubstring(char * s, char ** words, int \nwordsSize, int* returnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<int> FindSubstring(string s, string\n[] words) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} s\n * @param {string[]} words\n * @return {number[]}\n */\nvar findSubstring = function(s, words) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} s\n# @param {String[]} words\n# @return {Integer[]}\ndef find_substring(s, words)\n \nend","lang":"Ruby"},{"s":"# @param {String} s\n# @param {String[]} words\n# @return {Integer[]}\ndef find_substring(s, words)\n \nend","lang":"Ruby"}],"page":"30/1581","h":"30. 串联所有单词的子串","d":"<div class=\"notranslate\"><p>给定一个字符串&nbsp;<strong>s&nbsp;</strong>和一些长度相同的单词&nbsp;<strong>words。</strong>找出 <strong>s </strong>中恰好可以由&nbsp;<strong>words </strong>中所有单词串联形成的子串的起始位置。</p>\n\n<p>注意子串要与&nbsp;<strong>words </strong>中的单词完全匹配，中间不能有其他字符，但不需要考虑&nbsp;<strong>words&nbsp;</strong>中单词串联的顺序。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：\n  s =</strong> \"barfoothefoobarman\",\n<strong>  words = </strong>[\"foo\",\"bar\"]\n<strong>输出：</strong><code>[0,9]</code>\n<strong>解释：</strong>\n从索引 0 和 9 开始的子串分别是 \"barfoo\" 和 \"foobar\" 。\n输出的顺序不重要, [9,0] 也是有效答案。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：\n  s =</strong> \"wordgoodgoodgoodbestword\",\n<strong>  words = </strong>[\"word\",\"good\",\"best\",\"word\"]\n<code><strong>输出：</strong>[]</code>\n</pre>\n</div>","l":"困难","s":"class Solution {","lang":"PHP","href":"https://leetcode-cn.com/problems/substring-with-concatenation-of-all-words/","bb":{"x":445,"y":40,"w":116,"h":28}}

