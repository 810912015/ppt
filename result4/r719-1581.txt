{"ls":[{"s":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef smallest_distance_pair(nums, k)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func smallestDistancePair(_ nums: [Int], _ k: \nInt) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func smallestDistancePair(nums []int, k int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def smallestDistancePair(nums: Array[Int], k: \nInt): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun smallestDistancePair(nums: IntArray, k: Int)\n: Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn smallest_distance_pair(nums: Vec<i32>, \nk: i32) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int smallestDistancePair(int[] nums, int \nk) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def smallestDistancePair(self, nums: List[int], \nk: int) -> int:","lang":"Python3"},{"s":"int smallestDistancePair(int* nums, int numsSize, \nint k){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int SmallestDistancePair(int[] nums, int \nk) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar smallestDistancePair = function(nums, k) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef smallest_distance_pair(nums, k)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef smallest_distance_pair(nums, k)\n \nend","lang":"Ruby"}],"page":"719/1581","h":"719. 找出第 k 小的距离对","d":"<div class=\"notranslate\"><p>给定一个整数数组，返回所有数对之间的第 k 个最小<strong>距离</strong>。一对 (A, B) 的距离被定义为 A 和 B 之间的绝对差值。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入：</strong>\nnums = [1,3,1]\nk = 1\n<strong>输出：0</strong> \n<strong>解释：</strong>\n所有数对如下：\n(1,3) -&gt; 2\n(1,1) -&gt; 0\n(3,1) -&gt; 2\n因此第 1 个最小距离的数对是 (1,1)，它们之间的距离为 0。\n</pre>\n\n<p><strong>提示:</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= len(nums) &lt;= 10000</code>.</li>\n\t<li><code>0 &lt;= nums[i] &lt; 1000000</code>.</li>\n\t<li><code>1 &lt;= k &lt;= len(nums) * (len(nums) - 1) / 2</code>.</li>\n</ol>\n</div>","l":"困难","s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function smallestDistancePair($nums, $k) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/find-k-th-smallest-pair-distance/","bb":{"x":445,"y":40,"w":116,"h":28}}

