{"ls":[{"s":"class Solution {\n    public boolean canTransform(String start, \nString end) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def canTransform(self, start, end):\n        \"\"\"\n        :type start: str\n        :type end: str\n        :rtype: bool\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def canTransform(self, start: str, end: str) -> \nbool:","lang":"Python3"},{"s":"bool canTransform(char * start, char * end){\n \n}","lang":"C"},{"s":"public class Solution {\n    public bool CanTransform(string start, string \nend) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} start\n * @param {string} end\n * @return {boolean}\n */\nvar canTransform = function(start, end) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} start\n# @param {String} end\n# @return {Boolean}\ndef can_transform(start, end)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func canTransform(_ start: String, _ end: \nString) -> Bool {\n        \n    }\n}","lang":"Swift"},{"s":"func canTransform(start string, end string) bool {\n \n}","lang":"Go"},{"s":"object Solution {\n    def canTransform(start: String, end: String): \nBoolean = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun canTransform(start: String, end: String): \nBoolean {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn can_transform(start: String, end: String)\n -> bool {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param String $start\n     * @param String $end\n     * @return Boolean\n     */\n    function canTransform($start, $end) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param String $start\n     * @param String $end\n     * @return Boolean\n     */\n    function canTransform($start, $end) {\n        \n    }\n}","lang":"PHP"}],"page":"777/1581","h":"777. 在LR字符串中交换相邻字符","d":"<div class=\"notranslate\"><p>在一个由 <code>'L'</code> , <code>'R'</code> 和 <code>'X'</code> 三个字符组成的字符串（例如<code>\"RXXLRXRXL\"</code>）中进行移动操作。一次移动操作指用一个<code>\"LX\"</code>替换一个<code>\"XL\"</code>，或者用一个<code>\"XR\"</code>替换一个<code>\"RX\"</code>。现给定起始字符串<code>start</code>和结束字符串<code>end</code>，请编写代码，当且仅当存在一系列移动操作使得<code>start</code>可以转换成<code>end</code>时， 返回<code>True</code>。</p>\n\n<p><strong>示例 :</strong></p>\n\n<pre><strong>输入:</strong> start = \"RXXLRXRXL\", end = \"XRLXXRRLX\"\n<strong>输出:</strong> True\n<strong>解释:</strong>\n我们可以通过以下几步将start转换成end:\nRXXLRXRXL -&gt;\nXRXLRXRXL -&gt;\nXRLXRXRXL -&gt;\nXRLXXRRXL -&gt;\nXRLXXRRLX\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= len(start) = len(end) &lt;= 10000</code>。</li>\n\t<li><code>start</code>和<code>end</code>中的字符串仅限于<code>'L'</code>, <code>'R'</code>和<code>'X'</code>。</li>\n</ol>\n</div>","l":"中等","s":"# @param {String} start\n# @param {String} end\n# @return {Boolean}\ndef can_transform(start, end)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/swap-adjacent-in-lr-string/","bb":{"x":445,"y":40,"w":116,"h":28}}

