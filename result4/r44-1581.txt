{"ls":[{"s":"class Solution {\n    public boolean isMatch(String s, String p) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def isMatch(self, s: str, p: str) -> bool:","lang":"Python3"},{"s":"bool isMatch(char * s, char * p){\n \n}","lang":"C"},{"s":"public class Solution {\n    public bool IsMatch(string s, string p) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */\nvar isMatch = function(s, p) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} s\n# @param {String} p\n# @return {Boolean}\ndef is_match(s, p)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func isMatch(_ s: String, _ p: String) -> Bool {\n        \n    }\n}","lang":"Swift"},{"s":"func isMatch(s string, p string) bool {\n \n}","lang":"Go"},{"s":"object Solution {\n    def isMatch(s: String, p: String): Boolean = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun isMatch(s: String, p: String): Boolean {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn is_match(s: String, p: String) -> bool {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param String $s\n     * @param String $p\n     * @return Boolean\n     */\n    function isMatch($s, $p) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param String $s\n     * @param String $p\n     * @return Boolean\n     */\n    function isMatch($s, $p) {\n        \n    }\n}","lang":"PHP"}],"page":"44/1581","h":"44. 通配符匹配","d":"<div class=\"notranslate\"><p>给定一个字符串&nbsp;(<code>s</code>) 和一个字符模式&nbsp;(<code>p</code>) ，实现一个支持&nbsp;<code>'?'</code>&nbsp;和&nbsp;<code>'*'</code>&nbsp;的通配符匹配。</p>\n\n<pre>'?' 可以匹配任何单个字符。\n'*' 可以匹配任意字符串（包括空字符串）。\n</pre>\n\n<p>两个字符串<strong>完全匹配</strong>才算匹配成功。</p>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li><code>s</code>&nbsp;可能为空，且只包含从&nbsp;<code>a-z</code>&nbsp;的小写字母。</li>\n\t<li><code>p</code>&nbsp;可能为空，且只包含从&nbsp;<code>a-z</code>&nbsp;的小写字母，以及字符&nbsp;<code>?</code>&nbsp;和&nbsp;<code>*</code>。</li>\n</ul>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong>\ns = \"aa\"\np = \"a\"\n<strong>输出:</strong> false\n<strong>解释:</strong> \"a\" 无法匹配 \"aa\" 整个字符串。</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong>\ns = \"aa\"\np = \"*\"\n<strong>输出:</strong> true\n<strong>解释:</strong>&nbsp;'*' 可以匹配任意字符串。\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入:</strong>\ns = \"cb\"\np = \"?a\"\n<strong>输出:</strong> false\n<strong>解释:</strong>&nbsp;'?' 可以匹配 'c', 但第二个 'a' 无法匹配 'b'。\n</pre>\n\n<p><strong>示例&nbsp;4:</strong></p>\n\n<pre><strong>输入:</strong>\ns = \"adceb\"\np = \"*a*b\"\n<strong>输出:</strong> true\n<strong>解释:</strong>&nbsp;第一个 '*' 可以匹配空字符串, 第二个 '*' 可以匹配字符串 \"dce\".\n</pre>\n\n<p><strong>示例&nbsp;5:</strong></p>\n\n<pre><strong>输入:</strong>\ns = \"acdcb\"\np = \"a*c?b\"\n<strong>输入:</strong> false</pre>\n</div>","l":"困难","s":"# @param {String} s","lang":"Ruby","href":"https://leetcode-cn.com/problems/wildcard-matching/","bb":{"x":445,"y":40,"w":116,"h":28}}

