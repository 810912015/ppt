{"ls":[{"s":"/**\n * // This is the interface that allows for \ncreating nested lists.\n * // You should not implement it, or speculate \nabout its implementation\n * public interface NestedInteger {\n *     // Constructor initializes an empty nested \nlist.\n *     public NestedInteger();\n *\n *     // Constructor initializes a single integer.\n *     public NestedInteger(int value);\n *\n *     // @return true if this NestedInteger holds \na single integer, rather than a nested list.\n *     public boolean isInteger();\n *\n *     // @return the single integer that this \nNestedInteger holds, if it holds a single integer\n *     // Return null if this NestedInteger holds a \nnested list\n *     public Integer getInteger();\n *\n *     // Set this NestedInteger to hold a single \ninteger.\n *     public void setInteger(int value);","lang":"Java"},{"s":"# \"\"\"\n# This is the interface that allows for creating \nnested lists.\n# You should not implement it, or speculate about \nits implementation\n# \"\"\"\n#class NestedInteger(object):\n#    def __init__(self, value=None):\n#        \"\"\"\n#        If value is not specified, initializes an \nempty list.\n#        Otherwise initializes a single integer \nequal to value.\n#        \"\"\"\n#\n#    def isInteger(self):\n#        \"\"\"\n#        @return True if this NestedInteger holds a \nsingle integer, rather than a nested list.\n#        :rtype bool\n#        \"\"\"\n#\n#    def add(self, elem):\n#        \"\"\"\n#        Set this NestedInteger to hold a nested \nlist and adds a nested integer elem to it.","lang":"Python"},{"s":"# \"\"\"\n# This is the interface that allows for creating \nnested lists.\n# You should not implement it, or speculate about \nits implementation\n# \"\"\"\n#class NestedInteger:\n#    def __init__(self, value=None):\n#        \"\"\"\n#        If value is not specified, initializes an \nempty list.\n#        Otherwise initializes a single integer \nequal to value.\n#        \"\"\"\n#\n#    def isInteger(self):\n#        \"\"\"\n#        @return True if this NestedInteger holds a \nsingle integer, rather than a nested list.\n#        :rtype bool\n#        \"\"\"\n#\n#    def add(self, elem):\n#        \"\"\"\n#        Set this NestedInteger to hold a nested \nlist and adds a nested integer elem to it.","lang":"Python3"},{"s":"/**\n * \n****************************************************\n*****************\n * // This is the interface that allows for \ncreating nested lists.\n * // You should not implement it, or speculate \nabout its implementation\n * \n****************************************************\n*****************\n *\n * // Initializes an empty nested list and return a \nreference to the nested integer.\n * struct NestedInteger *NestedIntegerInit();\n *\n * // Return true if this NestedInteger holds a \nsingle integer, rather than a nested list.\n * bool NestedIntegerIsInteger(struct NestedInteger \n*);\n *\n * // Return the single integer that this \nNestedInteger holds, if it holds a single integer\n * // The result is undefined if this NestedInteger \nholds a nested list\n * int NestedIntegerGetInteger(struct NestedInteger ","lang":"C"},{"s":"/**\n * // This is the interface that allows for \ncreating nested lists.\n * // You should not implement it, or speculate \nabout its implementation\n * interface NestedInteger {\n *\n *     // Constructor initializes an empty nested \nlist.\n *     public NestedInteger();\n *\n *     // Constructor initializes a single integer.\n *     public NestedInteger(int value);\n *\n *     // @return true if this NestedInteger holds \na single integer, rather than a nested list.\n *     bool IsInteger();\n *\n *     // @return the single integer that this \nNestedInteger holds, if it holds a single integer\n *     // Return null if this NestedInteger holds a \nnested list\n *     int GetInteger();\n *\n *     // Set this NestedInteger to hold a single \ninteger.","lang":"C#"},{"s":"/**\n * // This is the interface that allows for \ncreating nested lists.\n * // You should not implement it, or speculate \nabout its implementation\n * function NestedInteger() {\n *\n *     Return true if this NestedInteger holds a \nsingle integer, rather than a nested list.\n *     @return {boolean}\n *     this.isInteger = function() {\n *         ...\n *     };\n *\n *     Return the single integer that this \nNestedInteger holds, if it holds a single integer\n *     Return null if this NestedInteger holds a \nnested list\n *     @return {integer}\n *     this.getInteger = function() {\n *         ...\n *     };\n *\n *     Set this NestedInteger to hold a single \ninteger equal to value.\n *     @return {void}","lang":"JavaScript"},{"s":"# This is the interface that allows for creating \nnested lists.\n# You should not implement it, or speculate about \nits implementation\n#\n#class NestedInteger\n#    def is_integer()\n#        \"\"\"\n#        Return true if this NestedInteger holds a \nsingle integer, rather than a nested list.\n#        @return {Boolean}\n#        \"\"\"\n#\n#    def get_integer()\n#        \"\"\"\n#        Return the single integer that this \nNestedInteger holds, if it holds a single integer\n#        Return nil if this NestedInteger holds a \nnested list\n#        @return {Integer}\n#        \"\"\"\n#\n#    def set_integer(value)\n#        \"\"\"\n#        Set this NestedInteger to hold a single \ninteger equal to value.","lang":"Ruby"},{"s":"/**\n * // This is the interface that allows for \ncreating nested lists.\n * // You should not implement it, or speculate \nabout its implementation\n * class NestedInteger {\n *     // Return true if this NestedInteger holds a \nsingle integer, rather than a nested list.\n *     public func isInteger() -> Bool\n *\n *     // Return the single integer that this \nNestedInteger holds, if it holds a single integer\n *     // The result is undefined if this \nNestedInteger holds a nested list\n *     public func getInteger() -> Int\n *\n *     // Set this NestedInteger to hold a single \ninteger.\n *     public func setInteger(value: Int)\n *\n *     // Set this NestedInteger to hold a nested \nlist and adds a nested integer to it.\n *     public func add(elem: NestedInteger)\n *\n *     // Return the nested list that this \nNestedInteger holds, if it holds a nested list","lang":"Swift"},{"s":"/**\n * // This is the interface that allows for \ncreating nested lists.\n * // You should not implement it, or speculate \nabout its implementation\n * type NestedInteger struct {\n * }\n *\n * // Return true if this NestedInteger holds a \nsingle integer, rather than a nested list.\n * func (n NestedInteger) IsInteger() bool {}\n *\n * // Return the single integer that this \nNestedInteger holds, if it holds a single integer\n * // The result is undefined if this NestedInteger \nholds a nested list\n * // So before calling this method, you should \nhave a check\n * func (n NestedInteger) GetInteger() int {}\n *\n * // Set this NestedInteger to hold a single \ninteger.\n * func (n *NestedInteger) SetInteger(value int) {}\n *\n * // Set this NestedInteger to hold a nested list \nand adds a nested integer to it.","lang":"Go"},{"s":"/**\n * // This is the interface that allows for \ncreating nested lists.\n * // You should not implement it, or speculate \nabout its implementation\n * class NestedInteger {\n *\n *   // Return true if this NestedInteger holds a \nsingle integer, rather than a nested list.\n *   def isInteger: Boolean = {}\n *\n *   // Return the single integer that this \nNestedInteger holds, if it holds a single integer\n *   def getInteger: Int = {}\n *\n *   // Set this NestedInteger to hold a single \ninteger.\n *   def setInteger(i: Int) = {}\n *\n *   // Return the nested list that this \nNestedInteger holds, if it holds a nested list\n *   def getList = {}\n *\n *   // Set this NestedInteger to hold a nested \nlist and adds a nested integer to it.\n *   def add(ni: NestedInteger) = {}","lang":"Scala"},{"s":"/**\n * // This is the interface that allows for \ncreating nested lists.\n * // You should not implement it, or speculate \nabout its implementation\n * class NestedInteger {\n *     // Constructor initializes an empty nested \nlist.\n *     constructor()\n *\n *     // Constructor initializes a single integer.\n *     constructor(value: Int)\n *\n *     // @return true if this NestedInteger holds \na single integer, rather than a nested list.\n *     fun isInteger(): Boolean\n *\n *     // @return the single integer that this \nNestedInteger holds, if it holds a single integer\n *     // Return null if this NestedInteger holds a \nnested list\n *     fun getInteger(): Int?\n *\n *     // Set this NestedInteger to hold a single \ninteger.\n *     fun setInteger(value: Int): Unit","lang":"Kotlin"},{"s":"// #[derive(Debug, PartialEq, Eq)]\n// pub enum NestedInteger {\n//   Int(i32),\n//   List(Vec<NestedInteger>)\n// }\nimpl Solution {\n    pub fn deserialize(s: String) -> NestedInteger {\n        \n    }\n}","lang":"Rust"},{"s":"/**\n * // This is the interface that allows for \ncreating nested lists.\n * // You should not implement it, or speculate \nabout its implementation\n * class NestedInteger {\n \n *     // if value is not specified, initializes an \nempty list.\n *     // Otherwise initializes a single integer \nequal to value.\n *     function __construct($value = null)\n \n *     // Return true if this NestedInteger holds a \nsingle integer, rather than a nested list.\n *     function isInteger() : bool\n *\n *     // Return the single integer that this \nNestedInteger holds, if it holds a single integer\n *     // The result is undefined if this \nNestedInteger holds a nested list\n *     function getInteger()\n *\n *     // Set this NestedInteger to hold a single \ninteger.\n *     function setInteger($i) : void","lang":"PHP"},{"s":"/**\n * // This is the interface that allows for \ncreating nested lists.\n * // You should not implement it, or speculate \nabout its implementation\n * class NestedInteger {\n \n *     // if value is not specified, initializes an \nempty list.\n *     // Otherwise initializes a single integer \nequal to value.\n *     function __construct($value = null)\n \n *     // Return true if this NestedInteger holds a \nsingle integer, rather than a nested list.\n *     function isInteger() : bool\n *\n *     // Return the single integer that this \nNestedInteger holds, if it holds a single integer\n *     // The result is undefined if this \nNestedInteger holds a nested list\n *     function getInteger()\n *\n *     // Set this NestedInteger to hold a single \ninteger.\n *     function setInteger($i) : void","lang":"PHP"}],"page":"385/1581","h":"385. 迷你语法分析器","d":"<div class=\"notranslate\"><p>给定一个用字符串表示的整数的嵌套列表，实现一个解析它的语法分析器。</p>\n\n<p>列表中的每个元素只可能是整数或整数嵌套列表</p>\n\n<p><strong>提示：</strong>你可以假定这些字符串都是格式良好的：</p>\n\n<ul>\n\t<li>字符串非空</li>\n\t<li>字符串不包含空格</li>\n\t<li>字符串只包含数字<code>0-9</code>, <code>[</code>, <code>-</code> <code>,</code>, <code>]</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>给定 s = \"324\",\n\n你应该返回一个 NestedInteger 对象，其中只包含整数值 324。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>给定 s = \"[123,[456,[789]]]\",\n\n返回一个 NestedInteger 对象包含一个有两个元素的嵌套列表：\n\n1. 一个 integer 包含值 123\n2. 一个包含两个元素的嵌套列表：\n    i.  一个 integer 包含值 456\n    ii. 一个包含一个元素的嵌套列表\n         a. 一个 integer 包含值 789\n</pre>\n\n<p>&nbsp;</p>\n</div>","l":"中等","s":"# This is the interface that allows for creating \nnested lists.\n# You should not implement it, or speculate about \nits implementation\n#\n#class NestedInteger\n#    def is_integer()\n#        \"\"\"\n#        Return true if this NestedInteger holds a \nsingle integer, rather than a nested list.\n#        @return {Boolean}\n#        \"\"\"\n#\n#    def get_integer()\n#        \"\"\"\n#        Return the single integer that this \nNestedInteger holds, if it holds a single integer\n#        Return nil if this NestedInteger holds a \nnested list\n#        @return {Integer}\n#        \"\"\"\n#\n#    def set_integer(value)\n#        \"\"\"\n#        Set this NestedInteger to hold a single \ninteger equal to value.","lang":"Ruby","href":"https://leetcode-cn.com/problems/mini-parser/","bb":{"x":445,"y":40,"w":116,"h":28}}

