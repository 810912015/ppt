{"ls":[{"s":"class Solution {\n    public boolean canJump(int[] nums) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def canJump(self, nums: List[int]) -> bool:","lang":"Python3"},{"s":"bool canJump(int* nums, int numsSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public bool CanJump(int[] nums) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canJump = function(nums) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums\n# @return {Boolean}\ndef can_jump(nums)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func canJump(_ nums: [Int]) -> Bool {\n        \n    }\n}","lang":"Swift"},{"s":"func canJump(nums []int) bool {\n \n}","lang":"Go"},{"s":"object Solution {\n    def canJump(nums: Array[Int]): Boolean = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun canJump(nums: IntArray): Boolean {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn can_jump(nums: Vec<i32>) -> bool {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function canJump($nums) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function canJump($nums) {\n        \n    }\n}","lang":"PHP"}],"page":"55/1581","h":"55. 跳跃游戏","d":"<div class=\"notranslate\"><p>给定一个非负整数数组，你最初位于数组的第一个位置。</p>\n\n<p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p>\n\n<p>判断你是否能够到达最后一个位置。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> [2,3,1,1,4]\n<strong>输出:</strong> true\n<strong>解释:</strong> 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> [3,2,1,0,4]\n<strong>输出:</strong> false\n<strong>解释:</strong> 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。\n</pre>\n</div>","l":"中等","s":"# @param {Integer[]} nums","lang":"Ruby","href":"https://leetcode-cn.com/problems/jump-game/","bb":{"x":445,"y":40,"w":116,"h":28}}

