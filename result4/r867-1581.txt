{"ls":[{"s":"class Solution {\n    public int[][] transpose(int[][] A) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def transpose(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def transpose(self, A: List[List[int]]) -> List\n[List[int]]:","lang":"Python3"},{"s":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as \n*returnColumnSizes array.\n * Note: Both returned array and *columnSizes array \nmust be malloced, assume caller calls free().\n */\nint** transpose(int** A, int ASize, int* AColSize, \nint* returnSize, int** returnColumnSizes){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int[][] Transpose(int[][] A) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} A\n * @return {number[][]}\n */\nvar transpose = function(A) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[][]} a\n# @return {Integer[][]}\ndef transpose(a)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func transpose(_ A: [[Int]]) -> [[Int]] {\n        \n    }\n}","lang":"Swift"},{"s":"func transpose(A [][]int) [][]int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def transpose(A: Array[Array[Int]]): Array[Array\n[Int]] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun transpose(A: Array<IntArray>): \nArray<IntArray> {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn transpose(a: Vec<Vec<i32>>) -> \nVec<Vec<i32>> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[][] $A\n     * @return Integer[][]\n     */\n    function transpose($A) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[][] $A\n     * @return Integer[][]\n     */\n    function transpose($A) {\n        \n    }\n}","lang":"PHP"}],"page":"867/1581","h":"867. 转置矩阵","d":"<div class=\"notranslate\"><p>给定一个矩阵&nbsp;<code>A</code>，&nbsp;返回&nbsp;<code>A</code>&nbsp;的转置矩阵。</p>\n\n<p>矩阵的转置是指将矩阵的主对角线翻转，交换矩阵的行索引与列索引。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[[1,2,3],[4,5,6],[7,8,9]]\n<strong>输出：</strong>[[1,4,7],[2,5,8],[3,6,9]]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[[1,2,3],[4,5,6]]\n<strong>输出：</strong>[[1,4],[2,5],[3,6]]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length&nbsp;&lt;= 1000</code></li>\n\t<li><code>1 &lt;= A[0].length&nbsp;&lt;= 1000</code></li>\n</ol>\n</div>","l":"简单","s":"# @param {Integer[][]} a","lang":"Ruby","href":"https://leetcode-cn.com/problems/transpose-matrix/","bb":{"x":445,"y":40,"w":116,"h":28}}

