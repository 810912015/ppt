{"ls":[{"s":"class Solution {\n    public double[] calcEquation(List<List<String>> \nequations, double[] values, List<List<String>> \nqueries) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def calcEquation(self, equations, values, \nqueries):\n        \"\"\"\n        :type equations: List[List[str]]\n        :type values: List[float]\n        :type queries: List[List[str]]\n        :rtype: List[float]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def calcEquation(self, equations: List[List[str]\n], values: List[float], queries: List[List[str]]) \n-> List[float]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, \nassume caller calls free().\n */\ndouble* calcEquation(char *** equations, int \nequationsSize, int* equationsColSize, double* \nvalues, int valuesSize, char *** queries, int \nqueriesSize, int* queriesColSize, int* returnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public double[] CalcEquation\n(IList<IList<string>> equations, double[] values, \nIList<IList<string>> queries) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string[][]} equations\n * @param {number[]} values\n * @param {string[][]} queries\n * @return {number[]}\n */\nvar calcEquation = function(equations, values, \nqueries) {\n \n};","lang":"JavaScript"},{"s":"# @param {String[][]} equations\n# @param {Float[]} values\n# @param {String[][]} queries\n# @return {Float[]}\ndef calc_equation(equations, values, queries)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func calcEquation(_ equations: [[String]], _ \nvalues: [Double], _ queries: [[String]]) -> [Double]\n {\n        \n    }\n}","lang":"Swift"},{"s":"func calcEquation(equations [][]string, values []\nfloat64, queries [][]string) []float64 {\n \n}","lang":"Go"},{"s":"object Solution {\n    def calcEquation(equations: List[List[String]], \nvalues: Array[Double], queries: List[List[String]])\n: Array[Double] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun calcEquation(equations: List<List<String>>, \nvalues: DoubleArray, queries: List<List<String>>): \nDoubleArray {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn calc_equation(equations: \nVec<Vec<String>>, values: Vec<f64>, queries: \nVec<Vec<String>>) -> Vec<f64> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param String[][] $equations\n     * @param Float[] $values\n     * @param String[][] $queries\n     * @return Float[]\n     */\n    function calcEquation($equations, $values, \n$queries) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param String[][] $equations\n     * @param Float[] $values\n     * @param String[][] $queries\n     * @return Float[]\n     */\n    function calcEquation($equations, $values, \n$queries) {\n        \n    }\n}","lang":"PHP"}],"page":"399/1581","h":"399. 除法求值","d":"<div class=\"notranslate\"><p>给出方程式&nbsp;<code>A / B = k</code>, 其中&nbsp;<code>A</code> 和&nbsp;<code>B</code> 均为代表字符串的变量，&nbsp;<code>k</code> 是一个浮点型数字。根据已知方程式求解问题，并返回计算结果。如果结果不存在，则返回&nbsp;<code>-1.0</code>。</p>\n\n<p><strong>示例 :</strong><br>\n给定&nbsp;<code>a / b = 2.0, b / c = 3.0</code><br>\n问题: <code> a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?&nbsp;</code><br>\n返回&nbsp;<code>[6.0, 0.5, -1.0, 1.0, -1.0 ]</code></p>\n\n<p>输入为: <code> vector&lt;pair&lt;string, string&gt;&gt; equations, vector&lt;double&gt;&amp; values, vector&lt;pair&lt;string, string&gt;&gt; queries</code>(方程式，方程式结果，问题方程式)，&nbsp;其中&nbsp;<code>equations.size() == values.size()</code>，即方程式的长度与方程式结果长度相等（程式与结果一一对应），并且结果值均为正数。以上为方程式的描述。&nbsp;返回<code>vector&lt;double&gt;</code>类型。</p>\n\n<p>基于上述例子，输入如下：</p>\n\n<pre>equations(方程式) = [ [\"a\", \"b\"], [\"b\", \"c\"] ],\nvalues(方程式结果) = [2.0, 3.0],\nqueries(问题方程式) = [ [\"a\", \"c\"], [\"b\", \"a\"], [\"a\", \"e\"], [\"a\", \"a\"], [\"x\", \"x\"] ]. \n</pre>\n\n<p>输入总是有效的。你可以假设除法运算中不会出现除数为0的情况，且不存在任何矛盾的结果。</p>\n</div>","l":"中等","s":"# @param {String[][]} equations\n# @param {Float[]} values\n# @param {String[][]} queries\n# @return {Float[]}\ndef calc_equation(equations, values, queries)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/evaluate-division/","bb":{"x":445,"y":40,"w":116,"h":28}}

