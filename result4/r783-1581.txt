{"ls":[{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int minDiffInBST(TreeNode root) {\n \n    }\n}","lang":"Java"},{"s":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n \nclass Solution(object):\n    def minDiffInBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n \nclass Solution:\n    def minDiffInBST(self, root: TreeNode) -> int:","lang":"Python3"},{"s":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n \n \nint minDiffInBST(struct TreeNode* root){\n \n}","lang":"C"},{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int MinDiffInBST(TreeNode root) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar minDiffInBST = function(root) {\n \n};","lang":"JavaScript"},{"s":"/**\n·*·Definition·for·a·binary·tree·node.\n·*·function·TreeNode(val)·{\n·*·····this.val·=·val;\n·*·····this.left·=·this.right·=·null;\n·*·}\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar minDiffInBST = function(root) {\n \n};","lang":"JavaScript"},{"s":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n \nclass Solution:\n    def minDiffInBST(self, root: TreeNode) -> int:","lang":"Python3"},{"s":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n \n \nint minDiffInBST(struct TreeNode* root){\n \n}","lang":"C"},{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int MinDiffInBST(TreeNode root) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar minDiffInBST = function(root) {\n \n};","lang":"JavaScript"},{"s":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar minDiffInBST = function(root) {\n \n};","lang":"JavaScript"},{"s":"# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n \n# @param {TreeNode} root\n# @return {Integer}\ndef min_diff_in_bst(root)\n \nend","lang":"Ruby"},{"s":"# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n \n# @param {TreeNode} root\n# @return {Integer}\ndef min_diff_in_bst(root)\n \nend","lang":"Ruby"}],"page":"783/1581","h":"783. 二叉搜索树结点最小距离","d":"<div class=\"notranslate\"><p>给定一个二叉搜索树的根结点&nbsp;<code>root</code>，返回树中任意两节点的差的最小值。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入:</strong> root = [4,2,6,1,3,null,null]\n<strong>输出:</strong> 1\n<strong>解释:</strong>\n注意，root是树结点对象(TreeNode object)，而不是数组。\n\n给定的树 [4,2,6,1,3,null,null] 可表示为下图:\n\n          4\n        /   \\\n      2      6\n     / \\    \n    1   3  \n\n最小的差值是 1, 它是节点1和节点2的差值, 也是节点3和节点2的差值。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li>二叉树的大小范围在 <code>2</code> 到&nbsp;<code>100</code>。</li>\n\t<li>二叉树总是有效的，每个节点的值都是整数，且不重复。</li>\n\t<li>本题与 530：<a href=\"https://leetcode-cn.com/problems/minimum-absolute-difference-in-bst/\">https://leetcode-cn.com/problems/minimum-absolute-difference-in-bst/</a> 相同</li>\n</ol>\n</div>","l":"简单","s":"# Definition for a binary tree node.","lang":"Ruby","href":"https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/","bb":{"x":445,"y":40,"w":116,"h":28}}

