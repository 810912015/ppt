{"ls":[{"s":"# @param {Integer[]} nums\n# @return {Integer}\ndef find_length_of_lcis(nums)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func findLengthOfLCIS(_ nums: [Int]) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func findLengthOfLCIS(nums []int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def findLengthOfLCIS(nums: Array[Int]): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun findLengthOfLCIS(nums: IntArray): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn find_length_of_lcis(nums: Vec<i32>) -> \ni32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int findLengthOfLCIS(int[] nums) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def findLengthOfLCIS(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def findLengthOfLCIS(self, nums: List[int]) -> \nint:","lang":"Python3"},{"s":"int findLengthOfLCIS(int* nums, int numsSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int FindLengthOfLCIS(int[] nums) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findLengthOfLCIS = function(nums) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums\n# @return {Integer}\ndef find_length_of_lcis(nums)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[]} nums\n# @return {Integer}\ndef find_length_of_lcis(nums)\n \nend","lang":"Ruby"}],"page":"674/1581","h":"674. 最长连续递增序列","d":"<div class=\"notranslate\"><p>给定一个未经排序的整数数组，找到最长且<strong>连续</strong>的的递增序列。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [1,3,5,4,7]\n<strong>输出:</strong> 3\n<strong>解释:</strong> 最长连续递增序列是 [1,3,5], 长度为3。\n尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为5和7在原数组里被4隔开。 \n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [2,2,2,2,2]\n<strong>输出:</strong> 1\n<strong>解释:</strong> 最长连续递增序列是 [2], 长度为1。\n</pre>\n\n<p><strong>注意：</strong>数组长度不会超过10000。</p>\n</div>","l":"简单","s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findLengthOfLCIS($nums) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/longest-continuous-increasing-subsequence/","bb":{"x":445,"y":40,"w":116,"h":28}}

