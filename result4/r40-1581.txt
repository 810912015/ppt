{"ls":[{"s":"class Solution {\n    public List<List<Integer>> combinationSum2(int[]\n candidates, int target) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def combinationSum2(self, candidates: List[int],\n target: int) -> List[List[int]]:","lang":"Python3"},{"s":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as \n*returnColumnSizes array.\n * Note: Both returned array and *columnSizes array \nmust be malloced, assume caller calls free().\n */\nint** combinationSum2(int* candidates, int \ncandidatesSize, int target, int* returnSize, int** \nreturnColumnSizes){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<IList<int>> CombinationSum2(int[] \ncandidates, int target) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum2 = function(candidates, target) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} candidates\n# @param {Integer} target\n# @return {Integer[][]}\ndef combination_sum2(candidates, target)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func combinationSum2(_ candidates: [Int], _ \ntarget: Int) -> [[Int]] {\n        \n    }\n}","lang":"Swift"},{"s":"func combinationSum2(candidates []int, target int) \n[][]int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def combinationSum2(candidates: Array[Int], \ntarget: Int): List[List[Int]] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun combinationSum2(candidates: IntArray, \ntarget: Int): List<List<Int>> {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn combination_sum2(candidates: Vec<i32>, \ntarget: i32) -> Vec<Vec<i32>> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $candidates\n     * @param Integer $target\n     * @return Integer[][]\n     */\n    function combinationSum2($candidates, $target) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[] $candidates\n     * @param Integer $target\n     * @return Integer[][]\n     */\n    function combinationSum2($candidates, $target) {\n        \n    }\n}","lang":"PHP"}],"page":"40/1581","h":"40. 组合总和 II","d":"<div class=\"notranslate\"><p>给定一个数组&nbsp;<code>candidates</code>&nbsp;和一个目标数&nbsp;<code>target</code>&nbsp;，找出&nbsp;<code>candidates</code>&nbsp;中所有可以使数字和为&nbsp;<code>target</code>&nbsp;的组合。</p>\n\n<p><code>candidates</code>&nbsp;中的每个数字在每个组合中只能使用一次。</p>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>所有数字（包括目标数）都是正整数。</li>\n\t<li>解集不能包含重复的组合。&nbsp;</li>\n</ul>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> candidates =&nbsp;<code>[10,1,2,7,6,1,5]</code>, target =&nbsp;<code>8</code>,\n<strong>所求解集为:</strong>\n[\n  [1, 7],\n  [1, 2, 5],\n  [2, 6],\n  [1, 1, 6]\n]\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> candidates =&nbsp;[2,5,2,1,2], target =&nbsp;5,\n<strong>所求解集为:</strong>\n[\n&nbsp; [1,2,2],\n&nbsp; [5]\n]</pre>\n</div>","l":"中等","s":"# @param {Integer[]} candidates","lang":"Ruby","href":"https://leetcode-cn.com/problems/combination-sum-ii/","bb":{"x":445,"y":40,"w":116,"h":28}}

