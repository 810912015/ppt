{"ls":[{"s":"class Solution {\n    public int[] findRedundantDirectedConnection(int\n[][] edges) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def findRedundantDirectedConnection(self, edges)\n:\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def findRedundantDirectedConnection(self, \nedges: List[List[int]]) -> List[int]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, \nassume caller calls free().\n */\nint* findRedundantDirectedConnection(int** edges, \nint edgesSize, int* edgesColSize, int* returnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int[] FindRedundantDirectedConnection(int\n[][] edges) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} edges\n * @return {number[]}\n */\nvar findRedundantDirectedConnection = function\n(edges) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[][]} edges\n# @return {Integer[]}\ndef find_redundant_directed_connection(edges)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func findRedundantDirectedConnection(_ edges: [\n[Int]]) -> [Int] {\n        \n    }\n}","lang":"Swift"},{"s":"func findRedundantDirectedConnection(edges [][]int) \n[]int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def findRedundantDirectedConnection(edges: Array\n[Array[Int]]): Array[Int] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun findRedundantDirectedConnection(edges: \nArray<IntArray>): IntArray {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn find_redundant_directed_connection\n(edges: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[][] $edges\n     * @return Integer[]\n     */\n    function findRedundantDirectedConnection($edges)\n {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[][] $edges\n     * @return Integer[]\n     */\n    function findRedundantDirectedConnection($edges)\n {\n        \n    }\n}","lang":"PHP"}],"page":"685/1581","h":"685. 冗余连接 II","d":"<div class=\"notranslate\"><p>在本问题中，有根树指满足以下条件的<strong>有向</strong>图。该树只有一个根节点，所有其他节点都是该根节点的后继。每一个节点只有一个父节点，除了根节点没有父节点。</p>\n\n<p>输入一个有向图，该图由一个有着N个节点 (节点值不重复1, 2, ..., N) 的树及一条附加的边构成。附加的边的两个顶点包含在1到N中间，这条附加的边不属于树中已存在的边。</p>\n\n<p>结果图是一个以<code>边</code>组成的二维数组。 每一个<code>边</code> 的元素是一对 <code>[u, v]</code>，用以表示<strong>有向</strong>图中连接顶点 <code>u</code> and <code>v</code>和顶点的边，其中父节点<code>u</code>是子节点<code>v</code>的一个父节点。</p>\n\n<p>返回一条能删除的边，使得剩下的图是有N个节点的有根树。若有多个答案，返回最后出现在给定二维数组的答案。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> [[1,2], [1,3], [2,3]]\n<strong>输出:</strong> [2,3]\n<strong>解释:</strong> 给定的有向图如下:\n  1\n / \\\nv   v\n2--&gt;3\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [[1,2], [2,3], [3,4], [4,1], [1,5]]\n<strong>输出:</strong> [4,1]\n<strong>解释:</strong> 给定的有向图如下:\n5 &lt;- 1 -&gt; 2\n     ^    |\n     |    v\n     4 &lt;- 3\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li>二维数组大小的在3到1000范围内。</li>\n\t<li>二维数组中的每个整数在1到N之间，其中 N 是二维数组的大小。</li>\n</ul>\n</div>","l":"困难","s":"# @param {Integer[][]} edges\n# @return {Integer[]}\ndef find_redundant_directed_connection(edges)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/redundant-connection-ii/","bb":{"x":445,"y":40,"w":116,"h":28}}

