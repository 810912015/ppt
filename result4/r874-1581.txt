{"ls":[{"s":"# @param {Integer[]} commands\n# @param {Integer[][]} obstacles\n# @return {Integer}\ndef robot_sim(commands, obstacles)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func robotSim(_ commands: [Int], _ obstacles: [\n[Int]]) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func robotSim(commands []int, obstacles [][]int) \nint {\n \n}","lang":"Go"},{"s":"object Solution {\n    def robotSim(commands: Array[Int], obstacles: \nArray[Array[Int]]): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun robotSim(commands: IntArray, obstacles: \nArray<IntArray>): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn robot_sim(commands: Vec<i32>, obstacles: \nVec<Vec<i32>>) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int robotSim(int[] commands, int[][] \nobstacles) {\n \n    }\n}","lang":"Java"},{"s":"class Solution {\n    public int robotSim(int[] commands, int[][] \nobstacles) {\n \n    }\n}","lang":"Java"},{"s":"class Solution:\n    def robotSim(self, commands: List[int], \nobstacles: List[List[int]]) -> int:","lang":"Python3"},{"s":"int robotSim(int* commands, int commandsSize, int** \nobstacles, int obstaclesSize, int* obstaclesColSize)\n{\n \n}","lang":"C"},{"s":"public class Solution {\n    public int RobotSim(int[] commands, int[][] \nobstacles) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} commands\n * @param {number[][]} obstacles\n * @return {number}\n */\nvar robotSim = function(commands, obstacles) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} commands\n# @param {Integer[][]} obstacles\n# @return {Integer}\ndef robot_sim(commands, obstacles)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[]} commands\n# @param {Integer[][]} obstacles\n# @return {Integer}\ndef robot_sim(commands, obstacles)\n \nend","lang":"Ruby"}],"page":"874/1581","h":"874. 模拟行走机器人","d":"<div class=\"notranslate\"><p>机器人在一个无限大小的网格上行走，从点&nbsp;(0, 0) 处开始出发，面向北方。该机器人可以接收以下三种类型的命令：</p>\n\n<ul>\n\t<li><code>-2</code>：向左转&nbsp;90 度</li>\n\t<li><code>-1</code>：向右转 90 度</li>\n\t<li><code>1 &lt;= x &lt;= 9</code>：向前移动&nbsp;<code>x</code>&nbsp;个单位长度</li>\n</ul>\n\n<p>在网格上有一些格子被视为障碍物。</p>\n\n<p>第 <code>i</code>&nbsp;个障碍物位于网格点 &nbsp;<code>(obstacles[i][0], obstacles[i][1])</code></p>\n\n<p>如果机器人试图走到障碍物上方，那么它将停留在障碍物的前一个网格方块上，但仍然可以继续该路线的其余部分。</p>\n\n<p>返回从原点到机器人的最大欧式距离的<strong>平方</strong>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入: </strong>commands = [4,-1,3], obstacles = []\n<strong>输出: </strong>25\n<strong>解释:</strong> 机器人将会到达 (3, 4)\n</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre><strong>输入: </strong>commands = [4,-1,4,-2,4], obstacles = [[2,4]]\n<strong>输出: </strong>65\n<strong>解释</strong>: 机器人在左转走到 (1, 8) 之前将被困在 (1, 4) 处\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= commands.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= obstacles.length &lt;= 10000</code></li>\n\t<li><code>-30000 &lt;= obstacle[i][0] &lt;= 30000</code></li>\n\t<li><code>-30000 &lt;= obstacle[i][1] &lt;= 30000</code></li>\n\t<li>答案保证小于&nbsp;<code>2 ^ 31</code></li>\n</ol>\n</div>","l":"简单","s":"class Solution {","lang":"PHP","href":"https://leetcode-cn.com/problems/walking-robot-simulation/","bb":{"x":445,"y":40,"w":116,"h":28}}

