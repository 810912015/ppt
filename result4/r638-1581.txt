{"ls":[{"s":"# @param {Integer[]} price\n# @param {Integer[][]} special\n# @param {Integer[]} needs\n# @return {Integer}\ndef shopping_offers(price, special, needs)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func shoppingOffers(_ price: [Int], _ special: [\n[Int]], _ needs: [Int]) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func shoppingOffers(price []int, special [][]int, \nneeds []int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def shoppingOffers(price: List[Int], special: \nList[List[Int]], needs: List[Int]): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun shoppingOffers(price: List<Int>, special: \nList<List<Int>>, needs: List<Int>): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn shopping_offers(price: Vec<i32>, \nspecial: Vec<Vec<i32>>, needs: Vec<i32>) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int shoppingOffers(List<Integer> price, \nList<List<Integer>> special, List<Integer> needs) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def shoppingOffers(self, price, special, needs):\n        \"\"\"\n        :type price: List[int]\n        :type special: List[List[int]]\n        :type needs: List[int]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def shoppingOffers(self, price: List[int], \nspecial: List[List[int]], needs: List[int]) -> int:","lang":"Python3"},{"s":"int shoppingOffers(int* price, int priceSize, int** \nspecial, int specialSize, int* specialColSize, int* \nneeds, int needsSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int ShoppingOffers(IList<int> price, \nIList<IList<int>> special, IList<int> needs) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} price\n * @param {number[][]} special\n * @param {number[]} needs\n * @return {number}\n */\nvar shoppingOffers = function(price, special, needs)\n {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} price\n# @param {Integer[][]} special\n# @param {Integer[]} needs\n# @return {Integer}\ndef shopping_offers(price, special, needs)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[]} price\n# @param {Integer[][]} special\n# @param {Integer[]} needs\n# @return {Integer}\ndef shopping_offers(price, special, needs)\n \nend","lang":"Ruby"}],"page":"638/1581","h":"638. 大礼包","d":"<div class=\"notranslate\"><p>在LeetCode商店中， 有许多在售的物品。</p>\n\n<p>然而，也有一些大礼包，每个大礼包以优惠的价格捆绑销售一组物品。</p>\n\n<p>现给定每个物品的价格，每个大礼包包含物品的清单，以及待购物品清单。请输出<strong>确切</strong>完成待购清单的最低花费。</p>\n\n<p>每个大礼包的由一个数组中的一组数据描述，最后一个数字代表大礼包的价格，其他数字分别表示内含的其他种类物品的数量。</p>\n\n<p>任意大礼包可无限次购买。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [2,5], [[3,0,5],[1,2,10]], [3,2]\n<strong>输出:</strong> 14\n<strong>解释:</strong> \n有A和B两种物品，价格分别为¥2和¥5。\n大礼包1，你可以以¥5的价格购买3A和0B。\n大礼包2， 你可以以¥10的价格购买1A和2B。\n你需要购买3个A和2个B， 所以你付了¥10购买了1A和2B（大礼包2），以及¥4购买2A。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [2,3,4], [[1,1,0,4],[2,2,1,9]], [1,2,1]\n<strong>输出:</strong> 11\n<strong>解释:</strong> \nA，B，C的价格分别为¥2，¥3，¥4.\n你可以用¥4购买1A和1B，也可以用¥9购买2A，2B和1C。\n你需要买1A，2B和1C，所以你付了¥4买了1A和1B（大礼包1），以及¥3购买1B， ¥4购买1C。\n你不可以购买超出待购清单的物品，尽管购买大礼包2更加便宜。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>最多6种物品， 100种大礼包。</li>\n\t<li>每种物品，你最多只需要购买6个。</li>\n\t<li>你不可以购买超出待购清单的物品，即使更便宜。</li>\n</ol>\n</div>","l":"中等","s":"class Solution {\n \n    /**\n     * @param Integer[] $price\n     * @param Integer[][] $special\n     * @param Integer[] $needs\n     * @return Integer\n     */\n    function shoppingOffers($price, $special, \n$needs) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/shopping-offers/","bb":{"x":445,"y":40,"w":116,"h":28}}

