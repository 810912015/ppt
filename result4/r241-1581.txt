{"ls":[{"s":"class Solution {\n    public List<Integer> diffWaysToCompute(String \ninput) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def diffWaysToCompute(self, input):\n        \"\"\"\n        :type input: str\n        :rtype: List[int]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def diffWaysToCompute(self, input: str) -> List\n[int]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, \nassume caller calls free().\n */\nint* diffWaysToCompute(char * input, int* \nreturnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<int> DiffWaysToCompute(string \ninput) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} input\n * @return {number[]}\n */\nvar diffWaysToCompute = function(input) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} input\n# @return {Integer[]}\ndef diff_ways_to_compute(input)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func diffWaysToCompute(_ input: String) -> [Int]\n {\n \n    }\n}","lang":"Swift"},{"s":"func diffWaysToCompute(input string) []int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def diffWaysToCompute(input: String): List[Int] \n= {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun diffWaysToCompute(input: String): List<Int> \n{\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn diff_ways_to_compute(input: String) -> \nVec<i32> {\n \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param String $input\n     * @return Integer[]\n     */\n    function diffWaysToCompute($input) {\n \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param String $input\n     * @return Integer[]\n     */\n    function diffWaysToCompute($input) {\n \n    }\n}","lang":"PHP"}],"page":"241/1581","h":"241. 为运算表达式设计优先级","d":"<div class=\"notranslate\"><p>给定一个含有数字和运算符的字符串，为表达式添加括号，改变其运算优先级以求出不同的结果。你需要给出所有可能的组合的结果。有效的运算符号包含 <code>+</code>,&nbsp;<code>-</code>&nbsp;以及&nbsp;<code>*</code>&nbsp;。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> <code>\"2-1-1\"</code>\n<strong>输出:</strong> <code>[0, 2]</code>\n<strong>解释: </strong>\n((2-1)-1) = 0 \n(2-(1-1)) = 2</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入: </strong><code>\"2*3-4*5\"</code>\n<strong>输出:</strong> <code>[-34, -14, -10, -10, 10]</code>\n<strong>解释: \n</strong>(2*(3-(4*5))) = -34 \n((2*3)-(4*5)) = -14 \n((2*(3-4))*5) = -10 \n(2*((3-4)*5)) = -10 \n(((2*3)-4)*5) = 10</pre>\n</div>","l":"中等","s":"# @param {String} input\n# @return {Integer[]}\ndef diff_ways_to_compute(input)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/different-ways-to-add-parentheses/","bb":{"x":445,"y":40,"w":116,"h":28}}

