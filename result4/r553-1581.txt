{"ls":[{"s":"# @param {Integer[]} nums\n# @return {String}\ndef optimal_division(nums)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func optimalDivision(_ nums: [Int]) -> String {\n        \n    }\n}","lang":"Swift"},{"s":"func optimalDivision(nums []int) string {\n \n}","lang":"Go"},{"s":"object Solution {\n    def optimalDivision(nums: Array[Int]): String = \n{\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun optimalDivision(nums: IntArray): String {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn optimal_division(nums: Vec<i32>) -> \nString {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public String optimalDivision(int[] nums) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def optimalDivision(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def optimalDivision(self, nums: List[int]) -> \nstr:","lang":"Python3"},{"s":"char * optimalDivision(int* nums, int numsSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public string OptimalDivision(int[] nums) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} nums\n * @return {string}\n */\nvar optimalDivision = function(nums) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} nums\n# @return {String}\ndef optimal_division(nums)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[]} nums\n# @return {String}\ndef optimal_division(nums)\n \nend","lang":"Ruby"}],"page":"553/1581","h":"553. 最优除法","d":"<div class=\"notranslate\"><p>给定一组<strong>正整数，</strong>相邻的整数之间将会进行浮点除法操作。例如，&nbsp;[2,3,4] -&gt; 2 / 3 / 4 。</p>\n\n<p>但是，你可以在任意位置添加任意数目的括号，来改变算数的优先级。你需要找出怎么添加括号，才能得到<strong>最大的</strong>结果，并且返回相应的字符串格式的表达式。<strong>你的表达式不应该含有冗余的括号。</strong></p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入:</strong> [1000,100,10,2]\n<strong>输出:</strong> \"1000/(100/10/2)\"\n<strong>解释:</strong>\n1000/(100/10/2) = 1000/((100/10)/2) = 200\n但是，以下加粗的括号 \"1000/(<strong>(</strong>100/10<strong>)</strong>/2)\" 是冗余的，\n因为他们并不影响操作的优先级，所以你需要返回 \"1000/(100/10/2)\"。\n\n其他用例:\n1000/(100/10)/2 = 50\n1000/(100/(10/2)) = 50\n1000/100/10/2 = 0.5\n1000/100/(10/2) = 2\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>输入数组的长度在 [1, 10] 之间。</li>\n\t<li>数组中每个元素的大小都在 [2, 1000] 之间。</li>\n\t<li>每个测试用例只有一个最优除法解。</li>\n</ol>\n</div>","l":"中等","s":"class Solution {\n \n    /**\n     * @param Integer[] $nums\n     * @return String\n     */\n    function optimalDivision($nums) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/optimal-division/","bb":{"x":445,"y":40,"w":116,"h":28}}

