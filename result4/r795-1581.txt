{"ls":[{"s":"# @param {Integer[]} a\n# @param {Integer} l\n# @param {Integer} r\n# @return {Integer}\ndef num_subarray_bounded_max(a, l, r)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func numSubarrayBoundedMax(_ A: [Int], _ L: Int,\n _ R: Int) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func numSubarrayBoundedMax(A []int, L int, R int) \nint {\n \n}","lang":"Go"},{"s":"object Solution {\n    def numSubarrayBoundedMax(A: Array[Int], L: Int,\n R: Int): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun numSubarrayBoundedMax(A: IntArray, L: Int, \nR: Int): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn num_subarray_bounded_max(a: Vec<i32>, l: \ni32, r: i32) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public int numSubarrayBoundedMax(int[] A, int L,\n int R) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def numSubarrayBoundedMax(self, A, L, R):\n        \"\"\"\n        :type A: List[int]\n        :type L: int\n        :type R: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def numSubarrayBoundedMax(self, A: List[int], \nL: int, R: int) -> int:","lang":"Python3"},{"s":"int numSubarrayBoundedMax(int* A, int ASize, int L, \nint R){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int NumSubarrayBoundedMax(int[] A, int L,\n int R) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[]} A\n * @param {number} L\n * @param {number} R\n * @return {number}\n */\nvar numSubarrayBoundedMax = function(A, L, R) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[]} a\n# @param {Integer} l\n# @param {Integer} r\n# @return {Integer}\ndef num_subarray_bounded_max(a, l, r)\n \nend","lang":"Ruby"},{"s":"# @param {Integer[]} a\n# @param {Integer} l\n# @param {Integer} r\n# @return {Integer}\ndef num_subarray_bounded_max(a, l, r)\n \nend","lang":"Ruby"}],"page":"795/1581","h":"795. 区间子数组个数","d":"<div class=\"notranslate\"><p>给定一个元素都是正整数的数组<code>A</code>&nbsp;，正整数 <code>L</code>&nbsp;以及&nbsp;<code>R</code>&nbsp;(<code>L &lt;= R</code>)。</p>\n\n<p>求连续、非空且其中最大元素满足大于等于<code>L</code>&nbsp;小于等于<code>R</code>的子数组个数。</p>\n\n<pre><strong>例如 :</strong>\n<strong>输入:</strong> \nA = [2, 1, 4, 3]\nL = 2\nR = 3\n<strong>输出:</strong> 3\n<strong>解释:</strong> 满足条件的子数组: [2], [2, 1], [3].\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li>L, R&nbsp; 和&nbsp;<code>A[i]</code> 都是整数，范围在&nbsp;<code>[0, 10^9]</code>。</li>\n\t<li>数组&nbsp;<code>A</code>&nbsp;的长度范围在<code>[1, 50000]</code>。</li>\n</ul>\n</div>","l":"中等","s":"class Solution {\n \n    /**\n     * @param Integer[] $A\n     * @param Integer $L\n     * @param Integer $R\n     * @return Integer\n     */\n    function numSubarrayBoundedMax($A, $L, $R) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/number-of-subarrays-with-bounded-maximum/","bb":{"x":445,"y":40,"w":116,"h":28}}

