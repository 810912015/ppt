{"ls":[{"s":"# @param {String[][]} accounts\n# @return {String[][]}\ndef accounts_merge(accounts)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func accountsMerge(_ accounts: [[String]]) -> [\n[String]] {\n        \n    }\n}","lang":"Swift"},{"s":"func accountsMerge(accounts [][]string) [][]string {\n \n}","lang":"Go"},{"s":"object Solution {\n    def accountsMerge(accounts: List[List[String]])\n: List[List[String]] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun accountsMerge(accounts: List<List<String>>)\n: List<List<String>> {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn accounts_merge(accounts: \nVec<Vec<String>>) -> Vec<Vec<String>> {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public List<List<String>> accountsMerge\n(List<List<String>> accounts) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def accountsMerge(self, accounts):\n        \"\"\"\n        :type accounts: List[List[str]]\n        :rtype: List[List[str]]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def accountsMerge(self, accounts: List[List[str]\n]) -> List[List[str]]:","lang":"Python3"},{"s":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as \n*returnColumnSizes array.\n * Note: Both returned array and *columnSizes array \nmust be malloced, assume caller calls free().\n */\nchar *** accountsMerge(char *** accounts, int \naccountsSize, int* accountsColSize, int* returnSize,\n int** returnColumnSizes){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<IList<string>> AccountsMerge\n(IList<IList<string>> accounts) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string[][]} accounts\n * @return {string[][]}\n */\nvar accountsMerge = function(accounts) {\n \n};","lang":"JavaScript"},{"s":"# @param {String[][]} accounts\n# @return {String[][]}\ndef accounts_merge(accounts)\n \nend","lang":"Ruby"},{"s":"# @param {String[][]} accounts\n# @return {String[][]}\ndef accounts_merge(accounts)\n \nend","lang":"Ruby"}],"page":"721/1581","h":"721. 账户合并","d":"<div class=\"notranslate\"><p>给定一个列表 <code>accounts</code>，每个元素 <code>accounts[i]</code>&nbsp;是一个字符串列表，其中第一个元素 <code>accounts[i][0]</code>&nbsp;是&nbsp;<em>名称 (name)</em>，其余元素是 <em>emails </em>表示该帐户的邮箱地址。</p>\n\n<p>现在，我们想合并这些帐户。如果两个帐户都有一些共同的邮件地址，则两个帐户必定属于同一个人。请注意，即使两个帐户具有相同的名称，它们也可能属于不同的人，因为人们可能具有相同的名称。一个人最初可以拥有任意数量的帐户，但其所有帐户都具有相同的名称。</p>\n\n<p>合并帐户后，按以下格式返回帐户：每个帐户的第一个元素是名称，其余元素是按顺序排列的邮箱地址。accounts 本身可以以任意顺序返回。</p>\n\n<p><strong>例子 1:</strong></p>\n\n<pre><strong>Input:</strong> \naccounts = [[\"John\", \"johnsmith@mail.com\", \"john00@mail.com\"], [\"John\", \"johnnybravo@mail.com\"], [\"John\", \"johnsmith@mail.com\", \"john_newyork@mail.com\"], [\"Mary\", \"mary@mail.com\"]]\n<strong>Output:</strong> [[\"John\", 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com'],  [\"John\", \"johnnybravo@mail.com\"], [\"Mary\", \"mary@mail.com\"]]\n<strong>Explanation:</strong> \n  第一个和第三个 John 是同一个人，因为他们有共同的电子邮件 \"johnsmith@mail.com\"。 \n  第二个 John 和 Mary 是不同的人，因为他们的电子邮件地址没有被其他帐户使用。\n  我们可以以任何顺序返回这些列表，例如答案[['Mary'，'mary@mail.com']，['John'，'johnnybravo@mail.com']，\n  ['John'，'john00@mail.com'，'john_newyork@mail.com'，'johnsmith@mail.com']]仍然会被接受。\n\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li><code>accounts</code>的长度将在<code>[1，1000]</code>的范围内。</li>\n\t<li><code>accounts[i]</code>的长度将在<code>[1，10]</code>的范围内。</li>\n\t<li><code>accounts[i][j]</code>的长度将在<code>[1，30]</code>的范围内。</li>\n</ul>\n</div>","l":"中等","s":"class Solution {\n \n    /**\n     * @param String[][] $accounts\n     * @return String[][]\n     */\n    function accountsMerge($accounts) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/accounts-merge/","bb":{"x":445,"y":40,"w":116,"h":28}}

