{"ls":[{"s":"class Solution {\n    public int poorPigs(int buckets, int \nminutesToDie, int minutesToTest) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, \nminutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def poorPigs(self, buckets: int, minutesToDie: \nint, minutesToTest: int) -> int:","lang":"Python3"},{"s":"int poorPigs(int buckets, int minutesToDie, int \nminutesToTest){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int PoorPigs(int buckets, int \nminutesToDie, int minutesToTest) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number} buckets\n * @param {number} minutesToDie\n * @param {number} minutesToTest\n * @return {number}\n */\nvar poorPigs = function(buckets, minutesToDie, \nminutesToTest) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer} buckets\n# @param {Integer} minutes_to_die\n# @param {Integer} minutes_to_test\n# @return {Integer}\ndef poor_pigs(buckets, minutes_to_die, \nminutes_to_test)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func poorPigs(_ buckets: Int, _ minutesToDie: \nInt, _ minutesToTest: Int) -> Int {\n        \n    }\n}","lang":"Swift"},{"s":"func poorPigs(buckets int, minutesToDie int, \nminutesToTest int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def poorPigs(buckets: Int, minutesToDie: Int, \nminutesToTest: Int): Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun poorPigs(buckets: Int, minutesToDie: Int, \nminutesToTest: Int): Int {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn poor_pigs(buckets: i32, minutes_to_die: \ni32, minutes_to_test: i32) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer $buckets\n     * @param Integer $minutesToDie\n     * @param Integer $minutesToTest\n     * @return Integer\n     */\n    function poorPigs($buckets, $minutesToDie, \n$minutesToTest) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer $buckets\n     * @param Integer $minutesToDie\n     * @param Integer $minutesToTest\n     * @return Integer\n     */\n    function poorPigs($buckets, $minutesToDie, \n$minutesToTest) {\n        \n    }\n}","lang":"PHP"}],"page":"458/1581","h":"458. 可怜的小猪","d":"<div class=\"notranslate\"><p>有 1000 只水桶，其中有且只有一桶装的含有毒药，其余装的都是水。它们从外观看起来都一样。如果小猪喝了毒药，它会在 15 分钟内死去。</p>\n\n<p>问题来了，如果需要你在一小时内，弄清楚哪只水桶含有毒药，你最少需要多少只猪？</p>\n\n<p>回答这个问题，并为下列的进阶问题编写一个通用算法。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶: </strong></p>\n\n<p>假设有 <code>n</code> 只水桶，猪饮水中毒后会在 <code>m</code> 分钟内死亡，你需要多少猪（<code>x</code>）就能在 <code>p</code> 分钟内找出 “<strong>有毒</strong>” 水桶？这&nbsp;<code>n</code> 只水桶里有且仅有一只有毒的桶。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>可以允许小猪同时饮用任意数量的桶中的水，并且该过程不需要时间。</li>\n\t<li>小猪喝完水后，必须有 <em>m</em> 分钟的<strong>冷却时间</strong>。在这段时间里，只允许观察，而不允许继续饮水。</li>\n\t<li>任何给定的桶都可以无限次采样（无限数量的猪）。</li>\n</ol>\n</div>","l":"困难","s":"# @param {Integer} buckets\n# @param {Integer} minutes_to_die\n# @param {Integer} minutes_to_test\n# @return {Integer}\ndef poor_pigs(buckets, minutes_to_die, \nminutes_to_test)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/poor-pigs/","bb":{"x":445,"y":40,"w":116,"h":28}}

