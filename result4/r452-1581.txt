{"ls":[{"s":"class Solution {\n    public int findMinArrowShots(int[][] points) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def findMinArrowShots(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def findMinArrowShots(self, points: List[List\n[int]]) -> int:","lang":"Python3"},{"s":"int findMinArrowShots(int** points, int pointsSize, \nint* pointsColSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public int FindMinArrowShots(int[][] points) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {number[][]} points\n * @return {number}\n */\nvar findMinArrowShots = function(points) {\n \n};","lang":"JavaScript"},{"s":"# @param {Integer[][]} points\n# @return {Integer}\ndef find_min_arrow_shots(points)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func findMinArrowShots(_ points: [[Int]]) -> \nInt {\n        \n    }\n}","lang":"Swift"},{"s":"func findMinArrowShots(points [][]int) int {\n \n}","lang":"Go"},{"s":"object Solution {\n    def findMinArrowShots(points: Array[Array[Int]])\n: Int = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun findMinArrowShots(points: Array<IntArray>): \nInt {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn find_min_arrow_shots(points: \nVec<Vec<i32>>) -> i32 {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function findMinArrowShots($points) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function findMinArrowShots($points) {\n        \n    }\n}","lang":"PHP"}],"page":"452/1581","h":"452. 用最少数量的箭引爆气球","d":"<div class=\"notranslate\"><p>在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以y坐标并不重要，因此只要知道开始和结束的x坐标就足够了。开始坐标总是小于结束坐标。平面内最多存在10<sup>4</sup>个气球。</p>\n\n<p>一支弓箭可以沿着x轴从不同点完全垂直地射出。在坐标x处射出一支箭，若有一个气球的直径的开始和结束坐标为 x<sub>start，</sub>x<sub>end，</sub> 且满足 &nbsp;x<sub>start</sub>&nbsp;≤ x ≤ x<sub>end，</sub>则该气球会被引爆<sub>。</sub>可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。</p>\n\n<p><strong>Example:</strong></p>\n\n<pre><strong>输入:</strong>\n[[10,16], [2,8], [1,6], [7,12]]\n\n<strong>输出:</strong>\n2\n\n<strong>解释:</strong>\n对于该样例，我们可以在x = 6（射爆[2,8],[1,6]两个气球）和 x = 11（射爆另外两个气球）。\n</pre>\n</div>","l":"中等","s":"# @param {Integer[][]} points\n# @return {Integer}\ndef find_min_arrow_shots(points)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/","bb":{"x":445,"y":40,"w":116,"h":28}}

