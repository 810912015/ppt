{"ls":[{"s":"# @param {String} num\n# @param {Integer} target\n# @return {String[]}\ndef add_operators(num, target)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func addOperators(_ num: String, _ target: Int) \n-> [String] {\n \n    }\n}","lang":"Swift"},{"s":"func addOperators(num string, target int) []string {\n \n}","lang":"Go"},{"s":"object Solution {\n    def addOperators(num: String, target: Int): List\n[String] = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun addOperators(num: String, target: Int): \nList<String> {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn add_operators(num: String, target: i32) \n-> Vec<String> {\n \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public List<String> addOperators(String num, \nint target) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def addOperators(self, num: str, target: int) \n-> List[str]:","lang":"Python3"},{"s":"/**\n * Note: The returned array must be malloced, \nassume caller calls free().\n */\nchar ** addOperators(char * num, int target, int* \nreturnSize){\n \n}","lang":"C"},{"s":"public class Solution {\n    public IList<string> AddOperators(string num, \nint target) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} num\n * @param {number} target\n * @return {string[]}\n */\nvar addOperators = function(num, target) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} num\n# @param {Integer} target\n# @return {String[]}\ndef add_operators(num, target)\n \nend","lang":"Ruby"},{"s":"# @param {String} num\n# @param {Integer} target\n# @return {String[]}\ndef add_operators(num, target)\n \nend","lang":"Ruby"}],"page":"282/1581","h":"282. 给表达式添加运算符","d":"<div class=\"notranslate\"><p>给定一个仅包含数字&nbsp;<code>0-9</code>&nbsp;的字符串和一个目标值，在数字之间添加<strong>二元</strong>运算符（不是一元）<code>+</code>、<code>-</code>&nbsp;或&nbsp;<code>*</code>&nbsp;，返回所有能够得到目标值的表达式。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> <code><em>num</em> = </code>\"123\", <em>target</em> = 6\n<strong>输出: </strong>[\"1+2+3\", \"1*2*3\"] \n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> <code><em>num</em> = </code>\"232\", <em>target</em> = 8\n<strong>输出: </strong>[\"2*3+2\", \"2+3*2\"]</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> <code><em>num</em> = </code>\"105\", <em>target</em> = 5\n<strong>输出: </strong>[\"1*0+5\",\"10-5\"]</pre>\n\n<p><strong>示例&nbsp;4:</strong></p>\n\n<pre><strong>输入:</strong> <code><em>num</em> = </code>\"00\", <em>target</em> = 0\n<strong>输出: </strong>[\"0+0\", \"0-0\", \"0*0\"]\n</pre>\n\n<p><strong>示例 5:</strong></p>\n\n<pre><strong>输入:</strong> <code><em>num</em> = </code>\"3456237490\", <em>target</em> = 9191\n<strong>输出: </strong>[]\n</pre>\n</div>","l":"困难","s":"class Solution {","lang":"PHP","href":"https://leetcode-cn.com/problems/expression-add-operators/","bb":{"x":445,"y":40,"w":116,"h":28}}

