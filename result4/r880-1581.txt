{"ls":[{"s":"class Solution {\n    public String decodeAtIndex(String S, int K) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def decodeAtIndex(self, S, K):\n        \"\"\"\n        :type S: str\n        :type K: int\n        :rtype: str\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def decodeAtIndex(self, S: str, K: int) -> str:","lang":"Python3"},{"s":"char * decodeAtIndex(char * S, int K){\n \n}","lang":"C"},{"s":"public class Solution {\n    public string DecodeAtIndex(string S, int K) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} S\n * @param {number} K\n * @return {string}\n */\nvar decodeAtIndex = function(S, K) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef decode_at_index(s, k)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func decodeAtIndex(_ S: String, _ K: Int) -> \nString {\n        \n    }\n}","lang":"Swift"},{"s":"func decodeAtIndex(S string, K int) string {\n \n}","lang":"Go"},{"s":"object Solution {\n    def decodeAtIndex(S: String, K: Int): String = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun decodeAtIndex(S: String, K: Int): String {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn decode_at_index(s: String, k: i32) -> \nString {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param String $S\n     * @param Integer $K\n     * @return String\n     */\n    function decodeAtIndex($S, $K) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param String $S\n     * @param Integer $K\n     * @return String\n     */\n    function decodeAtIndex($S, $K) {\n        \n    }\n}","lang":"PHP"}],"page":"880/1581","h":"880. 索引处的解码字符串","d":"<div class=\"notranslate\"><p>给定一个编码字符串 <code>S</code>。为了找出<em>解码</em>字符串并将其写入磁带，从编码字符串中<code>每次读取一个字符</code>，并采取以下步骤：</p>\n\n<ul>\n\t<li>如果所读的字符是字母，则将该字母写在磁带上。</li>\n\t<li>如果所读的字符是数字（例如 <code>d</code>），则整个当前磁带总共会被重复写&nbsp;<code>d-1</code> 次。</li>\n</ul>\n\n<p>现在，对于给定的编码字符串 <code>S</code> 和索引 <code>K</code>，查找并返回解码字符串中的第&nbsp;<code>K</code>&nbsp;个字母。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>S = \"leet2code3\", K = 10\n<strong>输出：</strong>\"o\"\n<strong>解释：</strong>\n解码后的字符串为 \"leetleetcodeleetleetcodeleetleetcode\"。\n字符串中的第 10 个字母是 \"o\"。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>S = \"ha22\", K = 5\n<strong>输出：</strong>\"h\"\n<strong>解释：</strong>\n解码后的字符串为 \"hahahaha\"。第 5 个字母是 \"h\"。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>S = \"a2345678999999999999999\", K = 1\n<strong>输出：</strong>\"a\"\n<strong>解释：</strong>\n解码后的字符串为 \"a\" 重复 8301530446056247680 次。第 1 个字母是 \"a\"。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= S.length &lt;= 100</code></li>\n\t<li><code>S</code>&nbsp;只包含小写字母与数字 <code>2</code> 到 <code>9</code> 。</li>\n\t<li><code>S</code>&nbsp;以字母开头。</li>\n\t<li><code>1 &lt;= K &lt;= 10^9</code></li>\n\t<li>解码后的字符串保证少于&nbsp;<code>2^63</code>&nbsp;个字母。</li>\n</ol>\n</div>","l":"中等","s":"# @param {String} s","lang":"Ruby","href":"https://leetcode-cn.com/problems/decoded-string-at-index/","bb":{"x":445,"y":40,"w":116,"h":28}}

{"ls":[{"s":"# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef decode_at_index(s, k)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func decodeAtIndex(_ S: String, _ K: Int) -> \nString {\n        \n    }\n}","lang":"Swift"},{"s":"func decodeAtIndex(S string, K int) string {\n \n}","lang":"Go"},{"s":"object Solution {\n    def decodeAtIndex(S: String, K: Int): String = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun decodeAtIndex(S: String, K: Int): String {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn decode_at_index(s: String, k: i32) -> \nString {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n    public String decodeAtIndex(String S, int K) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def decodeAtIndex(self, S, K):\n        \"\"\"\n        :type S: str\n        :type K: int\n        :rtype: str\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def decodeAtIndex(self, S: str, K: int) -> str:","lang":"Python3"},{"s":"char * decodeAtIndex(char * S, int K){\n \n}","lang":"C"},{"s":"public class Solution {\n    public string DecodeAtIndex(string S, int K) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} S\n * @param {number} K\n * @return {string}\n */\nvar decodeAtIndex = function(S, K) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef decode_at_index(s, k)\n \nend","lang":"Ruby"},{"s":"# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef decode_at_index(s, k)\n \nend","lang":"Ruby"}],"page":"880/1581","h":"880. 索引处的解码字符串","d":"<div class=\"notranslate\"><p>给定一个编码字符串 <code>S</code>。为了找出<em>解码</em>字符串并将其写入磁带，从编码字符串中<code>每次读取一个字符</code>，并采取以下步骤：</p>\n\n<ul>\n\t<li>如果所读的字符是字母，则将该字母写在磁带上。</li>\n\t<li>如果所读的字符是数字（例如 <code>d</code>），则整个当前磁带总共会被重复写&nbsp;<code>d-1</code> 次。</li>\n</ul>\n\n<p>现在，对于给定的编码字符串 <code>S</code> 和索引 <code>K</code>，查找并返回解码字符串中的第&nbsp;<code>K</code>&nbsp;个字母。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>S = \"leet2code3\", K = 10\n<strong>输出：</strong>\"o\"\n<strong>解释：</strong>\n解码后的字符串为 \"leetleetcodeleetleetcodeleetleetcode\"。\n字符串中的第 10 个字母是 \"o\"。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>S = \"ha22\", K = 5\n<strong>输出：</strong>\"h\"\n<strong>解释：</strong>\n解码后的字符串为 \"hahahaha\"。第 5 个字母是 \"h\"。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>S = \"a2345678999999999999999\", K = 1\n<strong>输出：</strong>\"a\"\n<strong>解释：</strong>\n解码后的字符串为 \"a\" 重复 8301530446056247680 次。第 1 个字母是 \"a\"。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= S.length &lt;= 100</code></li>\n\t<li><code>S</code>&nbsp;只包含小写字母与数字 <code>2</code> 到 <code>9</code> 。</li>\n\t<li><code>S</code>&nbsp;以字母开头。</li>\n\t<li><code>1 &lt;= K &lt;= 10^9</code></li>\n\t<li>解码后的字符串保证少于&nbsp;<code>2^63</code>&nbsp;个字母。</li>\n</ol>\n</div>","l":"中等","s":"class Solution {\n \n    /**\n     * @param String $S\n     * @param Integer $K\n     * @return String\n     */\n    function decodeAtIndex($S, $K) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/decoded-string-at-index/","bb":{"x":445,"y":40,"w":116,"h":28}}

