{"ls":[{"s":"class Solution {\n    public String fractionAddition(String \nexpression) {\n \n    }\n}","lang":"Java"},{"s":"class Solution(object):\n    def fractionAddition(self, expression):\n        \"\"\"\n        :type expression: str\n        :rtype: str\n        \"\"\"","lang":"Python"},{"s":"class Solution:\n    def fractionAddition(self, expression: str) -> \nstr:","lang":"Python3"},{"s":"char * fractionAddition(char * expression){\n \n}","lang":"C"},{"s":"public class Solution {\n    public string FractionAddition(string \nexpression) {\n \n    }\n}","lang":"C#"},{"s":"/**\n * @param {string} expression\n * @return {string}\n */\nvar fractionAddition = function(expression) {\n \n};","lang":"JavaScript"},{"s":"# @param {String} expression\n# @return {String}\ndef fraction_addition(expression)\n \nend","lang":"Ruby"},{"s":"class Solution {\n    func fractionAddition(_ expression: String) -> \nString {\n        \n    }\n}","lang":"Swift"},{"s":"func fractionAddition(expression string) string {\n \n}","lang":"Go"},{"s":"object Solution {\n    def fractionAddition(expression: String): \nString = {\n \n    }\n}","lang":"Scala"},{"s":"class Solution {\n    fun fractionAddition(expression: String): \nString {\n \n    }\n}","lang":"Kotlin"},{"s":"impl Solution {\n    pub fn fraction_addition(expression: String) -> \nString {\n        \n    }\n}","lang":"Rust"},{"s":"class Solution {\n \n    /**\n     * @param String $expression\n     * @return String\n     */\n    function fractionAddition($expression) {\n        \n    }\n}","lang":"PHP"},{"s":"class Solution {\n \n    /**\n     * @param String $expression\n     * @return String\n     */\n    function fractionAddition($expression) {\n        \n    }\n}","lang":"PHP"}],"page":"592/1581","h":"592. 分数加减运算","d":"<div class=\"notranslate\"><p>给定一个表示分数加减运算表达式的字符串，你需要返回一个字符串形式的计算结果。&nbsp;这个结果应该是不可约分的分数，即<a href=\"https://baike.baidu.com/item/%E6%9C%80%E7%AE%80%E5%88%86%E6%95%B0\">最简分数</a>。&nbsp;如果最终结果是一个整数，例如&nbsp;<code>2</code>，你需要将它转换成分数形式，其分母为&nbsp;<code>1</code>。所以在上述例子中, <code>2</code>&nbsp;应该被转换为&nbsp;<code>2/1</code>。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong>\"-1/2+1/2\"\n<strong>输出:</strong> \"0/1\"\n</pre>\n\n<p><strong>&nbsp;示例 2:</strong></p>\n\n<pre><strong>输入:</strong>\"-1/2+1/2+1/3\"\n<strong>输出:</strong> \"1/3\"\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong>\"1/3-1/2\"\n<strong>输出:</strong> \"-1/6\"\n</pre>\n\n<p><strong>示例 4:</strong></p>\n\n<pre><strong>输入:</strong>\"5/3+1/3\"\n<strong>输出:</strong> \"2/1\"\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>输入和输出字符串只包含&nbsp;<code>'0'</code> 到&nbsp;<code>'9'</code>&nbsp;的数字，以及&nbsp;<code>'/'</code>, <code>'+'</code> 和&nbsp;<code>'-'</code>。&nbsp;</li>\n\t<li>输入和输出分数格式均为&nbsp;<code>±分子/分母</code>。如果输入的第一个分数或者输出的分数是正数，则&nbsp;<code>'+'</code>&nbsp;会被省略掉。</li>\n\t<li>输入只包含合法的<strong>最简分数</strong>，每个分数的<strong>分子</strong>与<strong>分母</strong>的范围是&nbsp;&nbsp;[1,10]。&nbsp;如果分母是1，意味着这个分数实际上是一个整数。</li>\n\t<li>输入的分数个数范围是 [1,10]。</li>\n\t<li><strong>最终结果</strong>的分子与分母保证是 32 位整数范围内的有效整数。</li>\n</ol>\n</div>","l":"中等","s":"# @param {String} expression\n# @return {String}\ndef fraction_addition(expression)\n \nend","lang":"Ruby","href":"https://leetcode-cn.com/problems/fraction-addition-and-subtraction/","bb":{"x":445,"y":40,"w":116,"h":28}}

