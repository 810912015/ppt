{"ls":[{"s":"# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n \n# @param {TreeNode} root\n# @return {TreeNode}\ndef prune_tree(root)\n \nend","lang":"Ruby"},{"s":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func pruneTree(_ root: TreeNode?) -> TreeNode? {\n        \n    }\n}","lang":"Swift"},{"s":"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc pruneTree(root *TreeNode) *TreeNode {\n \n}","lang":"Go"},{"s":"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def pruneTree(root: TreeNode): TreeNode = {\n \n    }\n}","lang":"Scala"},{"s":"/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun pruneTree(root: TreeNode?): TreeNode? {\n \n    }\n}","lang":"Kotlin"},{"s":"// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn prune_tree(root: \nOption<Rc<RefCell<TreeNode>>>) -> \nOption<Rc<RefCell<TreeNode>>> {\n        \n    }","lang":"Rust"},{"s":"// Definition·for·a·binary·tree·node.\n//·#[derive(Debug,·PartialEq,·Eq)]\n//·pub·struct·TreeNode·{\n//···pub·val:·i32,\n//···pub·left:·Option<Rc<RefCell<TreeNode>>>,\n//···pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn prune_tree(root: \nOption<Rc<RefCell<TreeNode>>>) -> \nOption<Rc<RefCell<TreeNode>>> {\n        \n    }","lang":"Rust"},{"s":"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc pruneTree(root *TreeNode) *TreeNode {\n \n}","lang":"Go"},{"s":"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def pruneTree(root: TreeNode): TreeNode = {\n \n    }\n}","lang":"Scala"},{"s":"/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun pruneTree(root: TreeNode?): TreeNode? {\n \n    }\n}","lang":"Kotlin"},{"s":"// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn prune_tree(root: \nOption<Rc<RefCell<TreeNode>>>) -> \nOption<Rc<RefCell<TreeNode>>> {\n        \n    }","lang":"Rust"},{"s":"// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn prune_tree(root: \nOption<Rc<RefCell<TreeNode>>>) -> \nOption<Rc<RefCell<TreeNode>>> {\n        \n    }","lang":"Rust"},{"s":"/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = \n$value; }\n * }\n */\nclass Solution {\n \n    /**\n     * @param TreeNode $root\n     * @return TreeNode\n     */\n    function pruneTree($root) {\n        \n    }\n}","lang":"PHP"},{"s":"/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = \n$value; }\n * }\n */\nclass Solution {\n \n    /**\n     * @param TreeNode $root\n     * @return TreeNode\n     */\n    function pruneTree($root) {\n        \n    }\n}","lang":"PHP"}],"page":"814/1581","h":"814. 二叉树剪枝","d":"<div class=\"notranslate\"><p>给定二叉树根结点&nbsp;<code>root</code>&nbsp;，此外树的每个结点的值要么是 0，要么是 1。</p>\n\n<p>返回移除了所有不包含 1 的子树的原二叉树。</p>\n\n<p>( 节点 X 的子树为 X 本身，以及所有 X 的后代。)</p>\n\n<pre><strong>示例1:</strong>\n<strong>输入:</strong> [1,null,0,0,1]\n<strong>输出: </strong>[1,null,0,null,1]\n \n<strong>解释:</strong> \n只有红色节点满足条件“所有不包含 1 的子树”。\n右图为返回的答案。\n\n<img style=\"width:450px\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_2.png\" alt=\"\">\n</pre>\n\n<pre><strong>示例2:</strong>\n<strong>输入:</strong> [1,0,1,0,0,0,1]\n<strong>输出: </strong>[1,null,1,null,1]\n\n\n<img style=\"width:450px\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_1.png\" alt=\"\">\n</pre>\n\n<pre><strong>示例3:</strong>\n<strong>输入:</strong> [1,1,0,1,1,0,1,0]\n<strong>输出: </strong>[1,1,0,1,1,null,1]\n\n\n<img style=\"width:450px\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/05/1028.png\" alt=\"\">\n</pre>\n\n<p><strong>说明: </strong></p>\n\n<ul>\n\t<li>给定的二叉树最多有&nbsp;<code>100</code>&nbsp;个节点。</li>\n\t<li>每个节点的值只会为&nbsp;<code>0</code> 或&nbsp;<code>1</code>&nbsp;。</li>\n</ul>\n</div>","l":"中等","s":"/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = \n$value; }\n * }\n */\nclass Solution {\n \n    /**\n     * @param TreeNode $root\n     * @return TreeNode\n     */\n    function pruneTree($root) {\n        \n    }\n}","lang":"PHP","href":"https://leetcode-cn.com/problems/binary-tree-pruning/","bb":{"x":445,"y":40,"w":116,"h":28}}

